{

module Lexer

// Opens methods related to fslex.exe
open Microsoft.FSharp.Text.Lexing

let newline (lexbuf: LexBuffer<_>) = 
  lexbuf.StartPos <- lexbuf.StartPos.NextLine

}
// Base regular expressions
let digit = ['0'-'9']
let whitespace = [' ' '\t' ]
let newline = ('\n' | '\r' '\n')
 
rule tokenstream = parse
// ----------------------------
| whitespace      { tokenstream lexbuf }
| newline         { newline lexbuf; tokenstream lexbuf }
// ----------------------------
| ['-']?digit+  { Parser.INT }
| ['-']?digit+('.'digit+)?(['E']digit+)?   { Parser.FLOAT }
// ----------------------------
| "pi"            { Parser.PI }
| "e"             { Parser.E }
// ----------------------------
| "sin"           { Parser.SIN }
| "cos"           { Parser.COS }
| "tan"           { Parser.TAN }
// ----------------------------
| "+"             { Parser.PLUS }
| "-"             { Parser.DASH }
| "*"             { Parser.ASTERISK }
| "/"             { Parser.SLASH }
| "^"             { Parser.CARET }
| "("             { Parser.LPAREN }
| ")"             { Parser.RPAREN }
// ----------------------------
| eof             { Parser.EOF }