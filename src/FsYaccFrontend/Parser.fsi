// Signature file for parser generated by fsyacc
module Yard.Frontends.FsYaccFrontend.Parser
open Yard.Core
type token = 
  | HEAD of (Source)
  | ACTION_CODE of (Source)
  | IDENT of (Source)
  | COLON
  | BAR
  | TYPE_KW
  | TYPE of (Source)
  | START_KW
  | ASSOC_KW
  | TOKEN_KW
  | DOUBLE_PERC
  | EOF
type tokenId = 
    | TOKEN_HEAD
    | TOKEN_ACTION_CODE
    | TOKEN_IDENT
    | TOKEN_COLON
    | TOKEN_BAR
    | TOKEN_TYPE_KW
    | TOKEN_TYPE
    | TOKEN_START_KW
    | TOKEN_ASSOC_KW
    | TOKEN_TOKEN_KW
    | TOKEN_DOUBLE_PERC
    | TOKEN_EOF
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__starts
    | NONTERM_alternative
    | NONTERM_yard_list_13
    | NONTERM_yard_item_2
    | NONTERM_rule
    | NONTERM_yard_list_12
    | NONTERM_yard_option_11
    | NONTERM_yard_item_1
    | NONTERM_typedef
    | NONTERM_start
    | NONTERM_assoc
    | NONTERM_token
    | NONTERM_yard_nlist_10
    | NONTERM_yard_option_9
    | NONTERM_s
    | NONTERM_yard_option_8
    | NONTERM_yard_list_7
    | NONTERM_yard_nlist_6
    | NONTERM_yard_list_5
    | NONTERM_yard_list_4
    | NONTERM_yard_option_3
/// This function maps integers indexes to symbolic token ids
val tagOfToken: token -> int

/// This function maps integers indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val s : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> ('a) 
