{



//  Copyright 2010, 2011 Konstantin Ulitin
//
//  This file is part of YaccConctructor.
//
//  YaccConstructor is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.

(* Run with fslex.exe --unicode Lexer.fsl *)

module Yard.Frontends.AntlrFrontend.Lexer

open Yard.Frontends.AntlrFrontend.Parser // using tokens type 
open Microsoft.FSharp.Text.Lexing
open Yard.Core.IL

let comment_depth = ref 0
let source = ref ""
let lexeme_start = ref Position.Empty

let make_lexeme (n1 : Position, n2 : Position) = new Source.t(source.Value.Substring(n1.AbsoluteOffset, n2.AbsoluteOffset - n1.AbsoluteOffset), n1, n2)

// checks if the given identifier is keyword
let identifier lexeme = 
  match (lexeme : Source.t).text with
  | "grammar" -> T_GRAMMAR
  | "options" -> T_OPTIONS
  | "fragment" -> T_FRAGMENT
  | "skip" | "more" | "popMode" -> T_COMMAND 
  | s when System.Char.IsUpper s.[0]-> TERMINAL(lexeme)
  | s (*when System.Char.IsLower s.[0]*)-> IDENTIFIER(lexeme)

}

let eol = "\r\n" | '\n'
let lowerchar = ['a'-'z']
let upperchar = ['A'-'Z']
let identchar =  ['A'-'Z' 'a'-'z' '_' '-' '\192'-'\214' '\216'-'\246' '\248'-'\255' '0'-'9']
let regexpchar = identchar | ['[' ']' '\\']

rule main = parse
  | "{" { lexeme_start := lexbuf.EndPos; comment_depth := 1; action_code lexbuf }
  | '@' identchar* { CAT_CODE(make_lexeme(lexbuf.StartPos.ShiftColumnBy 1, lexbuf.EndPos)) }
  | "::" identchar* { ACTION_NAME(make_lexeme(lexbuf.StartPos.ShiftColumnBy 2, lexbuf.EndPos)) }
  | "/*" { lexeme_start := lexbuf.EndPos; comment_depth := 1; multiline_comment lexbuf }
  | "//" { lexeme_start := lexbuf.EndPos; singleline_comment lexbuf }
  | '\'' { lexeme_start := lexbuf.EndPos; literal lexbuf }
  | '\\' regexpchar { LITERAL(make_lexeme(lexbuf.StartPos, lexbuf.EndPos)) }
  | '"' { LITERAL(make_lexeme(lexbuf.StartPos, lexbuf.EndPos)) }
  | identchar* { identifier(make_lexeme(lexbuf.StartPos, lexbuf.EndPos)) }
  | ("mode" | "pushMode" | "type" | "channel") '(' identchar* ')' { T_COMMAND }
  | "->" { ARROW }
  | '(' { LPAREN }
  | ')' { RPAREN }
  | '|' { BAR }
  | '=' { EQUAL }
  | '*' | "*?" { STAR }
  | '+' | "+?" { PLUS }
  | ':' { COLON }
  | ';' { SEMICOLON }
  | '?' | "??" { QUESTION }
  | '!' { EXCLAMATION }
  | '~' { TILDE }
  | ".." { DOUBLE_DOT }
  | '.' { TERMINAL(make_lexeme(lexbuf.StartPos, lexbuf.EndPos)) }
  | '[' { SQR_LBR }
  | ']' { SQR_RBR }
  | '<' identchar* '=' identchar* '>' { main lexbuf } 
  | (identchar+)(' ')*'=' { main lexbuf }
  | (identchar+)(' ')*"+=" { main lexbuf }
  | '#'(' ')*(identchar+) { main lexbuf }
  | eof { EOF }
  | _ { main lexbuf }
and multiline_comment = parse
  | "/*" 
    { incr comment_depth; multiline_comment lexbuf }
  | "*/"
    { decr comment_depth;
      if !comment_depth = 0 then main lexbuf else multiline_comment lexbuf }
  | eof { EOF }
  | _ { multiline_comment lexbuf }
and singleline_comment = parse
  | eol { main lexbuf }
  | _ { singleline_comment lexbuf }
  | eof { EOF }
and action_code = parse
  // TODO: breaks if brace is commented in code - we don't know target language comment syntax
  | "{" 
    { incr comment_depth; action_code lexbuf }
  | "}"
    { decr comment_depth;
      if !comment_depth = 0 then ACTION_CODE(make_lexeme(!lexeme_start, lexbuf.StartPos)) else action_code lexbuf }
  | '\'' { literal lexbuf |> ignore; action_code lexbuf }
  | '"' { literal2 lexbuf |> ignore; action_code lexbuf }
  | eof { EOF }
  | _ { action_code lexbuf }
and literal = parse
  | '\'' { LITERAL(make_lexeme(!lexeme_start, lexbuf.StartPos)) }
  | "\\\\" | "\\'" | _ { literal lexbuf }
and literal2 = parse
  | '"' { LITERAL(make_lexeme(!lexeme_start, lexbuf.StartPos)) }
  | "\\\\" | "\\\"" | _ { literal2 lexbuf }
