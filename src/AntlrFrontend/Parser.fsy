%{
//  Copyright 2010, 2011 Konstantin Ulitin
//
//  This file is part of YaccConctructor.
//
//  YaccConstructor is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.

open Yard.Core.IL.Production
open Yard.Core

(* Run with fsyacc.exe --module Yard.Frontends.AntlrFrontend.Parser --open Yard.Core.IL Parser.fsy *)


(*
Expr: ID { Val($1) }
     | INT {  Int($1)  }
     | FLOAT {  Float($1)  }
     | DECR LPAREN Expr RPAREN {  Decr($3)  }


 Stmt: ID ASSIGN Expr { Assign($1,$3) }
     | WHILE Expr DO Stmt { While($2,$4) }
     | BEGIN StmtList END { Seq(List.rev($2)) }
     | IF Expr THEN Stmt { IfThen($2,$4) }
     | IF Expr THEN Stmt ELSE Stmt { IfThenElse($2,$4,$6) }
     | PRINT Expr { Print($2) }


 StmtList: Stmt { [$1] }
        | StmtList SEMI Stmt { $3 :: $1  }

*)

let makeModifiedRule innerProduction modifier =
    match modifier with
    | "+" -> PSome(innerProduction)
    | "*" -> PMany(innerProduction)
    | "?" -> POpt(innerProduction)
    | "!" -> innerProduction // Not included in AST
    | "" -> innerProduction
    | x -> failwithf "Unexpected modifier %s" x

let makePSeq (productionList, actionCode, checker) =
    PSeq( List.map (fun prod -> {omit = false; rule = prod; binding = None; checker = checker;}) productionList , actionCode, None )

let termCount = ref 0
let generateNewName =
    termCount := !termCount + 1
    sprintf "TERMINAL_%i" !termCount 
let terminals = new System.Collections.Generic.Dictionary<string, string>()
let makeToken (src : Source.t) descr =
    let identifier = src.text
    let newName = if identifier="" then generateNewName else identifier
    terminals.[newName] <- descr
    PToken src
        
%}

%token <Source.t> MULTILINE_COMMENT
%token <Source.t> SINGLELINE_COMMENT
%token <Source.t> CAT_CODE
%token <Source.t> ACTION_NAME
%token <Source.t> ACTION_CODE
%token EOF
%token T_GRAMMAR
%token T_OPTIONS
%token T_FRAGMENT
%token <Source.t> IDENTIFIER
%token <Source.t> LITERAL
%token <Source.t> TERMINAL
%token LPAREN 
%token RPAREN
%token BAR
%token EQUAL
%token STAR
%token PLUS
%token COLON
%token SEMICOLON
%token QUESTION
%token EXCLAMATION
%token TILDE
%token DOUBLE_DOT
%token SQR_LBR
%token SQR_RBR
%token T_COMMAND
%token ARROW


%start ParseAntlr
%type <Grammar.t<Source.t, Source.t> * System.Collections.Generic.Dictionary<string, string>> ParseAntlr


%%

//file: GrammarDeclaration Options GlobalScope Header Members Rules { Prog() }

ParseAntlr: GrammarName TopLevelDefs EOF { (defaultModules ($2), terminals)  }

GrammarName: T_GRAMMAR TERMINAL SEMICOLON { }
    | T_GRAMMAR IDENTIFIER SEMICOLON { }
    | { }

TopLevelDefs: TopLevelDef { $1 }
    | TopLevelDefs TopLevelDef { $1 @ $2 }

TopLevelDef: Rule { [$1] }
    | TerminalRule { [] }
    | T_OPTIONS ACTION_CODE { [] }
    | CAT_CODE ActionNameOpt ACTION_CODE { [] }

ActionNameOpt: ACTION_NAME { }
    | { }
    
Rule: IDENTIFIER OptionsOpt CatOpt COLON RuleBody SEMICOLON
    {
        {
            name = ($1)
            args = []
            body = $5
            isStart = false
            isPublic = false
            metaArgs = []
        } : Rule.t<Source.t, Source.t>
    }


CatOpt: CAT_CODE ACTION_CODE { }
    | { }

TerminalRule: FragmentOpt TERMINAL COLON RuleString CommandOpt SEMICOLON { makeToken ($2) (List.fold (fun acc elem -> acc+" "+elem) "" ($4)); }

FragmentOpt: T_FRAGMENT { }
    | { }

OptionsOpt: T_OPTIONS ACTION_CODE { }
    | { }

CommandOpt: ARROW T_COMMAND {}
	| ACTION_CODE {}
	| {}

RuleBody: PredicateOpt Alt { makePSeq ($2, None, $1) } | RuleBody BAR PredicateOpt Alt { PAlt($1, makePSeq ($4, None, $3)) }

Alt: Seq ActionCodeOpt { [$1] } | Seq Alt { $1 :: $2 }

ActionCodeOpt: { None }
    | ACTION_CODE { Some($1) }

Seq: LPAREN RuleBody RPAREN Modifier { makeModifiedRule $2 $4 }
    | SimpleProduction Modifier { makeModifiedRule ($1) $2 }

PredicateOpt: ACTION_CODE QUESTION { Some($1) }
    | { None }

Modifier: PLUS { "+" }
    | STAR { "*" }
    | QUESTION { "?" }
    | EXCLAMATION { "!" }
    | { "" }

SimpleProduction:
      IDENTIFIER { PRef($1, None) }
    | LITERAL DOUBLE_DOT LITERAL { 
        match ($1).text, ($3).text with
        | "0", "9" -> makeToken (new Source.t("NUMBER")) "'0'..'9'"
        | "\\0", "\\255" -> makeToken (new Source.t("CHAR"))  "'\\0'..'\\255'"
        | "a", "z" -> makeToken (new Source.t("LOWER_LATIN")) "'a'..'z'"
        | "A", "Z" -> makeToken (new Source.t("UPPER_LATIN")) "'A'..'Z'"
        | a, b -> makeToken (new Source.t("")) (a+".."+b)
        }
    | LITERAL { PLiteral($1) }
    | TERMINAL { PToken($1) }


RuleString : RulePart { [$1] }
    | RulePart RuleString  { $1 :: $2 }

RulePart: 
  DOUBLE_DOT { ".." }
  | TILDE { "~" }
  | QUESTION {"?" }
  | EXCLAMATION { "!" }
  | PLUS { "+" }
  | STAR { "*" }
  | EQUAL { "=" }
  | BAR { "|" }
  | RPAREN { ")" }
  | LPAREN { "(" }
  | LITERAL { ($1).text }
  | IDENTIFIER { ($1).text }
  | TERMINAL { ($1).text }
  | ACTION_CODE { "{"+($1).text+"}" }
  | ACTION_NAME { ($1).text }
  | CAT_CODE { ($1).text }
  | T_OPTIONS { "options" }
  | COLON { ":" }
  | SQR_LBR { "[" }
  | SQR_RBR { "]" }