// Signature file for parser generated by fsyacc
module Parser
type token = 
  | EOF
  | RPAREN
  | LPAREN
  | CARET
  | SLASH
  | ASTERISK
  | DASH
  | PLUS
  | TAN
  | COS
  | SIN
  | E
  | PI
  | FLOAT
  | INT
type tokenId = 
    | TOKEN_EOF
    | TOKEN_RPAREN
    | TOKEN_LPAREN
    | TOKEN_CARET
    | TOKEN_SLASH
    | TOKEN_ASTERISK
    | TOKEN_DASH
    | TOKEN_PLUS
    | TOKEN_TAN
    | TOKEN_COS
    | TOKEN_SIN
    | TOKEN_E
    | TOKEN_PI
    | TOKEN_FLOAT
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_File
/// This function maps integers indexes to symbolic token ids
val tagOfToken: token -> int

/// This function maps integers indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> ( int ) 
