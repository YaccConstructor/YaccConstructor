%{
//  Copyright 2009 Jake Kirilenko
//
//  This file is part of YaccConctructor.
//
//  YaccConstructor is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.

#nowarn "62";; 
open Microsoft.FSharp.Text
open Yard.Core.IL
open Yard.Core
open Yard.Core.IL.Production
open Yard.Core.IL.Grammar
open Yard.Core.IL.Definition
open System.Text.RegularExpressions
 
type Range = struct
    val Start: Lexing.Position
    val End: Lexing.Position

    new (start,end_) = {Start = start; End = end_}
end

exception ParseError of Source.t * string
let parseFile = ref Unchecked.defaultof<_>
let currentFilename = ref ""
let allPublic = ref false
let o2l = function Some x -> [x] | None -> []
let getList = function Some x -> x | None -> []
let fst_ (x,_,_) = x
let snd_ (_,x,_) = x
let trd_ (_,_,x) = x

let joinMaps (p:Map<'a,'b>) (q:Map<'a,'b>) = 
    Map(Seq.concat [ (Map.toSeq p) ; (Map.toSeq q) ])

let makeNewSeq seq (lbl:Source.t) (w:Option<Source.t>) = 
    match seq,w with 
     | PSeq(els,ac,_),_ -> match w with
                           | None -> PSeq (els,ac,Some {label=lbl.text; weight=None})
                           | _ -> let wVal = w.Value
                                  try
                                      PSeq (els,ac,Some {label=lbl.text; weight = Some (float wVal.text)})
                                  with 
                                  | :? System.FormatException as ex ->
                                      failwithf "Parse error on position (%i,%i) on token %s: %s" wVal.startPos.line wVal.startPos.column wVal.text "illegal weight. Number expected."
     | x,_ -> x

let errorexception msg parserRange = raise <| ParseError ( new Source.t("", fst parserRange, snd parserRange, !currentFilename), msg ) 
let createSeqElem bnd omitted r check =
    { binding = bnd; omit = omitted; rule = r; checker = check }

let parseRules (filename:string) : Definition.t<Source.t, Source.t> =
    let oldFileName = !currentFilename
    currentFilename := filename
    let ext = filename.Substring(filename.LastIndexOf(".") + 1)    
    let userDefs =
        let args = oldFileName.Trim().Split('%') in
        if args.Length = 2
        then args.[1]
        else ""
    let sameDirFilename = System.IO.Path.Combine(System.IO.Path.GetDirectoryName oldFileName, filename) in
    let res = !parseFile (sameDirFilename + "%" + userDefs)
    currentFilename := oldFileName
    res
%}

%token COLON
%token <Range> SEMICOLON
%token COMMA
%token EQUAL
%token BAR
%token STAR
%token START_RULE_SIGN
%token PLUS
%token MINUS
%token QUESTION
%token EXCLAMATION
%token <Range> LPAREN
%token <Range> RPAREN
%token GREAT
%token LESS
%token STARTREPEAT
%token ENDREPEAT
%token COMMUT
%token INCLUDE
%token SET
%token <IL.Source.t> EOF
%token <IL.Source.t> STRING LIDENT UIDENT
%token <IL.Source.t> PREDICATE ACTION
%token <IL.Source.t> PATTERN PARAM
%token <string> SHARPLINE
%token <IL.Source.t> DLABEL

%start file
%type <IL.Definition.t<IL.Source.t, IL.Source.t>> file

%%

kw : MODULE {$1} | INCLUDE {$1} | OPEN {$1} | PUBLIC {$1} | PRIVATE {$1}

file: action_opt
      includes_or_options_or_tokens
      unnamed_module_opt
      modules
      foot_opt
      EOF
        { 
            {
                info = { fileName = !currentFilename }
                head = $1
                grammar = fst_ $2 @ $3 @ $4
                foot = $5
                options = snd_ $2
                tokens = trd_ $2
            }
        }
    | error    
        { errorexception "\n  Incorrect construction! Closed bracket is not found!" parserRange }    

includes_or_options_or_tokens : 
    /* rules, options,   tokens   */
    {  [],    Map.empty, Map.empty }
  | include_ includes_or_options_or_tokens       { ($1 @ fst_ $2), snd_ $2, trd_ $2}
  | option_block includes_or_options_or_tokens   { fst_ $2, joinMaps $1 (snd_ $2), trd_ $2}
  | tokens_block includes_or_options_or_tokens { fst_ $2, snd_ $2, joinMaps $1 (trd_ $2)}

tokens_block : TOKENS_BLOCK
  {
    let block = $1.text
    let inner = block.[block.IndexOf '{' + 1 .. block.LastIndexOf '}' - 1]
    inner.Split [|'|'|]
    |> Array.map (fun s -> s.Trim())
    |> Array.filter ((<>) "")
    |> Array.map (fun s ->
        let genError msg = raise <| ParseError (new Source.t(s, fst parserRange, snd parserRange, !currentFilename),
                                                "Error in tokens block: " + msg)
        if Regex.IsMatch(s, @"^(_|[A-Z][A-Za-z0-9_]*)$") then s, None
        else
            let m = Regex.Match(s, @"^(_|[A-Z][A-Za-z0-9_]*)\s*of\s*(.*)$")
            if m.Success then
                m.Groups.[1].Value, Some m.Groups.[2].Value
            else
                if not (System.Char.IsUpper s.[0]) && not (s.[0] = '_' && s.Length > 1 && System.Char.IsWhiteSpace s.[1])
                then genError "Terminal must start from upper letter"
                else genError "Token type description is incorrect"
            
    ) |> Map.ofArray
  }

include_:
    INCLUDE STRING 
    {
        let grammar = (parseRules $2.text).grammar
        if grammar |> List.exists (fun m -> m.name.IsNone) then
            eprintfn "Error %s: Grammar in included files must be inside modules" $2.text
        grammar
    } 
    
option_block: OPTIONS_START opts BLOCK_END      { Map.ofList $2 : Map<_,_> }
            | opts BLOCK_END                    { errorexception "'{' is missing" parserRange }
    
opts: option opts { $1::$2 } | { [] }

option : option_l_value EQUAL option_value  { ($1 : Source.t).text, ($3 : Source.t).text }
       | option_l_value EQUAL               { errorexception " Expected 'option_value' after '=' " parserRange }
       | EQUAL option_value                 { errorexception " Expected 'option_value' before '=' " parserRange }
       | option_l_value option_value        { errorexception " Incorrect construction! '=' expected. " parserRange }

option_value: ident { $1 } | STRING { $1 } | kw { $1 }

option_l_value: ident { $1 } | kw { $1 }

unnamed_module_opt : rule_nlist
    {
        match $1 with
        | [] -> []
        | x ->  defaultModules x
    }

modules : module_ modules { $1 :: $2 } | { [] }

module_ : module_header ident openings rule_nlist
            {
                {
                    allPublic = $1
                    name = Some $2
                    openings = $3
                    rules = $4
                }
            }

ident : UIDENT { $1 } | LIDENT { $1 }

module_header : ALL_PUBLIC MODULE 
                {
                  (* It's important the word "module" is here. It guaranties, that it won't be an epsilon-tree, so allPublic will be evaluated before rules *)
                  allPublic := true; true
                }
              | MODULE      { allPublic := false; false }
              | ALL_PUBLIC  { errorexception " 'MODULE' expected " parserRange  }

openings :                      { [] } 
         | OPEN ident open_list { $2::$3 }
         | ident open_list      { errorexception " 'OPEN' expected, but 'ident' found " parserRange  }

open_list :                         { [] }
          | COMMA ident open_list   { $2::$3 }
          | ident open_list         { errorexception " ',' expected, but 'ident' found " parserRange } 

action_opt : { None } | ACTION { Some $1 }

foot_opt : { None } | SEMICOLON ACTION { Some $2 }

rule_nlist: rule semi_opt rule_nlist { $1::$3 } | { [] }

rule: start_rule_sign_opt access_modifier_opt LIDENT formal_meta_param_opt param_list COLON alts
            { 
                {
                    Rule.isStart = $1
                    Rule.isPublic = $2
                    Rule.name = $3
                    Rule.metaArgs = getList $4
                    Rule.body = $7
                    Rule.args = $5
                }
            }

rule_delim: COLON {$1} | EQUAL {$1}

start_rule_sign_opt: {false} | START_RULE_SIGN {true}

access_modifier_opt: PUBLIC { true } | PRIVATE { false } | { !allPublic }

formal_meta_param_opt :                                     { None } 
                      | LESS formal_meta_list GREAT         { Some $2 }
                      | LESS GREAT                          { errorexception "Incorrect construction! 'formal_meta_list' expected among '<' and '>'" parserRange }
                      | formal_meta_list GREAT              { errorexception "'<' is missing" parserRange }

formal_meta_list: LIDENT { [$1] } | LIDENT formal_meta_list   { $1::$2 }

param_opt : { None } | PARAM   { Some $1 }

param_list : { [] } | PARAM param_list { $1::$2 }

weight_opt :                        { None } 
           | SQR_LBR NUMBER SQR_RBR { Some $2}
           | SQR_LBR SQR_RBR        { errorexception "Incorrect construction! Expected 'NUMBER' among '[' and ']'" parserRange }
           | NUMBER SQR_RBR         { errorexception "'[' is missing" parserRange }  
           | SQR_LBR NUMBER         { errorexception "']' is missing" parserRange } 
          
alts: seq { $1 } | seq bar_seq_nlist {PAlt ($1,$2)}

bar_seq_nlist : BAR seq bar_seq_nlist { PAlt($2,$3) }  
              | BAR seq               { $2 }

seq: lbl_seq {$1} | no_lbl_seq {$1} 

no_lbl_seq: seq_elem seq_elem_list action_opt { PSeq ($1::$2, $3, None)}
          | ACTION                            { PSeq([], Some $1, None) }

lbl_seq : DLABEL weight_opt LPAREN no_lbl_seq RPAREN     { makeNewSeq $4 $1 $2 }
        | DLABEL weight_opt no_lbl_seq RPAREN            { errorexception " '(' is missing " parserRange }
    
comma_opt: { None } | COMMA {Some $1}

seq_elem_list: { [] } | comma_opt seq_elem seq_elem_list {$2::$3}

seq_elem: omit_opt bound predicate_opt { { $2 with checker = $3; omit = $1 } }

omit_opt: { false } | MINUS { true }

semi_opt : { false } | SEMICOLON {true}

predicate_opt: { None } | PREDICATE { Some $1 }

bound: patt EQUAL prim { createSeqElem (Some $1) false $3 None }
     | prim            { createSeqElem None false $1 None }   

patt: LIDENT {$1} | ACTION {$1}

parens : LPAREN alts RPAREN      {$2}
       | LPAREN RPAREN           { errorexception "Incorrect construction! Expected 'params' among '(' and ')'" parserRange }
       | alts RPAREN             { errorexception "'(' is missing" parserRange }

sqrbrdrs : SQR_LBR alts SQR_RBR    { POpt $2 }
         | SQR_LBR SQR_RBR         { errorexception "Incorrect construction! Expected 'params' among '[' and ']'" parserRange }
         | alts SQR_RBR            { errorexception "'[' is missing" parserRange }

prim: prim STAR                 { PMany $1 }
    | prim PLUS                 { PSome $1 }
    | prim QUESTION             { POpt $1 }
    | sqrbrdrs                  { POpt $1 }
    | parens                    { $1 }
    | call                      { $1 }
    | lbl_seq                   { $1 }
    | LITERAL                   { PLiteral $1 } 

meta_param  : prim {$1}

meta_params : meta_param                 {[$1]}
            | meta_param meta_params     {$1 :: $2}

meta_param_opt  :                            { None } 
                | LESS meta_params GREAT     { Some $2 }
                | LESS GREAT                 { errorexception "Incorrect construction! Expected 'params' among '<' and '>'" parserRange }
                | meta_params GREAT          { errorexception "'<' is missing" parserRange }

call: UIDENT {PToken $1}
    | LIDENT meta_param_opt param_opt  
        { match $2 with
            | None -> PRef  ($1, $3)
            | Some x -> PMetaRef ($1,$3,x)
        }

tada_rule : SHARPLINE {} | EOF {}
