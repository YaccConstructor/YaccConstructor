{
module YC.FST.AbstractLexing.CalcLexer

open Microsoft.FSharp.Collections
open YC.FST.GraphBasedFst
open YC.FSA.GraphBasedFsa
open YC.FST.AbstractLexing.Interpreter
open AbstractAnalysis.Common
open AbstractParser.Tokens
open System.Collections.Generic
}

let digit = ['0'-'9']
let whitespace = [' ' '\t' '\r' '\n']

let e = ['e''E']
rule token = parse
| whitespace { None }
| digit+ (['.']digit+)? (e e digit+)? { NUMBER(gr) |> Some }
| ['-'] { MINUS(gr) |> Some }
| ['('] { LBRACE(gr) |> Some }
| [')'] { RBRACE(gr) |> Some }
| ['/'] { DIV(gr)|> Some }
| ['+'] { PLUS(gr)|> Some }
| "**" { POW(gr)|> Some }
| ['*'] { MULT(gr)|> Some }

