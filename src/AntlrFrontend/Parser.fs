// Implementation file for parser generated by fsyacc
module Yard.Frontends.AntlrFrontend.Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Yard.Core.IL
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

//  Copyright 2010, 2011 Konstantin Ulitin
//
//  This file is part of YaccConctructor.
//
//  YaccConstructor is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.

open Yard.Core.IL.Production
open Yard.Core

(* Run with fsyacc.exe --module Yard.Frontends.AntlrFrontend.Parser --open Yard.Core.IL Parser.fsy *)


(*
Expr: ID { Val($1) }
     | INT {  Int($1)  }
     | FLOAT {  Float($1)  }
     | DECR LPAREN Expr RPAREN {  Decr($3)  }


 Stmt: ID ASSIGN Expr { Assign($1,$3) }
     | WHILE Expr DO Stmt { While($2,$4) }
     | BEGIN StmtList END { Seq(List.rev($2)) }
     | IF Expr THEN Stmt { IfThen($2,$4) }
     | IF Expr THEN Stmt ELSE Stmt { IfThenElse($2,$4,$6) }
     | PRINT Expr { Print($2) }


 StmtList: Stmt { [$1] }
        | StmtList SEMI Stmt { $3 :: $1  }

*)

let makeModifiedRule innerProduction modifier =
    match modifier with
    | "+" -> PSome(innerProduction)
    | "*" -> PMany(innerProduction)
    | "?" -> POpt(innerProduction)
    | "!" -> innerProduction // Not included in AST
    | "" -> innerProduction
    | x -> failwithf "Unexpected modifier %s" x

let makePSeq (productionList, actionCode, checker) =
    PSeq( List.map (fun prod -> {omit = false; rule = prod; binding = None; checker = checker;}) productionList , actionCode, None )

let termCount = ref 0
let generateNewName =
    termCount := !termCount + 1
    sprintf "TERMINAL_%i" !termCount 
let terminals = new System.Collections.Generic.Dictionary<string, string>()
let makeToken (src : Source.t) descr =
    let identifier = src.text
    let newName = if identifier="" then generateNewName else identifier
    terminals.[newName] <- descr
    PToken src
        

# 76 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | ARROW
  | T_COMMAND
  | SQR_RBR
  | SQR_LBR
  | DOUBLE_DOT
  | TILDE
  | EXCLAMATION
  | QUESTION
  | SEMICOLON
  | COLON
  | PLUS
  | STAR
  | EQUAL
  | BAR
  | RPAREN
  | LPAREN
  | TERMINAL of (Source.t)
  | LITERAL of (Source.t)
  | IDENTIFIER of (Source.t)
  | T_FRAGMENT
  | T_OPTIONS
  | T_GRAMMAR
  | EOF
  | ACTION_CODE of (Source.t)
  | ACTION_NAME of (Source.t)
  | CAT_CODE of (Source.t)
  | SINGLELINE_COMMENT of (Source.t)
  | MULTILINE_COMMENT of (Source.t)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_ARROW
    | TOKEN_T_COMMAND
    | TOKEN_SQR_RBR
    | TOKEN_SQR_LBR
    | TOKEN_DOUBLE_DOT
    | TOKEN_TILDE
    | TOKEN_EXCLAMATION
    | TOKEN_QUESTION
    | TOKEN_SEMICOLON
    | TOKEN_COLON
    | TOKEN_PLUS
    | TOKEN_STAR
    | TOKEN_EQUAL
    | TOKEN_BAR
    | TOKEN_RPAREN
    | TOKEN_LPAREN
    | TOKEN_TERMINAL
    | TOKEN_LITERAL
    | TOKEN_IDENTIFIER
    | TOKEN_T_FRAGMENT
    | TOKEN_T_OPTIONS
    | TOKEN_T_GRAMMAR
    | TOKEN_EOF
    | TOKEN_ACTION_CODE
    | TOKEN_ACTION_NAME
    | TOKEN_CAT_CODE
    | TOKEN_SINGLELINE_COMMENT
    | TOKEN_MULTILINE_COMMENT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startParseAntlr
    | NONTERM_ParseAntlr
    | NONTERM_GrammarName
    | NONTERM_TopLevelDefs
    | NONTERM_TopLevelDef
    | NONTERM_ActionNameOpt
    | NONTERM_Rule
    | NONTERM_CatOpt
    | NONTERM_TerminalRule
    | NONTERM_FragmentOpt
    | NONTERM_OptionsOpt
    | NONTERM_CommandOpt
    | NONTERM_RuleBody
    | NONTERM_Alt
    | NONTERM_ActionCodeOpt
    | NONTERM_Seq
    | NONTERM_PredicateOpt
    | NONTERM_Modifier
    | NONTERM_SimpleProduction
    | NONTERM_RuleString
    | NONTERM_RulePart

// This function maps tokens to integers indexes
let tagOfToken (t:token) = 
  match t with
  | ARROW  -> 0 
  | T_COMMAND  -> 1 
  | SQR_RBR  -> 2 
  | SQR_LBR  -> 3 
  | DOUBLE_DOT  -> 4 
  | TILDE  -> 5 
  | EXCLAMATION  -> 6 
  | QUESTION  -> 7 
  | SEMICOLON  -> 8 
  | COLON  -> 9 
  | PLUS  -> 10 
  | STAR  -> 11 
  | EQUAL  -> 12 
  | BAR  -> 13 
  | RPAREN  -> 14 
  | LPAREN  -> 15 
  | TERMINAL _ -> 16 
  | LITERAL _ -> 17 
  | IDENTIFIER _ -> 18 
  | T_FRAGMENT  -> 19 
  | T_OPTIONS  -> 20 
  | T_GRAMMAR  -> 21 
  | EOF  -> 22 
  | ACTION_CODE _ -> 23 
  | ACTION_NAME _ -> 24 
  | CAT_CODE _ -> 25 
  | SINGLELINE_COMMENT _ -> 26 
  | MULTILINE_COMMENT _ -> 27 

// This function maps integers indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_ARROW 
  | 1 -> TOKEN_T_COMMAND 
  | 2 -> TOKEN_SQR_RBR 
  | 3 -> TOKEN_SQR_LBR 
  | 4 -> TOKEN_DOUBLE_DOT 
  | 5 -> TOKEN_TILDE 
  | 6 -> TOKEN_EXCLAMATION 
  | 7 -> TOKEN_QUESTION 
  | 8 -> TOKEN_SEMICOLON 
  | 9 -> TOKEN_COLON 
  | 10 -> TOKEN_PLUS 
  | 11 -> TOKEN_STAR 
  | 12 -> TOKEN_EQUAL 
  | 13 -> TOKEN_BAR 
  | 14 -> TOKEN_RPAREN 
  | 15 -> TOKEN_LPAREN 
  | 16 -> TOKEN_TERMINAL 
  | 17 -> TOKEN_LITERAL 
  | 18 -> TOKEN_IDENTIFIER 
  | 19 -> TOKEN_T_FRAGMENT 
  | 20 -> TOKEN_T_OPTIONS 
  | 21 -> TOKEN_T_GRAMMAR 
  | 22 -> TOKEN_EOF 
  | 23 -> TOKEN_ACTION_CODE 
  | 24 -> TOKEN_ACTION_NAME 
  | 25 -> TOKEN_CAT_CODE 
  | 26 -> TOKEN_SINGLELINE_COMMENT 
  | 27 -> TOKEN_MULTILINE_COMMENT 
  | 30 -> TOKEN_end_of_input
  | 28 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startParseAntlr 
    | 1 -> NONTERM_ParseAntlr 
    | 2 -> NONTERM_GrammarName 
    | 3 -> NONTERM_GrammarName 
    | 4 -> NONTERM_GrammarName 
    | 5 -> NONTERM_TopLevelDefs 
    | 6 -> NONTERM_TopLevelDefs 
    | 7 -> NONTERM_TopLevelDef 
    | 8 -> NONTERM_TopLevelDef 
    | 9 -> NONTERM_TopLevelDef 
    | 10 -> NONTERM_TopLevelDef 
    | 11 -> NONTERM_ActionNameOpt 
    | 12 -> NONTERM_ActionNameOpt 
    | 13 -> NONTERM_Rule 
    | 14 -> NONTERM_CatOpt 
    | 15 -> NONTERM_CatOpt 
    | 16 -> NONTERM_TerminalRule 
    | 17 -> NONTERM_FragmentOpt 
    | 18 -> NONTERM_FragmentOpt 
    | 19 -> NONTERM_OptionsOpt 
    | 20 -> NONTERM_OptionsOpt 
    | 21 -> NONTERM_CommandOpt 
    | 22 -> NONTERM_CommandOpt 
    | 23 -> NONTERM_CommandOpt 
    | 24 -> NONTERM_RuleBody 
    | 25 -> NONTERM_RuleBody 
    | 26 -> NONTERM_Alt 
    | 27 -> NONTERM_Alt 
    | 28 -> NONTERM_ActionCodeOpt 
    | 29 -> NONTERM_ActionCodeOpt 
    | 30 -> NONTERM_Seq 
    | 31 -> NONTERM_Seq 
    | 32 -> NONTERM_PredicateOpt 
    | 33 -> NONTERM_PredicateOpt 
    | 34 -> NONTERM_Modifier 
    | 35 -> NONTERM_Modifier 
    | 36 -> NONTERM_Modifier 
    | 37 -> NONTERM_Modifier 
    | 38 -> NONTERM_Modifier 
    | 39 -> NONTERM_SimpleProduction 
    | 40 -> NONTERM_SimpleProduction 
    | 41 -> NONTERM_SimpleProduction 
    | 42 -> NONTERM_SimpleProduction 
    | 43 -> NONTERM_RuleString 
    | 44 -> NONTERM_RuleString 
    | 45 -> NONTERM_RulePart 
    | 46 -> NONTERM_RulePart 
    | 47 -> NONTERM_RulePart 
    | 48 -> NONTERM_RulePart 
    | 49 -> NONTERM_RulePart 
    | 50 -> NONTERM_RulePart 
    | 51 -> NONTERM_RulePart 
    | 52 -> NONTERM_RulePart 
    | 53 -> NONTERM_RulePart 
    | 54 -> NONTERM_RulePart 
    | 55 -> NONTERM_RulePart 
    | 56 -> NONTERM_RulePart 
    | 57 -> NONTERM_RulePart 
    | 58 -> NONTERM_RulePart 
    | 59 -> NONTERM_RulePart 
    | 60 -> NONTERM_RulePart 
    | 61 -> NONTERM_RulePart 
    | 62 -> NONTERM_RulePart 
    | 63 -> NONTERM_RulePart 
    | 64 -> NONTERM_RulePart 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 30 
let _fsyacc_tagOfErrorTerminal = 28

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | ARROW  -> "ARROW" 
  | T_COMMAND  -> "T_COMMAND" 
  | SQR_RBR  -> "SQR_RBR" 
  | SQR_LBR  -> "SQR_LBR" 
  | DOUBLE_DOT  -> "DOUBLE_DOT" 
  | TILDE  -> "TILDE" 
  | EXCLAMATION  -> "EXCLAMATION" 
  | QUESTION  -> "QUESTION" 
  | SEMICOLON  -> "SEMICOLON" 
  | COLON  -> "COLON" 
  | PLUS  -> "PLUS" 
  | STAR  -> "STAR" 
  | EQUAL  -> "EQUAL" 
  | BAR  -> "BAR" 
  | RPAREN  -> "RPAREN" 
  | LPAREN  -> "LPAREN" 
  | TERMINAL _ -> "TERMINAL" 
  | LITERAL _ -> "LITERAL" 
  | IDENTIFIER _ -> "IDENTIFIER" 
  | T_FRAGMENT  -> "T_FRAGMENT" 
  | T_OPTIONS  -> "T_OPTIONS" 
  | T_GRAMMAR  -> "T_GRAMMAR" 
  | EOF  -> "EOF" 
  | ACTION_CODE _ -> "ACTION_CODE" 
  | ACTION_NAME _ -> "ACTION_NAME" 
  | CAT_CODE _ -> "CAT_CODE" 
  | SINGLELINE_COMMENT _ -> "SINGLELINE_COMMENT" 
  | MULTILINE_COMMENT _ -> "MULTILINE_COMMENT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | ARROW  -> (null : System.Object) 
  | T_COMMAND  -> (null : System.Object) 
  | SQR_RBR  -> (null : System.Object) 
  | SQR_LBR  -> (null : System.Object) 
  | DOUBLE_DOT  -> (null : System.Object) 
  | TILDE  -> (null : System.Object) 
  | EXCLAMATION  -> (null : System.Object) 
  | QUESTION  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | STAR  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | BAR  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | TERMINAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LITERAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IDENTIFIER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | T_FRAGMENT  -> (null : System.Object) 
  | T_OPTIONS  -> (null : System.Object) 
  | T_GRAMMAR  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | ACTION_CODE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ACTION_NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CAT_CODE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SINGLELINE_COMMENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | MULTILINE_COMMENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 1us; 65535us; 2us; 3us; 2us; 65535us; 2us; 10us; 3us; 11us; 1us; 65535us; 16us; 17us; 2us; 65535us; 2us; 12us; 3us; 12us; 1us; 65535us; 21us; 22us; 2us; 65535us; 2us; 13us; 3us; 13us; 2us; 65535us; 2us; 28us; 3us; 28us; 1us; 65535us; 20us; 21us; 1us; 65535us; 31us; 32us; 2us; 65535us; 23us; 24us; 50us; 42us; 3us; 65535us; 40us; 41us; 44us; 45us; 46us; 48us; 1us; 65535us; 46us; 47us; 3us; 65535us; 40us; 46us; 44us; 46us; 46us; 46us; 3us; 65535us; 23us; 40us; 43us; 44us; 50us; 40us; 2us; 65535us; 51us; 52us; 53us; 54us; 3us; 65535us; 40us; 53us; 44us; 53us; 46us; 53us; 2us; 65535us; 30us; 31us; 66us; 67us; 2us; 65535us; 30us; 66us; 66us; 66us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 7us; 10us; 12us; 15us; 17us; 20us; 23us; 25us; 27us; 30us; 34us; 36us; 40us; 44us; 47us; 51us; 54us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 2us; 1us; 6us; 1us; 1us; 2us; 2us; 3us; 1us; 2us; 1us; 2us; 1us; 3us; 1us; 3us; 1us; 5us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 9us; 1us; 10us; 1us; 10us; 1us; 10us; 1us; 11us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 13us; 2us; 13us; 25us; 1us; 13us; 1us; 14us; 1us; 14us; 1us; 16us; 1us; 16us; 1us; 16us; 1us; 16us; 1us; 16us; 1us; 16us; 1us; 17us; 1us; 19us; 1us; 19us; 1us; 21us; 1us; 21us; 1us; 22us; 1us; 24us; 1us; 24us; 2us; 25us; 30us; 1us; 25us; 1us; 25us; 1us; 25us; 2us; 26us; 27us; 1us; 26us; 1us; 27us; 1us; 29us; 1us; 30us; 1us; 30us; 1us; 30us; 1us; 31us; 1us; 31us; 1us; 32us; 1us; 32us; 1us; 34us; 1us; 35us; 1us; 36us; 1us; 37us; 1us; 39us; 2us; 40us; 41us; 1us; 40us; 1us; 40us; 1us; 42us; 2us; 43us; 44us; 1us; 44us; 1us; 45us; 1us; 46us; 1us; 47us; 1us; 48us; 1us; 49us; 1us; 50us; 1us; 51us; 1us; 52us; 1us; 53us; 1us; 54us; 1us; 55us; 1us; 56us; 1us; 57us; 1us; 58us; 1us; 59us; 1us; 60us; 1us; 61us; 1us; 62us; 1us; 63us; 1us; 64us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 9us; 11us; 14us; 16us; 18us; 20us; 22us; 24us; 26us; 28us; 30us; 32us; 34us; 36us; 38us; 40us; 42us; 44us; 46us; 48us; 50us; 53us; 55us; 57us; 59us; 61us; 63us; 65us; 67us; 69us; 71us; 73us; 75us; 77us; 79us; 81us; 83us; 85us; 87us; 90us; 92us; 94us; 96us; 99us; 101us; 103us; 105us; 107us; 109us; 111us; 113us; 115us; 117us; 119us; 121us; 123us; 125us; 127us; 129us; 132us; 134us; 136us; 138us; 141us; 143us; 145us; 147us; 149us; 151us; 153us; 155us; 157us; 159us; 161us; 163us; 165us; 167us; 169us; 171us; 173us; 175us; 177us; 179us; 181us; |]
let _fsyacc_action_rows = 88
let _fsyacc_actionTableElements = [|1us; 16388us; 21us; 5us; 0us; 49152us; 4us; 16402us; 18us; 20us; 19us; 34us; 20us; 14us; 25us; 16us; 5us; 16402us; 18us; 20us; 19us; 34us; 20us; 14us; 22us; 4us; 25us; 16us; 0us; 16385us; 2us; 32768us; 16us; 6us; 18us; 8us; 1us; 32768us; 8us; 7us; 0us; 16386us; 1us; 32768us; 8us; 9us; 0us; 16387us; 0us; 16389us; 0us; 16390us; 0us; 16391us; 0us; 16392us; 1us; 32768us; 23us; 15us; 0us; 16393us; 1us; 16396us; 24us; 19us; 1us; 32768us; 23us; 18us; 0us; 16394us; 0us; 16395us; 1us; 16404us; 20us; 35us; 1us; 16399us; 25us; 26us; 1us; 32768us; 9us; 23us; 1us; 16417us; 23us; 55us; 2us; 32768us; 8us; 25us; 13us; 43us; 0us; 16397us; 1us; 32768us; 23us; 27us; 0us; 16398us; 1us; 32768us; 16us; 29us; 1us; 32768us; 9us; 30us; 20us; 32768us; 2us; 87us; 3us; 86us; 4us; 68us; 5us; 69us; 6us; 71us; 7us; 70us; 9us; 85us; 10us; 72us; 11us; 73us; 12us; 74us; 13us; 75us; 14us; 76us; 15us; 77us; 16us; 80us; 17us; 78us; 18us; 79us; 20us; 84us; 23us; 81us; 24us; 82us; 25us; 83us; 2us; 16407us; 0us; 37us; 23us; 39us; 1us; 32768us; 8us; 33us; 0us; 16400us; 0us; 16401us; 1us; 32768us; 23us; 36us; 0us; 16403us; 1us; 32768us; 1us; 38us; 0us; 16405us; 0us; 16406us; 4us; 32768us; 15us; 50us; 16us; 65us; 17us; 62us; 18us; 61us; 0us; 16408us; 2us; 32768us; 13us; 43us; 14us; 51us; 1us; 16417us; 23us; 55us; 4us; 32768us; 15us; 50us; 16us; 65us; 17us; 62us; 18us; 61us; 0us; 16409us; 5us; 16412us; 15us; 50us; 16us; 65us; 17us; 62us; 18us; 61us; 23us; 49us; 0us; 16410us; 0us; 16411us; 0us; 16413us; 1us; 16417us; 23us; 55us; 4us; 16422us; 6us; 60us; 7us; 59us; 10us; 57us; 11us; 58us; 0us; 16414us; 4us; 16422us; 6us; 60us; 7us; 59us; 10us; 57us; 11us; 58us; 0us; 16415us; 1us; 32768us; 7us; 56us; 0us; 16416us; 0us; 16418us; 0us; 16419us; 0us; 16420us; 0us; 16421us; 0us; 16423us; 1us; 16425us; 4us; 63us; 1us; 32768us; 17us; 64us; 0us; 16424us; 0us; 16426us; 20us; 16427us; 2us; 87us; 3us; 86us; 4us; 68us; 5us; 69us; 6us; 71us; 7us; 70us; 9us; 85us; 10us; 72us; 11us; 73us; 12us; 74us; 13us; 75us; 14us; 76us; 15us; 77us; 16us; 80us; 17us; 78us; 18us; 79us; 20us; 84us; 23us; 81us; 24us; 82us; 25us; 83us; 0us; 16428us; 0us; 16429us; 0us; 16430us; 0us; 16431us; 0us; 16432us; 0us; 16433us; 0us; 16434us; 0us; 16435us; 0us; 16436us; 0us; 16437us; 0us; 16438us; 0us; 16439us; 0us; 16440us; 0us; 16441us; 0us; 16442us; 0us; 16443us; 0us; 16444us; 0us; 16445us; 0us; 16446us; 0us; 16447us; 0us; 16448us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 2us; 3us; 8us; 14us; 15us; 18us; 20us; 21us; 23us; 24us; 25us; 26us; 27us; 28us; 30us; 31us; 33us; 35us; 36us; 37us; 39us; 41us; 43us; 45us; 48us; 49us; 51us; 52us; 54us; 56us; 77us; 80us; 82us; 83us; 84us; 86us; 87us; 89us; 90us; 91us; 96us; 97us; 100us; 102us; 107us; 108us; 114us; 115us; 116us; 117us; 119us; 124us; 125us; 130us; 131us; 133us; 134us; 135us; 136us; 137us; 138us; 139us; 141us; 143us; 144us; 145us; 166us; 167us; 168us; 169us; 170us; 171us; 172us; 173us; 174us; 175us; 176us; 177us; 178us; 179us; 180us; 181us; 182us; 183us; 184us; 185us; 186us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 3us; 3us; 3us; 0us; 1us; 2us; 1us; 1us; 2us; 3us; 1us; 0us; 6us; 2us; 0us; 6us; 1us; 0us; 2us; 0us; 2us; 1us; 0us; 2us; 4us; 2us; 2us; 0us; 1us; 4us; 2us; 2us; 0us; 1us; 1us; 1us; 1us; 0us; 1us; 3us; 1us; 1us; 1us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 3us; 3us; 4us; 4us; 4us; 4us; 5us; 5us; 6us; 7us; 7us; 8us; 9us; 9us; 10us; 10us; 11us; 11us; 11us; 12us; 12us; 13us; 13us; 14us; 14us; 15us; 15us; 16us; 16us; 17us; 17us; 17us; 17us; 17us; 18us; 18us; 18us; 18us; 19us; 19us; 20us; 20us; 20us; 20us; 20us; 20us; 20us; 20us; 20us; 20us; 20us; 20us; 20us; 20us; 20us; 20us; 20us; 20us; 20us; 20us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 65535us; 16385us; 65535us; 65535us; 16386us; 65535us; 16387us; 16389us; 16390us; 16391us; 16392us; 65535us; 16393us; 65535us; 65535us; 16394us; 16395us; 65535us; 65535us; 65535us; 65535us; 65535us; 16397us; 65535us; 16398us; 65535us; 65535us; 65535us; 65535us; 65535us; 16400us; 16401us; 65535us; 16403us; 65535us; 16405us; 16406us; 65535us; 16408us; 65535us; 65535us; 65535us; 16409us; 65535us; 16410us; 16411us; 16413us; 65535us; 65535us; 16414us; 65535us; 16415us; 65535us; 16416us; 16418us; 16419us; 16420us; 16421us; 16423us; 65535us; 65535us; 16424us; 16426us; 65535us; 16428us; 16429us; 16430us; 16431us; 16432us; 16433us; 16434us; 16435us; 16436us; 16437us; 16438us; 16439us; 16440us; 16441us; 16442us; 16443us; 16444us; 16445us; 16446us; 16447us; 16448us; |]
let _fsyacc_reductions ()  =    [| 
# 377 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Grammar.t<Source.t, Source.t> * System.Collections.Generic.Dictionary<string, string>)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startParseAntlr));
# 386 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'GrammarName)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'TopLevelDefs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "Parser.fsy"
                                                                (defaultModules (_2), terminals)  
                   )
# 108 "Parser.fsy"
                 : Grammar.t<Source.t, Source.t> * System.Collections.Generic.Dictionary<string, string>));
# 398 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Source.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "Parser.fsy"
                                                                 
                   )
# 110 "Parser.fsy"
                 : 'GrammarName));
# 409 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Source.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "Parser.fsy"
                                                            
                   )
# 111 "Parser.fsy"
                 : 'GrammarName));
# 420 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "Parser.fsy"
                             
                   )
# 112 "Parser.fsy"
                 : 'GrammarName));
# 430 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'TopLevelDef)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "Parser.fsy"
                                                 _1 
                   )
# 114 "Parser.fsy"
                 : 'TopLevelDefs));
# 441 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'TopLevelDefs)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'TopLevelDef)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "Parser.fsy"
                                                      _1 @ _2 
                   )
# 115 "Parser.fsy"
                 : 'TopLevelDefs));
# 453 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Rule)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "Parser.fsy"
                                         [_1] 
                   )
# 117 "Parser.fsy"
                 : 'TopLevelDef));
# 464 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'TerminalRule)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "Parser.fsy"
                                          [] 
                   )
# 118 "Parser.fsy"
                 : 'TopLevelDef));
# 475 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Source.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "Parser.fsy"
                                                   [] 
                   )
# 119 "Parser.fsy"
                 : 'TopLevelDef));
# 486 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Source.t)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ActionNameOpt)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Source.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "Parser.fsy"
                                                                [] 
                   )
# 120 "Parser.fsy"
                 : 'TopLevelDef));
# 499 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Source.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "Parser.fsy"
                                                  
                   )
# 122 "Parser.fsy"
                 : 'ActionNameOpt));
# 510 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "Parser.fsy"
                             
                   )
# 123 "Parser.fsy"
                 : 'ActionNameOpt));
# 520 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Source.t)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'OptionsOpt)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'CatOpt)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'RuleBody)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "Parser.fsy"
                          
                             {
                                 name = (_1)
                                 args = []
                                 body = _5
                                 isStart = false
                                 isPublic = false
                                 metaArgs = []
                             } : Rule.t<Source.t, Source.t>
                         
                   )
# 126 "Parser.fsy"
                 : 'Rule));
# 543 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Source.t)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Source.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 138 "Parser.fsy"
                                                    
                   )
# 138 "Parser.fsy"
                 : 'CatOpt));
# 555 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 139 "Parser.fsy"
                             
                   )
# 139 "Parser.fsy"
                 : 'CatOpt));
# 565 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'FragmentOpt)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Source.t)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'RuleString)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'CommandOpt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "Parser.fsy"
                                                                                                makeToken (_2) (List.fold (fun acc elem -> acc+" "+elem) "" (_4)); 
                   )
# 141 "Parser.fsy"
                 : 'TerminalRule));
# 579 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "Parser.fsy"
                                               
                   )
# 143 "Parser.fsy"
                 : 'FragmentOpt));
# 589 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "Parser.fsy"
                             
                   )
# 144 "Parser.fsy"
                 : 'FragmentOpt));
# 599 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Source.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "Parser.fsy"
                                                         
                   )
# 146 "Parser.fsy"
                 : 'OptionsOpt));
# 610 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 147 "Parser.fsy"
                             
                   )
# 147 "Parser.fsy"
                 : 'OptionsOpt));
# 620 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "Parser.fsy"
                                                  
                   )
# 149 "Parser.fsy"
                 : 'CommandOpt));
# 630 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Source.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "Parser.fsy"
                                     
                   )
# 150 "Parser.fsy"
                 : 'CommandOpt));
# 641 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "Parser.fsy"
                         
                   )
# 151 "Parser.fsy"
                 : 'CommandOpt));
# 651 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'PredicateOpt)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Alt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "Parser.fsy"
                                                  makePSeq (_2, None, _1) 
                   )
# 153 "Parser.fsy"
                 : 'RuleBody));
# 663 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'RuleBody)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'PredicateOpt)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Alt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "Parser.fsy"
                                                                                                              PAlt(_1, makePSeq (_4, None, _3)) 
                   )
# 153 "Parser.fsy"
                 : 'RuleBody));
# 676 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Seq)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ActionCodeOpt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "Parser.fsy"
                                              [_1] 
                   )
# 155 "Parser.fsy"
                 : 'Alt));
# 688 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Seq)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Alt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "Parser.fsy"
                                                                 _1 :: _2 
                   )
# 155 "Parser.fsy"
                 : 'Alt));
# 700 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 157 "Parser.fsy"
                                      None 
                   )
# 157 "Parser.fsy"
                 : 'ActionCodeOpt));
# 710 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Source.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 158 "Parser.fsy"
                                         Some(_1) 
                   )
# 158 "Parser.fsy"
                 : 'ActionCodeOpt));
# 721 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'RuleBody)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Modifier)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "Parser.fsy"
                                                            makeModifiedRule _2 _4 
                   )
# 160 "Parser.fsy"
                 : 'Seq));
# 733 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'SimpleProduction)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Modifier)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 "Parser.fsy"
                                                       makeModifiedRule (_1) _2 
                   )
# 161 "Parser.fsy"
                 : 'Seq));
# 745 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Source.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 163 "Parser.fsy"
                                                          Some(_1) 
                   )
# 163 "Parser.fsy"
                 : 'PredicateOpt));
# 756 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 164 "Parser.fsy"
                             None 
                   )
# 164 "Parser.fsy"
                 : 'PredicateOpt));
# 766 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 166 "Parser.fsy"
                                      "+" 
                   )
# 166 "Parser.fsy"
                 : 'Modifier));
# 776 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "Parser.fsy"
                                  "*" 
                   )
# 167 "Parser.fsy"
                 : 'Modifier));
# 786 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 168 "Parser.fsy"
                                      "?" 
                   )
# 168 "Parser.fsy"
                 : 'Modifier));
# 796 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 169 "Parser.fsy"
                                         "!" 
                   )
# 169 "Parser.fsy"
                 : 'Modifier));
# 806 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 170 "Parser.fsy"
                             "" 
                   )
# 170 "Parser.fsy"
                 : 'Modifier));
# 816 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Source.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 173 "Parser.fsy"
                                        PRef(_1, None) 
                   )
# 173 "Parser.fsy"
                 : 'SimpleProduction));
# 827 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Source.t)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Source.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 174 "Parser.fsy"
                                                        
                             match (_1).text, (_3).text with
                             | "0", "9" -> makeToken (new Source.t("NUMBER")) "'0'..'9'"
                             | "\\0", "\\255" -> makeToken (new Source.t("CHAR"))  "'\\0'..'\\255'"
                             | "a", "z" -> makeToken (new Source.t("LOWER_LATIN")) "'a'..'z'"
                             | "A", "Z" -> makeToken (new Source.t("UPPER_LATIN")) "'A'..'Z'"
                             | a, b -> makeToken (new Source.t("")) (a+".."+b)
                             
                   )
# 174 "Parser.fsy"
                 : 'SimpleProduction));
# 846 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Source.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 182 "Parser.fsy"
                                     PLiteral(_1) 
                   )
# 182 "Parser.fsy"
                 : 'SimpleProduction));
# 857 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Source.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 183 "Parser.fsy"
                                      PToken(_1) 
                   )
# 183 "Parser.fsy"
                 : 'SimpleProduction));
# 868 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'RulePart)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 186 "Parser.fsy"
                                             [_1] 
                   )
# 186 "Parser.fsy"
                 : 'RuleString));
# 879 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'RulePart)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'RuleString)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 187 "Parser.fsy"
                                                  _1 :: _2 
                   )
# 187 "Parser.fsy"
                 : 'RuleString));
# 891 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 190 "Parser.fsy"
                                    ".." 
                   )
# 190 "Parser.fsy"
                 : 'RulePart));
# 901 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 191 "Parser.fsy"
                                 "~" 
                   )
# 191 "Parser.fsy"
                 : 'RulePart));
# 911 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 192 "Parser.fsy"
                                   "?" 
                   )
# 192 "Parser.fsy"
                 : 'RulePart));
# 921 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 193 "Parser.fsy"
                                       "!" 
                   )
# 193 "Parser.fsy"
                 : 'RulePart));
# 931 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 194 "Parser.fsy"
                                "+" 
                   )
# 194 "Parser.fsy"
                 : 'RulePart));
# 941 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 195 "Parser.fsy"
                                "*" 
                   )
# 195 "Parser.fsy"
                 : 'RulePart));
# 951 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 196 "Parser.fsy"
                                 "=" 
                   )
# 196 "Parser.fsy"
                 : 'RulePart));
# 961 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 197 "Parser.fsy"
                               "|" 
                   )
# 197 "Parser.fsy"
                 : 'RulePart));
# 971 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 198 "Parser.fsy"
                                  ")" 
                   )
# 198 "Parser.fsy"
                 : 'RulePart));
# 981 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 199 "Parser.fsy"
                                  "(" 
                   )
# 199 "Parser.fsy"
                 : 'RulePart));
# 991 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Source.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 200 "Parser.fsy"
                                   (_1).text 
                   )
# 200 "Parser.fsy"
                 : 'RulePart));
# 1002 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Source.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 201 "Parser.fsy"
                                      (_1).text 
                   )
# 201 "Parser.fsy"
                 : 'RulePart));
# 1013 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Source.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 202 "Parser.fsy"
                                    (_1).text 
                   )
# 202 "Parser.fsy"
                 : 'RulePart));
# 1024 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Source.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 203 "Parser.fsy"
                                       "{"+(_1).text+"}" 
                   )
# 203 "Parser.fsy"
                 : 'RulePart));
# 1035 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Source.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 204 "Parser.fsy"
                                       (_1).text 
                   )
# 204 "Parser.fsy"
                 : 'RulePart));
# 1046 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Source.t)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 205 "Parser.fsy"
                                    (_1).text 
                   )
# 205 "Parser.fsy"
                 : 'RulePart));
# 1057 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 206 "Parser.fsy"
                                     "options" 
                   )
# 206 "Parser.fsy"
                 : 'RulePart));
# 1067 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 207 "Parser.fsy"
                                 ":" 
                   )
# 207 "Parser.fsy"
                 : 'RulePart));
# 1077 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 208 "Parser.fsy"
                                   "[" 
                   )
# 208 "Parser.fsy"
                 : 'RulePart));
# 1087 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 209 "Parser.fsy"
                                   "]" 
                   )
# 209 "Parser.fsy"
                 : 'RulePart));
|]
# 1098 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 31;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let ParseAntlr lexer lexbuf : Grammar.t<Source.t, Source.t> * System.Collections.Generic.Dictionary<string, string> =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
