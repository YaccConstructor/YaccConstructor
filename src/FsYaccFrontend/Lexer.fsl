{
//  Copyright 2010-2011 Konstantin Ulitin
//
//  This file is part of YaccConctructor.
//
//  YaccConstructor is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.

module YC.Frontends.FsYaccFrontend.Lexer

open YC.Frontends.FsYaccFrontend.Parser
open Microsoft.FSharp.Text
open YC.Core.IL

let comment_depth = ref 0
let source = ref ""
let lexeme_start = ref Lexing.Position.Empty

let offset (pos : Lexing.Position) = pos.AbsoluteOffset

let currentFile = ref ""

let newSourcePosition (fslexPos : Lexing.Position) =
    new SourcePosition(fslexPos.AbsoluteOffset, fslexPos.Line, fslexPos.Column)

let make_lexeme n1 n2 =
    source.Value.Substring(offset n1, offset n2 - offset n1)
    |> fun s -> new Source(s, newSourcePosition n1 , newSourcePosition n2, !currentFile)

let nextline (lexbuf:Lexing.LexBuffer<_>) = lexbuf.EndPos <- lexbuf.EndPos.NextLine
}

let eol = "\r\n" | '\n'
let lowerchar = ['a'-'z']
let upperchar = ['A'-'Z']
let identchar = ['A'-'Z' 'a'-'z' '_' '-' '0'-'9']

rule token = parse
  | "{" { lexeme_start := lexbuf.EndPos; comment_depth := 1; action_code lexbuf }
  | "%{" { lexeme_start := lexbuf.EndPos; head lexbuf }
  | "/*" { lexeme_start := lexbuf.EndPos; comment_depth := 1; multiline_comment lexbuf }
// ?  | '<' [^'>'] '>' { TYPE(make_lexeme lexbuf.StartPos lexbuf.EndPos.AbsoluteOffset) }
  | '<' { lexeme_start := lexbuf.EndPos; typedef lexbuf }
  | identchar* { IDENT(make_lexeme lexbuf.StartPos lexbuf.EndPos) }
  | '|' { BAR }
  | ':' { COLON }
  | "%%" { DOUBLE_PERC }
  | "%token" { TOKEN_KW }
  | "%type" { TYPE_KW }
  | "%start" { START_KW }
  | "%left" { ASSOC_KW }
  | "%right" { ASSOC_KW }
  | "%nonassoc" { ASSOC_KW }
  | eof { EOF }
  | eol { nextline lexbuf; token lexbuf }
  | _ { token lexbuf }
and typedef = parse
  | '>' { TYPE(make_lexeme !lexeme_start lexbuf.StartPos) }
  | eof { EOF }
  | eol { nextline lexbuf; typedef lexbuf }
  | _ { typedef lexbuf }
and head = parse
  // TODO breaks if "%}" is in literal for example
  | "%}" { HEAD(make_lexeme !lexeme_start lexbuf.StartPos) }
  | eof { EOF }
  | eol { nextline lexbuf; head lexbuf }
  | _ { head lexbuf }
and multiline_comment = parse
  | "/*" { incr comment_depth; multiline_comment lexbuf }
  | "*/" { decr comment_depth;
           if !comment_depth = 0 then token lexbuf else multiline_comment lexbuf }
  | eof { EOF }
  | eol { nextline lexbuf; multiline_comment lexbuf }
  | _ { multiline_comment lexbuf }
and action_code = parse
  // TODO: breaks if brace is commented in code - add f# comments
  | "{" { incr comment_depth; action_code lexbuf }
  | "}" { decr comment_depth;
        if !comment_depth = 0 then
            ACTION_CODE(make_lexeme !lexeme_start lexbuf.StartPos)
        else action_code lexbuf }
  | '\'' { literal lexbuf; action_code lexbuf }
  | '"' { literal2 lexbuf; action_code lexbuf }
  | eof { EOF }
  | eol { nextline lexbuf; action_code lexbuf }
  | _ { action_code lexbuf }
and literal = parse
  | '\'' { } // LITERAL(make_lexeme !lexeme_start lexbuf.StartPos)
  | eol { nextline lexbuf; literal lexbuf }
  | "\\\\" | "\\'" | _ { literal lexbuf }
and literal2 = parse
  | '"' { } // LITERAL(make_lexeme !lexeme_start lexbuf.StartPos)
  | eol { nextline lexbuf; literal2 lexbuf }
  | "\\\\" | "\\\"" | _ { literal2 lexbuf }

