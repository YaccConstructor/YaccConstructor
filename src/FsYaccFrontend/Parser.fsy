%{
// Copyright 2010-2011 Konstantin Ulitin
//
//  This file is part of YaccConctructor.
//
//  YaccConstructor is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.

open YC.Core.IL
 
%}
%token EOF
%token DOUBLE_PERC
%token TOKEN_KW
%token ASSOC_KW
%token START_KW
%token <Source> TYPE
%token TYPE_KW
%token BAR
%token COLON
%token <Source> IDENT
%token <Source> ACTION_CODE
%token <Source> HEAD

%start s

%type <'a> s

%%

alternative : yard_list_13 ACTION_CODE {
    let lst=$1 in
    let ac=$2 in
    lst
    |> List.map (fun prod ->
            {new ProductionElem<Source, Source>
                with omit=false
                and rule=prod
                and binding=None
                and checker=None})
    |> fun s -> PSeq(s, Some ac, None) }

yard_list_13 : { [] }
             | yard_item_2 yard_list_13
               {let yard_h=$1 in let yard_t=$2 in  yard_h::yard_t }

yard_item_2 : IDENT {let s=$1 in
                     if System.Char.IsUpper s.text.[0] then PToken s
                     else PRef(s, None)
                    }

rule : IDENT COLON yard_option_11 alternative yard_list_12 {
            let name=$1 in let alt=$4 in let opt_alts=$5 in
                { new Rule<Source, Source> 
                     with name= name
                     and args=[] 
                     and body=if opt_alts=[] then alt
                              else PAlt(alt, List.reduce (fun acc prod -> PAlt(acc, prod)) opt_alts)
                     and isStart=false
                     and isInline = false
                     and isPublic=false
                     and metaArgs=[] } }

yard_list_12 : { [] }
             | yard_item_1 yard_list_12
               {let yard_h=$1 in let yard_t=$2 in  yard_h::yard_t }

yard_option_11 : BAR { }
               | { }

yard_item_1 : BAR alternative {let alt=$2 in alt}

typedef : TYPE_KW TYPE yard_nlist_10 { }

start : START_KW yard_nlist_10 {let name=$2 in  name }

assoc : ASSOC_KW yard_nlist_10 { }

token : TOKEN_KW yard_option_9 yard_nlist_10 {let tokens=$3 in  tokens }

yard_nlist_10 : IDENT {let yard_h=$1 in  [yard_h] }
              | IDENT yard_nlist_10
                {let yard_h=$1 in let yard_t=$2 in  yard_h::yard_t }

yard_option_9 : TYPE {let yard_item=$1 in  Some yard_item }
              | { None }

s : yard_option_3 yard_list_4 yard_list_5 start yard_nlist_6 DOUBLE_PERC
    yard_list_7 yard_option_8 EOF
    {let h=$1 in let tokens=$2 in let st=$4 in let rules=$7 in  h, List.concat tokens, st, defaultModules rules }

yard_option_8 : DOUBLE_PERC { }
              | {  }

yard_list_7 : { [] }
            | rule yard_list_7
              {let yard_h=$1 in let yard_t=$2 in  yard_h::yard_t }

yard_nlist_6 : typedef {let yard_h=$1 in  [yard_h] }
             | typedef yard_nlist_6
               {let yard_h=$1 in let yard_t=$2 in  yard_h::yard_t }

yard_list_5 : { [] }
            | assoc yard_list_5
              {let yard_h=$1 in let yard_t=$2 in  yard_h::yard_t }

yard_list_4 : { [] }
            | token yard_list_4
              {let yard_h=$1 in let yard_t=$2 in  yard_h::yard_t }

yard_option_3 : HEAD {let yard_item=$1 in  Some yard_item }
              | { None }
