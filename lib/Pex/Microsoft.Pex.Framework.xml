<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Pex.Framework</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Pex.Engine.Choices.IPexChoiceFactory">
            <summary>
            A choice provider that also creates early method calls
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Choices.IPexChoiceProvider">
            <summary>
            Interface for an oracle provider.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Choices.IPexChoiceProvider.SetValueProvider(Microsoft.Pex.Engine.Choices.IPexChoiceValueProvider)">
            <summary>
            Sets the value provider.
            </summary>
            <param name="valueProvider">The value provider.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Choices.IPexChoiceProvider.NextSegment">
            <summary>
            Notifies the oracle provider that a new segment is about to start
            </summary>
            <returns>the segment index</returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Choices.IPexChoiceProvider.NextSession(System.String)">
            <summary>
            Retrieves an oracle session.
            </summary>
            <param name="name">The name of the session.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Choices.IPexChoiceProvider.NextComprehension(System.String)">
            <summary>
            Creates a new comprehension session.
            </summary>
            <param name="name">The name of the session.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Choices.IPexChoiceProvider.NextMethodCall(System.Object,System.String)">
            <summary>
            Retrieves a method-call specific oracle.
            </summary>
            <param name="instance">instance on which the method is called</param>
            <param name="methodId">identifier of called method</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Choices.IPexChoiceProvider.NextMethodCall(System.Object,System.Reflection.MethodBase)">
            <summary>
            Retrieves a method-call specific oracle.
            </summary>
            <param name="instance">instance on which the method is called</param>
            <param name="methodBase">identifier of called method</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Choices.IPexChoiceProvider.NextValueInjection(System.Object,System.String,System.Int32)">
            <summary>
            Retreoves a value-injection specific session.
            </summary>
            <param name="instance">instance on which the method is called</param>
            <param name="methodId">identifier of called method</param>
            <param name="codeLabel">code label of the injection point</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.Choices.IPexChoiceProvider.DefaultSession">
            <summary>
            Gets the default session
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Choices.IPexChoiceFactory.Create(System.String)">
            <summary>
            Creates method call oracle whose choices can be retrieved
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.ComponentModel.IPexComponentElement">
            <summary>
            Pex component element
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexComponentElement.Host">
            <summary>
            Gets the host.
            </summary>
            <value>The host.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.ComponentModel.IPexComponentServices">
            <summary>
            Globally accessible Pex services
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexComponentServices.Options">
            <summary>
            Gets the options
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexComponentServices.CurrentAssembly">
            <summary>
            Gets the current assembly.
            </summary>
            <value>The current assembly.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexComponentServices.PackageManager">
            <summary>
            Gets the current package manager
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexComponentServices.FilterManager">
            <summary>
            Gets the filter manager.
            </summary>
            <value>The filter manager.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexComponentServices.ExplorationsManager">
            <summary>
            Gets the explorations manager.
            </summary>
            <value>The explorations manager.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexComponentServices.TestManager">
            <summary>
            Gets the test manager.
            </summary>
            <value>The test manager.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexComponentServices.TestHasher">
            <summary>
            Gets the test hasher.
            </summary>
            <value>The test hasher.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexComponentServices.TestFrameworkManager">
            <summary>
            Gets the test framework manager.
            </summary>
            <value>The test framework manager.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexComponentServices.MixManager">
            <summary>
            Gets the mix manager.
            </summary>
            <value>The mix manager.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexComponentServices.FixItManager">
            <summary>
            Gets the fix-it manager.
            </summary>
            <value>The fix-it manager.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexComponentServices.CoverageManager">
            <summary>
            Gets the coverage manager.
            </summary>
            <value>The coverage manager.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexComponentServices.ReportManager">
            <summary>
            Gets the report manager.
            </summary>
            <value>The report manager.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexComponentServices.ExplorationStrategyFactory">
            <summary>
            Gets the exploration strategy factory.
            </summary>
            <value>The exploration strategy factory.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexComponentServices.EffectsManager">
            <summary>
            Gets the effects manager.
            </summary>
            <value>The effects manager.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexComponentServices.LogManager">
            <summary>
            Gets the log manager.
            </summary>
            <value>The log manager.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexComponentServices.Driver">
            <summary>
            Gets the driver.
            </summary>
            <value>The driver.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexComponentServices.ExplorableGuesserManager">
            <summary>
            Gets the explorable guesser manager.
            </summary>
            <value>The explorable guesser manager.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexComponentServices.ExplorableCacheManager">
            <summary>
            Gets the explorable cache manager.
            </summary>
            <value>The explorable cache manager.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexComponentServices.ReflectorManager">
            <summary>
            Gets the reflector manager.
            </summary>
            <value>The reflector manager.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexComponentServices.ProgressManager">
            <summary>
            Gets the progress manager
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexComponentServices.StubDelegateManager">
            <summary>
            Gets the stubs delegate manager
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexComponentServices.MolesMetadataManager">
            <summary>
            Gets the stubs and moles metadata manager
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexComponentServices.TestPrioritizationManager">
            <summary>
            Gets the test prioritization manager
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexComponentServices.TestFrameworkDriver">
            <summary>
            Gets the test framework driver
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexComponentServices.MetricManager">
            <summary>
            Gets the metric manager
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexComponentServices.FixtureMetricManager">
            <summary>
            Gets the fixture metric manager
            </summary>
            <value>The metric manager.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.ComponentModel.IPexDecoratedComponentElement">
            <summary>
            Pex decorated component element
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.ComponentModel.IPexDecoratedComponentElement.AddExplorationPackage(Microsoft.ExtendedReflection.Metadata.Names.Name,Microsoft.Pex.Engine.Packages.IPexExplorationPackage)">
            <summary>
            Adds an exploration package.
            </summary>
            <param name="location">The location.</param>
            <param name="explorationPackage">The exploration package.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.ComponentModel.IPexDecoratedComponentElement.AddPathPackage(Microsoft.ExtendedReflection.Metadata.Names.Name,Microsoft.Pex.Engine.Packages.IPexPathPackage)">
            <summary>
            Adds a path package.
            </summary>
            <param name="location">The location.</param>
            <param name="pathPackage">The path package.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.ComponentModel.IPexDecoratedComponentElement.AddCoverageFilter(Microsoft.ExtendedReflection.Coverage.ICoverageFilter)">
            <summary>
            Adds a coverage filter.
            </summary>
            <param name="coverageFilter">The coverage filter.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.ComponentModel.IPexDecoratedComponentElement.AddFocus(Microsoft.Pex.Engine.Focus.IPexFocus)">
            <summary>
            Adds a focus.
            </summary>
            <param name="focus">The focus.</param>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexDecoratedComponentElement.CoverageFilters">
            <summary>
            Gets the coverage filters.
            </summary>
            <value>The coverage filters.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexDecoratedComponentElement.Focuses">
            <summary>
            Gets the focuses.
            </summary>
            <value>The focuses.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexDecoratedComponentElement.ExplorationPackages">
            <summary>
            Gets the exploration packages.
            </summary>
            <value>The exploration packages.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexDecoratedComponentElement.PathPackages">
            <summary>
            Gets the path packages.
            </summary>
            <value>The path packages.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent">
            <summary>
            Pex exploration component
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.ComponentModel.IPexComponent">
            <summary>
            A Pex component
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexComponent.Log">
            <summary>
            Gets the log.
            </summary>
            <value>The log.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexComponent.Services">
            <summary>
            Gets common services available to all components.
            </summary>
            <value>The pex services.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent.Log">
            <summary>
            Gets the log.
            </summary>
            <value>The log.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent.ExplorationServices">
            <summary>
            Gets the exploration services.
            </summary>
            <value>The exploration services.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponentElement">
            <summary>
            Pex exploration component element
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponentElement.Host">
            <summary>
            Gets the host.
            </summary>
            <value>The host.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponentServices">
            <summary>
            Services available in Pex for the execution of a multiple paths
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponentServices.CurrentExploration">
            <summary>
            Gets information of the current exploration
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponentServices.Result">
            <summary>
            Gets the exploration result instance
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponentServices.ExplorableManager">
            <summary>
            Gets the explorable manager.
            </summary>
            <value>The explorable manager.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponentServices.PreparableManager">
            <summary>
            Gets the preparable manager.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponentServices.CreatableManager">
            <summary>
            Gets the creatable manager.
            </summary>
            <value>The creatable manager.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponentServices.CreatableFactoryManager">
            <summary>
            Gets the creatable factory manager.
            </summary>
            <value>The creatable factory manager.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponentServices.Driver">
            <summary>
            Gets the driver.
            </summary>
            <value>The driver.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponentServices.ExceptionManager">
            <summary>
            Gets the exception manager.
            </summary>
            <value>The exception manager.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponentServices.ValueInjectorFilterManager">
            <summary>
            Gets the value injector filter manager.
            </summary>
            <value>The value injector filter manager.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponentServices.CachedLog">
            <summary>
            Gets a caching log proxy
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponentServices.DomainManager">
            <summary>
            Gets the domain manager.
            </summary>
            <value>The domain manager.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponentServices.TestNamerManager">
            <summary>
            Gets the test namer manager
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponentServices.TestMethodGenerator">
            <summary>
            Gets the test method generator.
            </summary>
            <value>The test method generator.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponentServices.TargetStrategyManager">
            <summary>
            Gets the target strategy manager.
            </summary>
            <value>The target strategy manager.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponentServices.Searcher">
            <summary>
            Gets the searcher.
            </summary>
            <value>The searcher.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponentServices.ComprehensionManager">
            <summary>
            Gets the comprehension manager.
            </summary>
            <value>The comprehension manager.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponentServices.StateManager">
            <summary>
            Gets the state manager.
            </summary>
            <value>The state manager.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponentServices.InputEnumeratorManager">
            <summary>
            Gets the input enumerator manager.
            </summary>
            <value>The input enumerator manager.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponentServices.SearchFrontierManager">
            <summary>
            Gets the search frontier manager.
            </summary>
            <value>The search frontier manager.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponentServices.WeightProvider">
            <summary>
            Gets the optional default weight provider for prioritized frontiers.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponentServices.CoverageManager">
            <summary>
            Gets the coverage manager at the exploration level
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponentServices.GoalManager">
            <summary>
            Gets the goal manager
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponentServices.ArithmeticSolverManager">
            <summary>
            Gets the arithmetic solver manager.
            </summary>
            <value>The arithmetic solver manager.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponentServices.RuntimeContextManager">
            <summary>
            Gets the runtime context manager
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponentServices.AssertionFilterManager">
            <summary>
            Gets the assertion filter manager
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponentServices.ExplorationMetricManager">
            <summary>
            Gets the exploration metric manager
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.ComponentModel.IPexPathComponent">
            <summary>
            Pex path component
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexPathComponent.PathServices">
            <summary>
            Gets the path services.
            </summary>
            <value>The path services.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.ComponentModel.IPexPathComponentElement">
            <summary>
            Pex path component element
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexPathComponentElement.Host">
            <summary>
            Gets the host.
            </summary>
            <value>The host.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.ComponentModel.IPexPathComponentServices">
            <summary>
            Services available in Pex for the execution of a single path
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexPathComponentServices.Solution">
            <summary>
            Gets the solution.
            </summary>
            <value>The solution.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexPathComponentServices.OracleChoiceBuilder">
            <summary>
            Gets the oracle choice builder.
            </summary>
            <value>The oracle choice builder.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexPathComponentServices.UnsafeMemoryBuilder">
            <summary>
            Gets the unsafe memory builder.
            </summary>
            <value>The unsafe memory builder.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexPathComponentServices.OracleProvider">
            <summary>
            Gets the oracle provider.
            </summary>
            <value>The oracle provider.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexPathComponentServices.Driver">
            <summary>
            Gets the driver.
            </summary>
            <value>The driver.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexPathComponentServices.TrackingEngineFactory">
            <summary>
            Gets the tracking engine factory.
            </summary>
            <value>The tracking engine factory.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexPathComponentServices.InjectionLogger">
            <summary>
            Gets the injection logger.
            </summary>
            <value>The injection logger.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexPathComponentServices.MethodInvocationRequestSequenceProvider">
            <summary>
            Gets the method invocation requests provider.
            </summary>
            <value>The method invocation requests provider.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexPathComponentServices.PreparableManager">
            <summary>
            Gets the path preprable manager
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexPathComponentServices.CurrentExecutionNodeProvider">
            <summary>
            Gets the current execution node provider.
            </summary>
            <value>The current execution node provider</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexPathComponentServices.ComprehensionBuilder">
            <summary>
            Gets the comprehension builder.
            </summary>
            <value>The comprehension builder</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexPathComponentServices.InvariantBuilder">
            <summary>
            Gets the pex invariant builder.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexPathComponentServices.DisposableContextManager">
            <summary>
            Gets the disposable context manager
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexPathComponentServices.GeneratedTestSettings">
            <summary>
            Gets the generated test settings
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexPathComponentServices.PathMetricManager">
            <summary>
            Gets the path metric manager
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.IPexPathComponentServices.PostAnalysisManager">
            <summary>
            Gets the post analysis manager
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.ComponentModel.IPexValidatable">
            <summary>
            Any validatable component
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.ComponentModel.IPexValidatable.Validate(Microsoft.Pex.Engine.Logging.IPexLog,Microsoft.ExtendedReflection.Metadata.ICustomAttributeProviderEx,Microsoft.ExtendedReflection.Metadata.VisibilityContext)">
            <summary>
            Validates the decorator instance
            </summary>
            <param name="log"></param>
            <param name="target"></param>
            <param name="testVisibility"></param>
        </member>
        <member name="T:Microsoft.Pex.Engine.ComponentModel.PexComponentElementBase">
            <summary>
            Base class of Pex component elements
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.ComponentModel.PexComponentElementBase.#ctor(Microsoft.Pex.Engine.ComponentModel.IPexComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.ComponentModel.PexComponentElementBase"/> class.
            </summary>
            <param name="host">The host.</param>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexComponentElementBase.Host">
            <summary>
            Gets the host.
            </summary>
            <value>The host.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.ComponentModel.PexComponentServices">
            <summary>
            Default implementation of <see cref="T:Microsoft.Pex.Engine.ComponentModel.IPexComponentServices"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.ComponentModel.PexComponentServices.#ctor(Microsoft.Pex.Engine.ComponentModel.IPexComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.ComponentModel.PexComponentServices"/> class.
            </summary>
            <param name="host">The host.</param>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexComponentServices.Options">
            <summary>
            Gets the options service
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexComponentServices.ExplorationsManager">
            <summary>
            Gets the explorations manager.
            </summary>
            <value>The explorations manager.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexComponentServices.CurrentAssembly">
            <summary>
            Gets the current assembly.
            </summary>
            <value>The current assembly.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexComponentServices.PackageManager">
            <summary>
            Gets the package manager.
            </summary>
            <value>The package manager.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexComponentServices.FilterManager">
            <summary>
            Gets the filter manager.
            </summary>
            <value>The filter manager.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexComponentServices.TestManager">
            <summary>
            Gets the test manager.
            </summary>
            <value>The test manager.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexComponentServices.FixItManager">
            <summary>
            Gets the fix-it manager.
            </summary>
            <value>The fix-it manager.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexComponentServices.CoverageManager">
            <summary>
            Gets the coverage manager.
            </summary>
            <value>The coverage manager.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexComponentServices.ReportManager">
            <summary>
            Gets the report manager.
            </summary>
            <value>The report manager.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexComponentServices.ExplorationStrategyFactory">
            <summary>
            Gets the exploration strategy factory.
            </summary>
            <value>The exploration strategy factory.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexComponentServices.EffectsManager">
            <summary>
            Gets the effects manager.
            </summary>
            <value>The effects manager.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexComponentServices.TestHasher">
            <summary>
            Gets the test hasher.
            </summary>
            <value>The test hasher.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexComponentServices.LogManager">
            <summary>
            Gets the log manager.
            </summary>
            <value>The log manager.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexComponentServices.MixManager">
            <summary>
            Gets the mix manager.
            </summary>
            <value>The mix manager.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexComponentServices.TestFrameworkManager">
            <summary>
            Gets the test framework manager.
            </summary>
            <value>The test framework manager.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexComponentServices.Driver">
            <summary>
            Gets the driver.
            </summary>
            <value>The driver.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexComponentServices.ExplorableGuesserManager">
            <summary>
            Gets the explorable guesser manager.
            </summary>
            <value>The explorable guesser manager.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexComponentServices.ExplorableCacheManager">
            <summary>
            Gets the explorable cache manager.
            </summary>
            <value>The explorable cache manager.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexComponentServices.ReflectorManager">
            <summary>
            Gets the reflector manager.
            </summary>
            <value>The reflector manager.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexComponentServices.ProgressManager">
            <summary>
            Gets the progress manager.
            </summary>
            <value>The progress manager.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexComponentServices.StubDelegateManager">
            <summary>
            Gets the stubs delegate manager
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexComponentServices.MolesMetadataManager">
            <summary>
            Gets the moles metadata manager.
            </summary>
            <value>The moles metadata manager.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexComponentServices.TestPrioritizationManager">
            <summary>
            Gets the moles metadata manager.
            </summary>
            <value>The moles metadata manager.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexComponentServices.TestFrameworkDriver">
            <summary>
            Gets the test framework driver
            </summary>
            <value>The Test Framework driver.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexComponentServices.MetricManager">
            <summary>
            Gets the metric manager
            </summary>
            <value>The metric manager.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexComponentServices.FixtureMetricManager">
            <summary>
            Gets the fixture metric manager
            </summary>
            <value>The metric manager.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.ComponentModel.PexExplorationComponentBase">
            <summary>
            Base class of Pex exploration components
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.ComponentModel.PexComponentBase">
            <summary>
            Base class of Pex components
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.ComponentModel.PexComponentBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.ComponentModel.PexComponentBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.ComponentModel.PexComponentBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexComponentBase.Log">
            <summary>
            Gets the log.
            </summary>
            <value>The log.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexComponentBase.Services">
            <summary>
            Gets common services available to all components.
            </summary>
            <value>The pex services.</value>
        </member>
        <member name="M:Microsoft.Pex.Engine.ComponentModel.PexExplorationComponentBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.ComponentModel.PexExplorationComponentBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.ComponentModel.PexExplorationComponentBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexExplorationComponentBase.ExplorationServices">
            <summary>
            Gets the exploration services.
            </summary>
            <value>The exploration services.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.ComponentModel.PexExplorationComponentElementBase">
            <summary>
            Base class of a Pex exploration component element
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.ComponentModel.PexExplorationComponentElementBase.#ctor(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.ComponentModel.PexExplorationComponentElementBase"/> class.
            </summary>
            <param name="host">The host.</param>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexExplorationComponentElementBase.Host">
            <summary>
            Gets the host.
            </summary>
            <value>The host.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexExplorationComponentServices.InputEnumeratorManager">
            <summary>
            Gets the input enumerator manager.
            </summary>
            <value>The input enumerator manager.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexExplorationComponentServices.SearchFrontierManager">
            <summary>
            Gets the search frontier factory.
            </summary>
            <value>The search frontier factory.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexExplorationComponentServices.WeightProvider">
            <summary>
            Gets the optional default weight provider for prioritized frontiers.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexExplorationComponentServices.CreatableFactoryManager">
            <summary>
            Gets the creatable factory manager.
            </summary>
            <value>The creatable factory manager.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexExplorationComponentServices.RuntimeContextManager">
            <summary>
            Gets the runtime context manager
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexExplorationComponentServices.AssertionFilterManager">
            <summary>
            Gets the assertion filter manager
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexExplorationComponentServices.ExplorationMetricManager">
            <summary>
            Gets the exploration metric manager
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.ComponentModel.PexPathComponentBase">
            <summary>
            Base class of Pex path components
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.ComponentModel.PexPathComponentBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.ComponentModel.PexPathComponentBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.ComponentModel.PexPathComponentBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexPathComponentBase.PathServices">
            <summary>
            Gets the path services.
            </summary>
            <value>The path services.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.ComponentModel.PexPathComponentElementBase">
            <summary>
            Base class of Pex path component elements
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.ComponentModel.PexPathComponentElementBase.#ctor(Microsoft.Pex.Engine.ComponentModel.IPexPathComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.ComponentModel.PexPathComponentElementBase"/> class.
            </summary>
            <param name="host">The host.</param>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexPathComponentElementBase.Host">
            <summary>
            Gets the host.
            </summary>
            <value>The host.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.ComponentModel.PexPathComponentServices">
            <summary>
            Services available in Pex during the tracing an execution path.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.ComponentModel.PexPathComponentServices.#ctor(Microsoft.Pex.Engine.ComponentModel.IPexPathComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.ComponentModel.PexPathComponentServices"/> class.
            </summary>
            <param name="host">The host.</param>
        </member>
        <member name="F:Microsoft.Pex.Engine.ComponentModel.PexPathComponentServices._generatedTestSettings">
            <summary>
            Gets the generated test settings
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexPathComponentServices.Solution">
            <summary>
            Gets the solution.
            </summary>
            <value>The solution.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexPathComponentServices.OracleChoiceBuilder">
            <summary>
            Gets the oracle choice builder.
            </summary>
            <value>The oracle choice builder.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexPathComponentServices.UnsafeMemoryBuilder">
            <summary>
            Gets the unsafe memory builder.
            </summary>
            <value>The unsafe memory builder.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexPathComponentServices.OracleProvider">
            <summary>
            Gets the oracle provider.
            </summary>
            <value>The oracle provider.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexPathComponentServices.Driver">
            <summary>
            Gets the driver.
            </summary>
            <value>The driver.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexPathComponentServices.TrackingEngineFactory">
            <summary>
            Gets the tracking engine factory.
            </summary>
            <value>The tracking engine factory.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexPathComponentServices.InjectionLogger">
            <summary>
            Gets the injection logger.
            </summary>
            <value>The injection logger.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexPathComponentServices.MethodInvocationRequestSequenceProvider">
            <summary>
            Gets the method invocation requests provider.
            </summary>
            <value>The method invocation requests provider.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexPathComponentServices.PreparableManager">
            <summary>
            Gest the path preparable manager
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexPathComponentServices.CurrentExecutionNodeProvider">
            <summary>
            Gets the current execution node provider.
            </summary>
            <value>The current execution node provider</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexPathComponentServices.ComprehensionBuilder">
            <summary>
            Gets the comprehension builder.
            </summary>
            <value>The comprehension builder</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexPathComponentServices.InvariantBuilder">
            <summary>
            Gets the pex invariant builder.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexPathComponentServices.DisposableContextManager">
            <summary>
            Gets the disposable context manager
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexPathComponentServices.GeneratedTestSettings">
            <summary>
            Gets the generated test settings service
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexPathComponentServices.PathMetricManager">
            <summary>
            Gets the path metric manager
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.ComponentModel.PexPathComponentServices.PostAnalysisManager">
            <summary>
            Gets the post analysis manager
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Comprehensions.IPexComprehensionBuilder">
            <summary>
            Pex comprehension builder
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Comprehensions.IPexComprehensionBuilder.GetRootId">
            <summary>
            Gets the root id.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Comprehensions.IPexComprehensionBuilder.GetWrappedExplorationResult``1(System.Int32)">
            <summary>
            Gets the wrapped exploration result.
            </summary>
            <typeparam name="TData">The type of the data.</typeparam>
            <param name="rootId">The root id.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Comprehensions.IPexComprehensionBuilder.GetWrappedExplorationLogicalResult(System.Int32,System.Object@,System.Object@)">
            <summary>
            Gets the wrapped exploration logical result.
            </summary>
            <param name="rootId">The root id.</param>
            <param name="negativeCondition">The negative condition.</param>
            <param name="positiveCondition">The positive condition.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Comprehensions.IPexComprehensionBuilder.StartExplorePath(System.Int32)">
            <summary>
            Starts to explore a path.
            </summary>
            <param name="rootId">The root id.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Comprehensions.IPexComprehensionBuilder.EndExplorePath(System.Object)">
            <summary>
            Ends to explore a path.
            </summary>
            <param name="wrappedData">The wrapped data.</param>
        </member>
        <member name="T:Microsoft.Pex.Engine.Comprehensions.IPexComprehensionManager">
            <summary>
            Pex comprehension manager
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Comprehensions.IPexComprehensionManager.IsExplorationRootNode(Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode)">
            <summary>
            Determines whether the given node is an exploration root node.
            </summary>
            <param name="executionNode">The execution node.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Comprehensions.IPexComprehensionManager.IsExplorationHasResultNode(Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode)">
            <summary>
            Determines whether result information is attached to the given node.
            </summary>
            <param name="executionNode"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.Coverage.BranchTags.PexConstraintSolverTimeoutTag">
            <summary>
            A branch tag that counts constraint solver timeouts
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Coverage.BranchTags.PexConstraintSolverTimeoutTag.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.Coverage.BranchTags.PexConstraintSolverTimeoutTag"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Coverage.BranchTags.PexConstraintSolverTimeoutTag.TryCombine(Microsoft.ExtendedReflection.Coverage.BranchTags.IBranchTag,Microsoft.ExtendedReflection.Coverage.BranchTags.IBranchTag@)">
            <summary>
            Combines this tag with the specified other tag.
            </summary>
            <param name="otherTag">The other tag.</param>
            <param name="combinedTag">the combined tag</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Coverage.BranchTags.PexConstraintSolverTimeoutTag.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.Coverage.BranchTags.PexImprecisionBranchTag">
            <summary>
            A branch tag that counts imprecisions
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Coverage.BranchTags.PexImprecisionBranchTag.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.Coverage.BranchTags.PexImprecisionBranchTag"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Coverage.BranchTags.PexImprecisionBranchTag.TryCombine(Microsoft.ExtendedReflection.Coverage.BranchTags.IBranchTag,Microsoft.ExtendedReflection.Coverage.BranchTags.IBranchTag@)">
            <summary>
            Combines this tag with the specified other tag.
            </summary>
            <param name="otherTag">The other tag.</param>
            <param name="combinedTag">the combined tag</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Coverage.BranchTags.PexImprecisionBranchTag.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.Coverage.BranchTags.PexUninstrumentedCallBranchTag">
            <summary>
            Branch tag indicating an uninstrumented call
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Coverage.BranchTags.PexUninstrumentedCallBranchTag.Method">
            <summary>
            The method
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Coverage.BranchTags.PexUninstrumentedCallBranchTag.#ctor(Microsoft.ExtendedReflection.Metadata.MethodDefinition)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.Coverage.BranchTags.PexUninstrumentedCallBranchTag"/> class.
            </summary>
            <param name="method">The method.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Coverage.BranchTags.PexUninstrumentedCallBranchTag.TryCombine(Microsoft.ExtendedReflection.Coverage.BranchTags.IBranchTag,Microsoft.ExtendedReflection.Coverage.BranchTags.IBranchTag@)">
            <summary>
            Combines the instance with the other tag.
            </summary>
            <param name="otherTag">The other tag.</param>
            <param name="combinedTag">the combined tag</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Coverage.BranchTags.PexUninstrumentedCallBranchTag.TryClearNonMonotonic(Microsoft.ExtendedReflection.Coverage.BranchTags.IBranchTag@)">
            <summary>
            Tries to clear branch tags that are not monotonic.
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Coverage.BranchTags.PexUninstrumentedCallBranchTag.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Coverage.BranchTags.PexUninstrumentedCallBranchTag.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Coverage.BranchTags.PexUninstrumentedCallBranchTag.Equals(Microsoft.ExtendedReflection.Coverage.BranchTags.IBranchTag)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Coverage.BranchTags.PexUninstrumentedCallBranchTag.GetHashCode">
            <summary>
            Gets the hashcode
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Coverage.BranchTags.PexUninstrumentedCallBranchTag.Internalize">
            <summary>
            Internalizes this instance
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.Coverage.BranchTags.PexUninstrumentedCallBranchTag.Monotonic">
            <summary>
            Gets the monotonicity of this tag.
            </summary>
            <value>True if monotonic, false otherwise.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.Coverage.IPexExplorationCoverageManager">
            <summary>
            A manager that collects coverage information per exploration
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Coverage.IPexExplorationCoverageManager.TryGetExplorationCoverage(Microsoft.Pex.Engine.PexExplorationBase,Microsoft.ExtendedReflection.Coverage.CoverageEntry@)">
            <summary>
            Tries to get the exploration coverage entry.
            </summary>
            <param name="exploration">The exploration.</param>
            <param name="coverageEntry">The coverageEntry.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Coverage.IPexExplorationCoverageManager.TryGetExplorationCoverageBuilder(Microsoft.ExtendedReflection.Coverage.TaggedBranchCoverageBuilder{Microsoft.Pex.Engine.PexGeneratedTestName}@)">
            <summary>
            Tries to get the exploration coverage builder.
            </summary>
            <param name="coverageBuilder">The coverage builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Coverage.IPexExplorationCoverageManager.PrepareExplorationCoverage(Microsoft.ExtendedReflection.Coverage.TaggedBranchCoverageBuilder{Microsoft.Pex.Engine.PexGeneratedTestName})">
            <summary>
            Prepares the exploration coverage for publishing.
            </summary>
            <param name="coverageBuilder">The coverage builder.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Coverage.IPexExplorationCoverageManager.PublishExplorationCoverage(Microsoft.Pex.Engine.PexExplorationResultObserver)">
            <summary>
            Publishes the exploration coverage.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="E:Microsoft.Pex.Engine.Coverage.IPexExplorationCoverageManager.BeforePublishExplorationCoverage">
            <summary>
            Raised before the manager publishes the exploration coverage
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Creatable.PexCreatableByMethodAndSettersBase">
            <summary>
            Abstract base class for instantiated <see cref="T:Microsoft.Pex.Engine.Creatable.IPexCreatable"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Creatable.IPexCreatable">
            <summary>
            Information about a creatable type
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Creatable.IPexCreatable.TryCreateValue(Microsoft.Pex.Engine.Creatable.IPexCreatableCreateValueContext)">
            <summary>
            Tries to create a value.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Creatable.IPexCreatable.TryCreateCode(Microsoft.Pex.Engine.Creatable.IPexCreatableCreateCodeContext)">
            <summary>
            Tries to create code.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Creatable.IPexCreatable.TryGetInvariant(Microsoft.ExtendedReflection.Interpretation.TermManager,System.Converter{Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term}@)">
            <summary>
            Tries to get an invariant for this creatable type.
            </summary>
            <param name="termManager">The term manager.</param>
            <param name="invariantBuilder">The invariant builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Creatable.IPexCreatable.IsFieldAcyclic(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Whether a field of this type (or one of its supertypes) 
            can only be initialized with references that were created before
            an instance of the given type is created.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.Creatable.IPexCreatable.CreatableType">
            <summary>
            Gets the creatable type.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.Creatable.IPexCreatable.Minimize">
            <summary>
            Whether to minimize the number of objects of this type.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Creatable.PexCreatableByMethodAndSettersBase.#ctor(Microsoft.Pex.Engine.ComponentModel.IPexComponent,Microsoft.ExtendedReflection.Metadata.TypeDefinition,Microsoft.ExtendedReflection.Metadata.TypeEx[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.Creatable.PexCreatableByMethodAndSettersBase"/> class.
            </summary>
            <param name="host">The host.</param>
            <param name="typeDefinition">The type definition.</param>
            <param name="genericTypeArguments">The generic type arguments.</param>
            <param name="maySetRemainingFieldsByReflection">if set to <c>true</c> [may set remaining fields by reflection].</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Creatable.PexCreatableByMethodAndSettersBase.IsFieldAcyclic(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Whether a field of this type (or one of its supertypes)
            can only be initialized with references that were created before
            an instance of the given type is created.
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Creatable.PexCreatableByMethodAndSettersBase.TryCreateValue(Microsoft.Pex.Engine.Creatable.IPexCreatableCreateValueContext)">
            <summary>
            Tries to create a value.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Creatable.PexCreatableByMethodAndSettersBase.TryCreateSomeValue(Microsoft.Pex.Engine.Creatable.IPexCreatableCreateValueContext,System.Object@,Microsoft.ExtendedReflection.Metadata.Field[]@)">
            <summary>
            Tries to create some value.
            </summary>
            <param name="context">The context.</param>
            <param name="result">The result.</param>
            <param name="remainingFields">The remaining fields.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Creatable.PexCreatableByMethodAndSettersBase.TryCreateSomeCode(Microsoft.Pex.Engine.Creatable.IPexCreatableCreateCodeContext,Microsoft.ExtendedReflection.Metadata.Field[]@,Microsoft.ExtendedReflection.Metadata.Interfaces.ILocal@)">
            <summary>
            Tries to create some code.
            </summary>
            <param name="context">The context.</param>
            <param name="remainingFields">The remaining fields.</param>
            <param name="receiver">The receiver.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Creatable.PexCreatableByMethodAndSettersBase.TryCreateCode(Microsoft.Pex.Engine.Creatable.IPexCreatableCreateCodeContext)">
            <summary>
            Tries to create the code expression.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Creatable.PexCreatableByMethodAndSettersBase.TryGetFactory(System.Reflection.MethodBase@,Microsoft.ExtendedReflection.Metadata.Field@,Microsoft.ExtendedReflection.Metadata.Field[]@,Microsoft.ExtendedReflection.Metadata.Field[]@)">
            <summary>
            Tries to get the factory method.
            </summary>
            <param name="factory">The factory.</param>
            <param name="factoryReceiver">The factory receiver.</param>
            <param name="factoryArguments">The factory arguments.</param>
            <param name="remainingFields">The remaining fields.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Creatable.PexCreatableByMethodAndSettersBase.TryGetBackingSetter(Microsoft.ExtendedReflection.Metadata.Field,System.Reflection.MethodInfo@)">
            <summary>
            Tries to get a backing setter.
            </summary>
            <param name="field">The field.</param>
            <param name="setter">The setter.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Creatable.PexCreatableByMethodAndSettersBase.TryGetInvariant(Microsoft.ExtendedReflection.Interpretation.TermManager,System.Converter{Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term}@)">
            <summary>
            Tries to get an invariant.
            </summary>
            <param name="termManager">The term manager.</param>
            <param name="invariantBuilder">The invariant builder.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.Creatable.PexCreatableByMethodAndSettersBase.Log">
            <summary>
            Gets the log.
            </summary>
            <value>The log.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Creatable.PexCreatableByMethodAndSettersBase.CreatableType">
            <summary>
            Gets the creatable type.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Creatable.PexCreatableByMethodAndSettersBase.Minimize">
            <summary>
            Whether to minimize the number of objects of this type.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Creatable.IPexCreatableFactory">
            <summary>
            Implements an heuristic to automatically generate a creatable
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Creatable.IPexCreatableFactory.TryCreateCreatable(Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.Pex.Engine.Creatable.IPexCreatable@)">
            <summary>
            Tries to compute a precise creatable for the given type
            </summary>
            <param name="creatableType">Type of the creatable.</param>
            <param name="creatable">The creatable.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.Creatable.IPexCreatableCreateCodeContext">
            <summary>
            Creatable code context
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Creatable.IPexCreatableCreateContext">
            <summary>
            Creatable context, representing the context in which a particular creatable value is created
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.Creatable.IPexCreatableCreateContext.VisibilityContext">
            <summary>
            The visibility context in which the value is created
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.Creatable.IPexCreatableCreateContext.This">
            <summary>
            The object reference or struct value being created;
            can be used to query properties in <see cref="P:Microsoft.Pex.Engine.Creatable.IPexCreatableCreateContext.InputModel"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.Creatable.IPexCreatableCreateContext.InputModel">
            <summary>
            The input model.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.Creatable.IPexCreatableCreateContext.MayUseReflectionForRemainingFields">
            <summary>
            Gets or sets a value indicating whether reflection may be used to set all remaining fields.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Creatable.IPexCreatableCreateCodeContext.CreateBuilder">
            <summary>
            Creates a local builder, which can eventually be published.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Creatable.IPexCreatableCreateCodeContext.Publish(Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder,Microsoft.ExtendedReflection.Metadata.Interfaces.ILocal)">
            <summary>
            Notification when result builder is completed.
            </summary>
            <param name="resultBuilder">The result builder.</param>
            <param name="_receiverLocal">The receiver local (may be null).</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Creatable.IPexCreatableCreateCodeContext.PushFieldValue(Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder,Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Pushes the value of a field.
            </summary>
            <param name="builder">The builder.</param>
            <param name="field">The field.</param>
        </member>
        <member name="P:Microsoft.Pex.Engine.Creatable.IPexCreatableCreateCodeContext.GlobalBuilder">
            <summary>
            Global context in which reused, auxiliary locals can be allocated. 
            Eventually, stack should not be changed.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Creatable.IPexCreatableCreateValueContext">
            <summary>
            Creatable value context
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Creatable.IPexCreatableCreateValueContext.GetFieldValue(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Gets the field value.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Creatable.IPexCreatableCreateValueContext.Publish(System.Object)">
            <summary>
            Publishes the specified result.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="T:Microsoft.Pex.Engine.Creatable.IPexCreatableDefinition">
            <summary>
            Information about a creatable type
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Creatable.IPexCreatableDefinition.TryInstantiate(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,Microsoft.ExtendedReflection.Metadata.TypeEx[],Microsoft.Pex.Engine.Creatable.IPexCreatable@)">
            <summary>
            Tries to instantiate this definition with the specified arguments.
            </summary>
            <param name="host">The host.</param>
            <param name="genericTypeArguments">The type arguments.</param>
            <param name="creatable">The creatable.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.Creatable.IPexCreatableDefinition.CreatableTypeDefinition">
            <summary>
            Gets the creatable type.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Creatable.IPexCreatableFactoryManager">
            <summary>
            A service that manages <see cref="T:Microsoft.Pex.Engine.Creatable.IPexCreatableFactory"/> 
            instances.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Creatable.IPexCreatableFactoryManager.AddCreatableFactory(Microsoft.Pex.Engine.Creatable.IPexCreatableFactory)">
            <summary>
            Adds an additional creatable factory
            </summary>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Creatable.IPexCreatableFactoryManager.TryCreateCreatable(Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.Pex.Engine.Creatable.IPexCreatable@)">
            <summary>
            Tries to create a precise creatable for the given type
            </summary>
            <param name="creatableType">Type of the creatable.</param>
            <param name="creatable">The creatable.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.Distributed.IPexEffectsManager">
            <summary>
            Pex effects manager
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Distributed.IPexEffectsManager.GetTypeEffects(Microsoft.ExtendedReflection.Metadata.TypeDefinition)">
            <summary>
            Gets the effects of members of the given type.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.Distributed.IPexEffectsManager.IsEnabled">
            <summary>
            Gets a value indicating whether effect tracking is enabled.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Distributed.IPexTypeEffects">
            <summary>
            Effects of members of a type
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Distributed.IPexTypeEffects.GetCallees(Microsoft.ExtendedReflection.Metadata.MethodDefinition)">
            <summary>
            Gets all callees or the given caller.
            </summary>
            <param name="caller">The caller.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Distributed.IPexTypeEffects.AddCallee(Microsoft.ExtendedReflection.Metadata.MethodDefinition,Microsoft.ExtendedReflection.Metadata.MethodDefinition)">
            <summary>
            Adds a caller/callee relationship.
            </summary>
            <param name="caller">The caller.</param>
            <param name="callee">The callee.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Distributed.IPexTypeEffects.GetWriters(Microsoft.ExtendedReflection.Metadata.FieldDefinition)">
            <summary>
            Gets all known writers of the given field.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Distributed.IPexTypeEffects.AddWriter(Microsoft.ExtendedReflection.Metadata.FieldDefinition,Microsoft.ExtendedReflection.Metadata.MethodDefinition)">
            <summary>
            Marks a method as a write of the given field.
            </summary>
            <param name="field">The field.</param>
            <param name="method">The method.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Distributed.IPexTypeEffects.GetBranchingFields(Microsoft.ExtendedReflection.Metadata.MethodDefinition)">
            <summary>
            Gets all branching fields of the given method.
            </summary>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Distributed.IPexTypeEffects.AddBranchingField(Microsoft.ExtendedReflection.Metadata.MethodDefinition,Microsoft.ExtendedReflection.Metadata.FieldDefinition)">
            <summary>
            Marks that a method branches over a given field.
            </summary>
            <param name="method">The method.</param>
            <param name="field">The field.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Distributed.IPexTypeEffects.GetCreators">
            <summary>
            Gets all known creators of this type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Distributed.IPexTypeEffects.AddCreator(Microsoft.ExtendedReflection.Metadata.MethodDefinition)">
            <summary>
            Adds a creator of this type, i.e. method that can return an instance of this type.
            </summary>
            <param name="method">The method.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Distributed.IPexTypeEffects.IsImpure(Microsoft.ExtendedReflection.Metadata.MethodDefinition)">
            <summary>
            Determines whether the specified method is impure.
            </summary>
            <param name="method">The method.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Distributed.IPexTypeEffects.SetImpure(Microsoft.ExtendedReflection.Metadata.MethodDefinition)">
            <summary>
            Marks a method as impure.
            </summary>
            <param name="method">The method.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Distributed.IPexTypeEffects.AddRemark(System.String,System.String)">
            <summary>
            Adds a remark.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Microsoft.Pex.Engine.Distributed.IPexTypeEffects.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.Domains.IPexDomainManager">
            <summary>
            A mutable domain provider
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Domains.IPexDomainManager.AddTypeHintProvider(Microsoft.Pex.Engine.Domains.IPexTypeHintProvider)">
            <summary>
            Adds a lazy provider of type hints
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Domains.IPexDomainManager.AddTypeForMatchingProvider(Microsoft.Pex.Engine.Domains.IPexTypeForMatchingProvider)">
            <summary>
            Adds a lazy provider of type for matching
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Domains.IPexDomainManager.AddTypesForMatching(System.Collections.Generic.IEnumerable{Microsoft.ExtendedReflection.Metadata.TypeEx})">
            <summary>
            Adds the matching types.
            </summary>
            <param name="types">The types.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Domains.IPexDomainManager.AddTypesForHints(System.Collections.Generic.IEnumerable{Microsoft.ExtendedReflection.Metadata.TypeDefinition},System.Boolean)">
            <summary>
            Adds type defintions to be used as hints
            </summary>
            <param name="types"></param>
            <param name="hintModule">
            a value specifying whether the types from the declaring
            modules of the hinted types maybe be mined as well
            </param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Domains.IPexDomainManager.Add(Microsoft.Pex.Engine.Domains.IPexDomainProvider)">
            <summary>
            Adds the specified provider.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Domains.IPexDomainManager.TryGetExplorableObject(Microsoft.Pex.Engine.Search.IObjectExplorationSequenceId,Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Tries to obtain an object of an explorable type with a particular index.
            </summary>
            <param name="sequenceId"></param>
            <param name="term"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.Domains.PexDomainProviderCollection">
            <summary>
            Collection of domain providers
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Domains.IPexDomainProvider">
            <summary>
            Domain provider
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Domains.IPexDomainProvider.AddDomains(Microsoft.ExtendedReflection.Collections.SafeList{Microsoft.Pex.Engine.Domains.IPexDomain},Microsoft.Pex.Framework.Domains.PexDomainTarget,Microsoft.ExtendedReflection.Metadata.MetadataEntity,System.Int32)">
            <summary>
            Adds a list of domains.
            </summary>
            <param name="list">The list.</param>
            <param name="target">The target.</param>
            <param name="targetInfo">The target info.</param>
            <param name="targetIndex">Index of the target.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Domains.PexDomainProviderCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.Domains.PexDomainProviderCollection"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Domains.PexDomainProviderCollection.AddDomains(Microsoft.ExtendedReflection.Collections.SafeList{Microsoft.Pex.Engine.Domains.IPexDomain},Microsoft.Pex.Framework.Domains.PexDomainTarget,Microsoft.ExtendedReflection.Metadata.MetadataEntity,System.Int32)">
            <summary>
            Adds a list of domains.
            </summary>
            <param name="list">The list.</param>
            <param name="target">The target.</param>
            <param name="targetInfo">The target info.</param>
            <param name="targetIndex">Index of the target.</param>
        </member>
        <member name="T:Microsoft.Pex.Engine.Domains.PexLiveDomainProvider">
            <summary>
            Live domain provider
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Domains.PexLiveDomainProvider.#ctor(Microsoft.Pex.Engine.ComponentModel.IPexComponent,Microsoft.ExtendedReflection.Metadata.VisibilityContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.Domains.PexLiveDomainProvider"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Domains.PexLiveDomainProvider.AddFallback(Microsoft.Pex.Engine.Domains.IPexDomainProvider)">
            <summary>
            Adds a fallback provider.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Domains.PexLiveDomainProvider.AddDomains(Microsoft.ExtendedReflection.Collections.SafeList{Microsoft.Pex.Engine.Domains.IPexDomain},Microsoft.Pex.Framework.Domains.PexDomainTarget,Microsoft.ExtendedReflection.Metadata.MetadataEntity,System.Int32)">
            <summary>
            Adds a list of domains.
            </summary>
            <param name="list">The list.</param>
            <param name="target">The target.</param>
            <param name="targetInfo">The target info.</param>
            <param name="targetIndex">Index of the target.</param>
        </member>
        <member name="T:Microsoft.Pex.Engine.Drivers.IPexDriver">
            <summary>
            Pex driver
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Drivers.IPexDriver.GetReproCommandLines">
            <summary>
            Gets the repro command lines.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Drivers.IPexDriver.ExecuteExploration">
            <summary>
            Executes all explorations.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.Drivers.IPexDriver.ExitCode">
            <summary>
            Gets the exit code.
            </summary>
            <value>The exit code.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Drivers.IPexDriver.Success">
            <summary>
            Whether we can claim an overall success.
            </summary>
        </member>
        <member name="E:Microsoft.Pex.Engine.Drivers.IPexDriver.BeforeExecution">
            <summary>
            Raised before the execution starts
            </summary>
        </member>
        <member name="E:Microsoft.Pex.Engine.Drivers.IPexDriver.AfterExecution">
            <summary>
            Raised after the execution finishes
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Drivers.IPexExplorationDriver">
            <summary>
            Exploration driver
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Drivers.IPexExplorationDriver.Explore">
            <summary>
            Explores this instance.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.Drivers.IPexExplorationDriver.Runs">
            <summary>
            Gets the number of runs performed so far
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.Drivers.IPexExplorationDriver.LogImprecisions">
            <summary>
            Whether to log imprecisions.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.Drivers.IPexExplorationDriver.DisablePostAnalysis">
            <summary>
            Whether to disable the post analysis.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.Drivers.IPexExplorationDriver.LogObservedCallMismatches">
            <summary>
            Whether to log observed call mismatches.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.Drivers.IPexExplorationDriver.TotalCoverageBuilder">
            <summary>
            Gets the total coverage builder
            </summary>
        </member>
        <member name="E:Microsoft.Pex.Engine.Drivers.IPexExplorationDriver.BeforePath">
            <summary>
            Raised before executing the path, after the packages
            </summary>
        </member>
        <member name="E:Microsoft.Pex.Engine.Drivers.IPexExplorationDriver.AfterPath">
            <summary>
            Raised after executing the path, before the packages
            </summary>
        </member>
        <member name="E:Microsoft.Pex.Engine.Drivers.IPexExplorationDriver.BeforeExploration">
            <summary>
            Raised before the exploration starts
            </summary>
        </member>
        <member name="E:Microsoft.Pex.Engine.Drivers.IPexExplorationDriver.AfterExploration">
            <summary>
            Raised after the exploration finishes
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Drivers.IPexTrackingDriver">
            <summary>
            Tracking driver
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Drivers.IPexTrackingDriver.Run">
            <summary>
            Runs this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.ComponentModel.IPexExplorationEngine">
            <summary>
            Exploration engine
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Engines.IPexEngine">
            <summary>
            Pex engine
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.Engines.IPexEngine.Log">
            <summary>
            Gets the log.
            </summary>
            <value>The log.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.Engines.IPexPathEngine">
            <summary>
            Pex Path Engine
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Exceptions.IPexAssumptionExceptionValidator">
            <summary>
            Validates exceptions as assumtions
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Exceptions.IPexAssumptionExceptionValidator.IsAssumption(System.Exception)">
            <summary>
            Determines whether the specified ex is an assumption.
            </summary>
            <param name="ex">The ex.</param>
            <returns>
            	<c>true</c> if the specified ex is assumption; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.ExecutionNodes.IPexCurrentExecutionNodeProvider">
            <summary>
            Provider of current execution node
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.ExecutionNodes.IPexCurrentExecutionNodeProvider.Current">
            <summary>
            Gets the current execution node.
            </summary>
            <value>The current.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.ExecutionNodes.IPexCurrentExecutionNodeProvider.ReversedNodes">
            <summary>
            Gives list of all nodes visited during this path, starting from the end.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.ExecutionNodes.IPexExecutionGraphBuilder">
            <summary>
            Builder of execution-graphs (trees or dags or whatever)
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.ExecutionNodes.IPexExecutionGraphBuilder.Start(Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionSignature)">
            <summary>
            Starts to build a subgraph for a given execution signature.
            </summary>
            <param name="signature">represents sequence of method calls</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.ExecutionNodes.IPexExecutionGraphBuilder.AddInvariant(Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionSignature,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Attach invariant to a signature.
            </summary>
            <param name="signature"></param>
            <param name="condition"></param>
        </member>
        <member name="M:Microsoft.Pex.Engine.ExecutionNodes.IPexExecutionGraphBuilder.AttachAdditionalRootSymbol(Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionSignature,System.Int32,Microsoft.ExtendedReflection.Interpretation.ISymbolIdWithType)">
            <summary>
            Attaches the additional root symbol.
            </summary>
            <param name="signature">The signature.</param>
            <param name="time">The time.</param>
            <param name="symbolId">The symbol id.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.ExecutionNodes.IPexExecutionGraphBuilder.CreatePathEngineComponents(Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionSignature)">
            <summary>
            When a path engine is created, the graph builders may attach components that monitor the path
            </summary>
            <remarks>
            IPathConditionBuilder, IPexInvariantBuilder, IPexChoiceBuilder, IPathSegmentCallbacks
            </remarks>
        </member>
        <member name="M:Microsoft.Pex.Engine.ExecutionNodes.IPexExecutionGraphBuilder.EndPath(Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode,Microsoft.ExtendedReflection.Interpretation.Interpreter.PathConditionBuilder)">
            <summary>
            Finishes building a path.
            </summary>
            <param name="parentOfTarget">The parent of target.</param>
            <param name="pathConditionBuilder">The path condition builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.ExecutionNodes.IPexExecutionGraphBuilder.RegisterNodeAttachedData(Microsoft.Pex.Engine.ExecutionNodes.IPexExecutionNodeAttachedDataDescriptor)">
            <summary>
            Creates an identifier for data attached to nodes.
            </summary>
            <param name="descriptor">name</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.ExecutionNodes.IPexExecutionGraphBuilder.DumpStatistics(Microsoft.ExtendedReflection.Logging.DumpTreeWriter)">
            <summary>
            Dumps the statistics.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.ExecutionNodes.IPexExecutionGraphBuilder.GetNode(System.Int32)">
            <summary>
            Retrieves an execution node by its unique index
            </summary>
            <param name="uniqueIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.ExecutionNodes.IPexExecutionGraphBuilder.BumpNode(Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode)">
            <summary>
            Bumps a node given by its unique index.
            </summary>
            <param name="executionNode"></param>
        </member>
        <member name="P:Microsoft.Pex.Engine.ExecutionNodes.IPexExecutionGraphBuilder.Observer">
            <summary>
            Observer pattern. There is a observer (e.g., Frontier) who needs to notified when certain events 
            (e.g., addition of nodes) occur in the execution-graph. 
            So the observer registers itself with the graph-builder, so that observer is notified 
            of events related to modification of the execution-graph
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.ExecutionNodes.IPexExecutionGraphBuilder.NodesCount">
            <summary>
            Gets the number of nodes.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.ExecutionNodes.IPexExecutionGraphBuilderFactory">
            <summary>
            Execution graph builder factory
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.ExecutionNodes.IPexExecutionGraphBuilderFactory.CreateExecutionGraphBuilder">
            <summary>
            Creates an execution graph builder.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.ExecutionNodes.IPexExecutionNodeAttachedDataDescriptor">
            <summary>
            Descriptor of data attached to execution nodes
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.ExecutionNodes.IPexExecutionNodeAttachedDataDescriptor.CollectDeadTerms(System.Object,Microsoft.ExtendedReflection.Interpretation.ITermCollector)">
            <summary>
            Action when terms are garbage collected
            </summary>
            <param name="data"></param>
            <param name="collector"></param>
        </member>
        <member name="P:Microsoft.Pex.Engine.ExecutionNodes.IPexExecutionNodeAttachedDataDescriptor.Name">
            <summary>
            Name of attached data
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.ExecutionNodes.IPexExecutionPath">
            <summary>
            Pex execution path
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.ExecutionNodes.IPexExecutionPath.GetPathCondition">
            <summary>
            Retrieves the abstract path condition.
            </summary>
            <returns></returns>
            <remarks>
            This path might involve summaries.
            </remarks>
        </member>
        <member name="M:Microsoft.Pex.Engine.ExecutionNodes.IPexExecutionPath.AttachPathExecutionResult(Microsoft.Pex.Engine.PathExecution.PexPathExecutionResult)">
            <summary>
            For visualization only.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:Microsoft.Pex.Engine.ExecutionNodes.IPexExecutionPath.Abandon(Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode,Microsoft.Pex.Engine.Strategies.PexPathAbandoningReason)">
            <summary>
            Abandon the path, e.g. when execution diverges
            </summary>
            <param name="nodeToAbandon">The node to abandon.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.ExecutionNodes.IPexExecutionPath.Retry(Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode)">
            <summary>
            An invariant was added, which should be observed in a retry attempt
            </summary>
            <param name="nodeToRetry">The node to retry.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.ExecutionNodes.IPexExecutionPath.Accept(System.Boolean)">
            <summary>
            If neither Abandon nor Retry is called, Accept must be called. It simply marks the node as 'final'.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.ExecutionNodes.IPexExecutionPath.IsDuplicate">
            <summary>
            Whether we have seen this exact path before
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.ExecutionNodes.IPexInvariantBuilder">
            <summary>
            IInvariantBuilder
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.ExecutionNodes.IPexInvariantBuilder.AddInvariant(System.Boolean,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Adds an invariant path condition
            </summary>
            <remarks>
            Flipping an invariant path condition never leads to new execution paths.
            </remarks>
            <param name="sign">whether the positive form of the condition is to be added</param>
            <param name="term">value that has <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/></param>
            <returns>whether the invariant is new, i.e. has not been added before</returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.ExecutionNodes.IVisualExecutionGraph">
            <summary>
            Visual execution graph
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.ExecutionNodes.IVisualExecutionGraph.ExecutionRootNodes">
            <summary>
            Root nodes, from which all other nodes can be accessed
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.ExecutionNodes.IVisualExecutionNode">
            <summary>
            Visual execution node
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.ExecutionNodes.IVisualExecutionNode.AttachedPathExecutionResults">
            <summary>
            Gets the attached execution results.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.ExecutionNodes.IVisualExecutionNode.InLabel">
            <summary>
            Gets the label of a node.
            </summary>
            <remarks>
            The label is the condition under which this node can be reached.
            It may or may not be cumulative.
            </remarks>
        </member>
        <member name="T:Microsoft.Pex.Engine.Explorable.IPexExplorableCacheManager">
            <summary>
            The explorable cache manager is a global service
            that exist throughout the lifetime of Pex.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.IPexExplorableCacheManager.GetExplorableFromConstructorAndSetters(Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.Method},Microsoft.Pex.Engine.Explorable.PexExplorableSetter[])">
            <summary>
            Gets a (cached) explorable, that calls a constructor followed by setters
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.IPexExplorableCacheManager.GetExplorableFactoryName(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Gets the default name for an explorable factory method.
            </summary>
            <param name="explorableType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.IPexExplorableCacheManager.CreateExplorableFromConstructorAndSettersFactoryMethodBuilder(Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.Method},Microsoft.Pex.Engine.Explorable.PexExplorableSetter[])">
            <summary>
            Creates a (uncached) builder for the explorable factory method.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.Explorable.IPexExplorableGuesser">
            <summary>
            Implements an heuristic to automatically generate an explorable
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.IPexExplorableGuesser.GuessExplorables(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Tries to guess good explorables for the given type
            </summary>
            <param name="explorableType">Type of the explorable.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.Explorable.IPexExplorableGuesserManager">
            <summary>
            A service that manages <see cref="T:Microsoft.Pex.Engine.Explorable.IPexExplorableGuesser"/> 
            instances.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.IPexExplorableGuesserManager.AddExplorableGuesser(Microsoft.Pex.Engine.Explorable.IPexExplorableGuesser)">
            <summary>
            Adds an additional explorable guesser
            </summary>
            <param name="guesser"></param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.IPexExplorableGuesserManager.ClearGuess(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Clears the cached guess for a particular type if any
            </summary>
            <param name="explorableType"></param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.IPexExplorableGuesserManager.GuessExplorables(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Tries to guess good explorables for the given type
            </summary>
            <param name="explorableType">Type of the explorable.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.IPexExplorableGuesserManager.CreateThrowingFactoryUpdate(Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddMethodCodeUpdate@)">
            <summary>
            Gets a throwing factory update
            </summary>
            <param name="explorableType"></param>
            <param name="previewUpdate"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.Explorable.PexExplorableBase">
            <summary>
            Base class of explorable information
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Explorable.IPexExplorable">
            <summary>
            Defines a method that can be used to produce a fresh instance of a type.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.IPexExplorable.TryCreateCode(Microsoft.Pex.Engine.Explorable.IPexExplorableCreateCodeContext)">
            <summary>
            If no custom code expression can be created, the <see cref="P:Microsoft.Pex.Engine.Explorable.IPexExplorable.ExplorationMethod"/> will be used.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.Explorable.IPexExplorable.ExplorableType">
            <summary>
            Gets the explored type
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.Explorable.IPexExplorable.ExplorationMethod">
            <summary>
            Gets the method that creates the instance; the method may not be a constructor
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableBase.#ctor(Microsoft.Pex.Engine.ComponentModel.IPexComponent,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.Explorable.PexExplorableBase"/> class.
            </summary>
            <param name="host">The host.</param>
            <param name="explorableType">Type of the explorable.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableBase.TryCreateCode(Microsoft.Pex.Engine.Explorable.IPexExplorableCreateCodeContext)">
            <summary>
            If no custom code expression can be created, the <see cref="P:Microsoft.Pex.Engine.Explorable.PexExplorableBase.ExplorationMethod"/> will be used.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableBase.Equals(Microsoft.Pex.Engine.Explorable.IPexExplorable)">
            <summary>
            Gets a value indicating if two explorables are the same
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableBase.GetHashCode">
            <summary>
            Gets the hash code of this instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableBase.Equals(System.Object)">
            <summary>
            Gets a value indicating if two explorables are the same
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.Explorable.PexExplorableBase.ExplorableType">
            <summary>
            Gets the type to be created by exploration.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.Explorable.PexExplorableBase.ExplorationMethod">
            <summary>
            Gets the method which creates an instance of the desired type.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Explorable.PexExplorableCandidate">
            <summary>
            A candidate for an explorable type
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableCandidate.TryGetUpdate(Microsoft.ExtendedReflection.Feedback.CodeUpdate@)">
            <summary>
            Tries to get the update.
            </summary>
            <param name="update">The update.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableCandidate.#ctor(Microsoft.Pex.Engine.Explorable.IPexExplorable,System.Boolean,Microsoft.ExtendedReflection.Feedback.CodeUpdate)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.Explorable.PexExplorableCandidate"/> class.
            </summary>
            <param name="explorable">The explorable.</param>
            <param name="needsValidation">if the candidate needs validation from the user</param>
            <param name="update">The update.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableCandidate.Dump(Microsoft.ExtendedReflection.Logging.DumpTreeWriter,Microsoft.ExtendedReflection.Utilities.Factory{Microsoft.ExtendedReflection.Emit.ILanguage},Microsoft.ExtendedReflection.Metadata.VisibilityContext)">
            <summary>
            Dumps this instance.
            </summary>
            <param name="tree">The tree.</param>
            <param name="languageFactory">The language factory.</param>
            <param name="visibilityContext">The visibility context.</param>
        </member>
        <member name="P:Microsoft.Pex.Engine.Explorable.PexExplorableCandidate.Explorable">
            <summary>
            Gets the explorable.
            </summary>
            <value>The explorable.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Explorable.PexExplorableCandidate.NeedsValidation">
            <summary>
            Gets a value indicating if the guess should be notified to the user
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Explorable.PexExplorableFactory">
            <summary>
            Explorable factory
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableFactory.GetDynamicAssemblyName(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Gets the assembly name where the factory will be emitted
            </summary>
            <param name="explorableType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableFactory.GetDynamicAssemblyName(Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyReference)">
            <summary>
            Gets the assembly name that will contain the generated explorable factory
            for a given assembly
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableFactory.TryGetExplorableFactory(Microsoft.Pex.Engine.ComponentModel.IPexComponent,Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.Pex.Engine.Explorable.PexExplorableFactory@)">
            <summary>
            Tries to create a factory for the explorable type
            </summary>
            <param name="host"></param>
            <param name="explorableType"></param>
            <param name="factory"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableFactory.CreateThrowingFactoryUpdate(Microsoft.Pex.Engine.ComponentModel.IPexComponent,Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddMethodCodeUpdate@)">
            <summary>
            Creates a throwing explorable factory
            </summary>
            <param name="host"></param>
            <param name="explorableType"></param>
            <param name="previewUpdate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableFactory.#ctor(Microsoft.Pex.Engine.ComponentModel.IPexComponent,Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.ExtendedReflection.Metadata.VisibilityContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.Explorable.PexExplorableFactory"/> class.
            </summary>
            <param name="host">The host.</param>
            <param name="explorableType">Type of the explorable.</param>
            <param name="visibility"></param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableFactory.TryGetFactoryMethodSequence(Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.Method}@)">
            <summary>
            Tries to get the factory method sequence
            </summary>
            <param name="methodSequence">The method sequence.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableFactory.CreateExplorable">
            <summary>
            Creates the explorable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableFactory.TryCreateExplorableFactory(Microsoft.ExtendedReflection.Metadata.Builders.TypeDefinitionBuilder@,Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder@)">
            <summary>
            Tries to create an explorable factory.
            </summary>
            <param name="typeBuilder">The type builder.</param>
            <param name="factory">The factory.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableFactory.HasUnfavorableParameters(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Determines whether the method has unfavorable parameters, 
            which indicates that it should not be used as a factory method if it can be avoided.
            </summary>
            <param name="method">The method.</param>
            <returns>Whether the method has unfavorable parameters</returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableFactory.IsValidFactoryMethodSequence(Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.Method})">
            <summary>
            Determines whether the given factory sequence is valid.
            </summary>
            <param name="factorySequence"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableFactory.IsValidFactoryMethod(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Determines whether the given factory method is valid.
            </summary>
            <param name="factoryMethod">The factory method.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableFactory.TrySetFactoryMethod(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Tries to set a factory method.
            </summary>
            <param name="factoryMethod">The factory method.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableFactory.TrySetFactoryMethodSequence(Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.Method})">
            <summary>
            Tries to set a factory method sequence.
            </summary>
            <param name="factoryMethodSequence">The factory method sequence.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableFactory.IsValidFieldSetter(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Determines whether a field setter is valid.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableFactory.IsValidFieldSetterByReflection(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Determines whether a field setter is valid.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableFactory.TryAddFieldSetter(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Tries to add a field setter.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableFactory.TryAddFieldSetterByReflection(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Tries to add a field setter.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableFactory.IsValidPropertySetter(Microsoft.ExtendedReflection.Metadata.Property)">
            <summary>
            Determines whether the given property is a valid setter.
            </summary>
            <param name="property">The property.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableFactory.TryAddPropertySetter(Microsoft.ExtendedReflection.Metadata.Property)">
            <summary>
            Tries to add a property setter.
            </summary>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableFactory.IsValidMethodSetter(Microsoft.ExtendedReflection.Metadata.Method,System.Boolean)">
            <summary>
            Determines whether the given method is a valid setter method.
            </summary>
            <param name="method">The method.</param>
            <param name="mayBeSpecialName">whether the method may have a special name.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableFactory.TryAddMethodSetter(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Tries to add a setter method.
            </summary>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableFactory.RemoveSetter(Microsoft.Pex.Engine.Explorable.PexExplorableSetter)">
            <summary>
            Removes a setter.
            </summary>
            <param name="setter">The setter.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableFactory.CreateFactoryMethodAttribute(Microsoft.ExtendedReflection.Metadata.VisibilityContext,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Creates the [PexFactoryMethod(...)] attribute
            </summary>
            <param name="visibility"></param>
            <param name="explorableType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableFactory.CreateExplorableFactoryUpdate(Microsoft.ExtendedReflection.Feedback.CodeUpdate.AddMethodCodeUpdate@)">
            <summary>
            Creates an explorable factory code update.
            </summary>
            <param name="addMethodUpdate">The add method update.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.Explorable.PexExplorableFactory.Guess">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Microsoft.Pex.Engine.Explorable.PexExplorableFactory"/> is a guess.
            </summary>
            <value><c>true</c> if guess; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Explorable.PexExplorableFactory.Visibility">
            <summary>
            Gets the visibility context
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.Explorable.PexExplorableFactory.ExplorableType">
            <summary>
            Gets the type of the explorable.
            </summary>
            <value>The type of the explorable.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Explorable.PexExplorableFactory.Setters">
            <summary>
            Gets the setters.
            </summary>
            <value>The setters.</value>
        </member>
        <member name="E:Microsoft.Pex.Engine.Explorable.PexExplorableFactory.Changed">
            <summary>
            Occurs when this instance changes.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Explorable.PexExplorableFactory.Metadata">
            <summary>
            Metadata
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Explorable.PexExplorableFactory.Metadata.PexFactoryMethodAttributeCtors">
            <summary>
            Constructors of <see cref="F:Microsoft.Pex.Engine.Explorable.PexExplorableFactory.Metadata.PexFactoryMethodAttribute"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Explorable.PexExplorableFromMethod">
            <summary>
            Explorable from method
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableFromMethod.#ctor(Microsoft.Pex.Engine.ComponentModel.IPexComponent,Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.Explorable.PexExplorableFromMethod"/> class.
            </summary>
            <param name="host">The host.</param>
            <param name="explorableType">Type of the explorable.</param>
            <param name="explorationMethod">The exploration method.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableFromMethod.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.Explorable.PexExplorableFromMethod.ExplorationMethod">
            <summary>
            Gets the method which creates an instance of the desired type.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Pex.Engine.Explorable.PexExplorablePreviewer">
            <summary>
            Explorable previewer
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorablePreviewer.#ctor(Microsoft.ExtendedReflection.Metadata.VisibilityContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.Explorable.PexExplorablePreviewer"/> class.
            </summary>
            <param name="visibility">The visibility.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorablePreviewer.Preview(Microsoft.Pex.Engine.Explorable.IPexExplorable)">
            <summary>
            Renders a preview of the generated explorable code
            </summary>
            <param name="explorable"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorablePreviewer.EmitComments(Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder)">
            <summary>
            Emits comments.
            </summary>
            <param name="explorableType">Type of the explorable.</param>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorablePreviewer.Dump(Microsoft.ExtendedReflection.Logging.DumpTreeWriter,Microsoft.ExtendedReflection.Emit.ILanguage,Microsoft.ExtendedReflection.Metadata.VisibilityContext,Microsoft.Pex.Engine.Explorable.IPexExplorable)">
            <summary>
            Dumps this instance.
            </summary>
            <param name="tree">The tree.</param>
            <param name="language">The language.</param>
            <param name="visibilityContext">The visibility context.</param>
            <param name="explorable">The explorable.</param>
        </member>
        <member name="T:Microsoft.Pex.Engine.Explorable.IPexExplorableCreateCodeContext">
            <summary>
            Explorable code context
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.TestGeneration.IPexCodeCreationContext">
            <summary>
            Code creation context
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestGeneration.IPexCodeCreationContext.CreateBuilder">
            <summary>
            Creates a local builder, which can eventually be published.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestGeneration.IPexCodeCreationContext.VisibilityContext">
            <summary>
            The visibility context for which to create code
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestGeneration.IPexCodeCreationContext.NameCreator">
            <summary>
            Instance used to create new object names
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.IPexExplorableCreateCodeContext.TryGetResultLocal(Microsoft.ExtendedReflection.Metadata.Interfaces.ILocal@)">
            <summary>
            Tries to get the result local, that might have been already allocated 
            for the explorable instance.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.IPexExplorableCreateCodeContext.Publish(Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder,System.Boolean)">
            <summary>
            Notification when result builder is completed.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.IPexExplorableCreateCodeContext.PushArgument(Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder,System.Int32)">
            <summary>
            Index starts from zero and includes implicit 'this' argument, even for constructors
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.Explorable.IPexExplorableCreateCodeContext.GlobalBuilder">
            <summary>
            Global context in which reused, auxiliary locals can be allocated. 
            Eventually, stack should not be changed.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Explorable.PexExplorableSetter">
            <summary>
            Base class of explorable setters
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableSetter.Write(Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder,Microsoft.ExtendedReflection.Metadata.Interfaces.ILocal,Microsoft.Pex.Engine.Explorable.PexExplorableSetter.PushParameterAction)">
            <summary>
            Writes a call of this setter to the given method builder.
            </summary>
            <param name="builder">The builder.</param>
            <param name="target">the local that holds the target</param>
            <param name="parameterPusher">The parameter pusher.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableSetter.WriteSetter(Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder,Microsoft.Pex.Engine.Explorable.PexExplorableSetter.PushParameterAction)">
            <summary>
            Writes a call of this setter to the given method builder.
            </summary>
            <param name="builder">The builder.</param>
            <param name="parameterPusher">The parameter pusher.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableSetter.PushParameters(Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder,Microsoft.ExtendedReflection.Metadata.Parameter[],System.Int32,Microsoft.Pex.Engine.Explorable.PexExplorableSetter.PushParameterAction)">
            <summary>
            Pushes the parameters to the specified method builder.
            </summary>
            <param name="builder">The builder.</param>
            <param name="parameters">The parameters.</param>
            <param name="offset">The offset from which on the <paramref name="parameters"/> will be visited.</param>
            <param name="parameterPusher">The parameter pusher.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableSetter.GetShortDescription(Microsoft.ExtendedReflection.Utilities.Factory{Microsoft.ExtendedReflection.Emit.ILanguage})">
            <summary>
            Gets a slightly longer description (language specific if code is involved); usually used for tool-tips.
            </summary>
            <param name="languageFactory"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableSetter.TryWriteLongDescription(Microsoft.ExtendedReflection.Utilities.Factory{Microsoft.ExtendedReflection.Emit.ILanguage},System.IO.TextWriter)">
            <summary>
            Write a long description, possibly involving line breaks, to a text writer.
            </summary>
            <param name="languageFactory">The language factory.</param>
            <param name="writer">writer</param>
            <returns>whether anything was written</returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableSetter.Field(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Get the explorable setter for the specified field.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableSetter.FieldByReflection(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Get the explorable setter using reflection for the specified field.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableSetter.Property(Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.ExtendedReflection.Metadata.Property)">
            <summary>
            Gets the explorable setter for the specified property.
            </summary>
            <param name="explorableType">The explorable type.</param>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableSetter.Method(Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Gets the explorable setter for the specified method.
            </summary>
            <param name="explorableType">The explorable type.</param>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableSetter.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableSetter.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableSetter.op_Equality(Microsoft.Pex.Engine.Explorable.PexExplorableSetter,Microsoft.Pex.Engine.Explorable.PexExplorableSetter)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableSetter.op_Inequality(Microsoft.Pex.Engine.Explorable.PexExplorableSetter,Microsoft.Pex.Engine.Explorable.PexExplorableSetter)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.Explorable.PexExplorableSetter.Conditional">
            <summary>
            Gets or sets a value indicating if the setter should guarded by a boolean parameter
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.Explorable.PexExplorableSetter.TargetName">
            <summary>
            Gets the name of the target.
            </summary>
            <value>The name of the target.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Explorable.PexExplorableSetter.Target">
            <summary>
            Gets the target member.
            </summary>
            <value>The member.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Explorable.PexExplorableSetter.ImageKey">
            <summary>
            Gets the image key to be fetched from
            an imagelist
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Explorable.PexExplorableSetter.Title">
            <summary>
            Gets the (short) title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.Explorable.PexExplorableSetter.PushParameterAction">
            <summary>
            Delegate to push a parameter.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Exploration.IPexExplorationFactory">
            <summary>
            Pex exploration factory
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Exploration.IPexExplorationFactory.CreateExplorations(Microsoft.Pex.Framework.PexExplorationAttributeBase,Microsoft.Pex.Engine.PexFixture,Microsoft.ExtendedReflection.Metadata.MethodDefinition)">
            <summary>
            Creates the explorations.
            </summary>
            <param name="attribute">The attribute.</param>
            <param name="fixture">The fixture.</param>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.Exploration.IPexExplorationFactory.AttributeType">
            <summary>
            Gets the attribute type.
            </summary>
            <value>The type of the attribute.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.Filters.IPexExplorationFilter">
            <summary>
            Pex exploration filter
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Filters.IPexExplorationFilter.Match(Microsoft.Pex.Engine.ComponentModel.IPexComponent,Microsoft.Pex.Engine.PexFixture,Microsoft.ExtendedReflection.Metadata.MethodDefinition,Microsoft.Pex.Framework.PexExplorationAttributeBase)">
            <summary>
            Filters the specified fixture.
            </summary>
            <param name="host">The host.</param>
            <param name="fixture">The fixture.</param>
            <param name="value">The value.</param>
            <param name="attribute">The attribute.</param>
            <returns>true if the value is in the filter</returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.GeneratedValues.PexObservedValueCollection">
            <summary>
            A container for observed values
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.GeneratedValues.PexObservedValueCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.GeneratedValues.PexObservedValueCollection"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.GeneratedValues.PexObservedValueCollection.GetValue``1(System.String)">
            <summary>
            Gets a named observed value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.GeneratedValues.PexObservedValueCollection.AddValue(System.String,Microsoft.ExtendedReflection.Metadata.TypeEx,System.Object)">
            <summary>
            Adds the value.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type of the value</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Microsoft.Pex.Engine.GeneratedValues.PexObservedValueCollection.HasValues">
            <summary>
            Gets a value indicating whether any values are stored in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.GeneratedValues.PexObservedValueCollection.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.GeneratedValues.PexObservedValueCollection.Values">
            <summary>
            Gets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.Goals.IPexExplorationGoal">
            <summary>
            An exploration goal
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Goals.IPexExplorationGoal.GetOutcome">
            <summary>
            Gets the current outcome of the goal
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Goals.IPexExplorationGoal.IsReached(System.Boolean)">
            <summary>
            Gets a value indicating whether the goal has been reached
            </summary>
            <param name="explorationFinished">a value that determines if it is the last call for this exploration</param>
        </member>
        <member name="P:Microsoft.Pex.Engine.Goals.IPexExplorationGoal.Kind">
            <summary>
            Gets the kind of goal
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Goals.IPexExplorationGoalManager">
            <summary>
            A manager for the exploration goals
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Goals.IPexExplorationGoalManager.AddGoal(Microsoft.Pex.Engine.Goals.IPexExplorationGoal)">
            <summary>
            Adds a goal to the manager
            </summary>
            <param name="goal"></param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Goals.IPexExplorationGoalManager.AreAllGoalsReached">
            <summary>
            Gets a value indicating if all goals have been reached. If no goals are registered,
            it return false.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Goals.IPexExplorationGoalManager.LogMissedGoals">
            <summary>
            Logs all the goals that were not reached
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.Goals.IPexExplorationGoalManager.Goals">
            <summary>
            Gets the list of registered goals
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Goals.PexExplorationGoalEventArgs">
            <summary>
            The result of an exploration goal.
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Goals.PexExplorationGoalEventArgs.MissedImageKeyName">
            <summary>
            Image key for missed goals
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Goals.PexExplorationGoalEventArgs.ReachedImageKeyName">
            <summary>
            Image key for reached goals
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Goals.PexExplorationGoalEventArgs.Kind">
            <summary>
            Gets the kind of goal
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Goals.PexExplorationGoalEventArgs.TryGetOutcome(System.String@)">
            <summary>
            Tries to get the outcome description
            </summary>
            <param name="outcome"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Goals.PexExplorationGoalEventArgs.Reached(System.String,System.String,System.Int32)">
            <summary>
            Creates a new reached goal result
            </summary>
            <param name="kind">The kind.</param>
            <param name="outcome">The outcome.</param>
            <param name="runCount">The run count.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Goals.PexExplorationGoalEventArgs.Missed(System.String,System.String)">
            <summary>
            Creates a new missed goal result
            </summary>
            <param name="kind">The kind.</param>
            <param name="outcome">The outcome.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Goals.PexExplorationGoalEventArgs.TryGetRunCount(System.Int32@)">
            <summary>
            Tries to gets the number of run to reach the goal, if reached
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Goals.PexExplorationGoalEventArgs.IsReached">
            <summary>
            Gets a value indicating if the goal was reached
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Goals.PexExplorationGoalEventArgs.WriteXml(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter)">
            <summary>
            Writes to XML.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Goals.PexExplorationGoalEventArgs.FromXml(System.Xml.XPath.XPathNavigator)">
            <summary>
            Reads from XML.
            </summary>
            <param name="nav">The nav.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Goals.PexExplorationGoalEventArgs.Equals(Microsoft.Pex.Engine.Goals.PexExplorationGoalEventArgs)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Goals.PexExplorationGoalEventArgs.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Microsoft.Pex.Engine.Goals.PexExplorationGoalEventArgs.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.InputEnumeration.IPexInputEnumerator">
            <summary>
            Interface which can be used to interactively 
            find new models while more and more execution
            paths are covered.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.InputEnumeration.IPexInputEnumerator.GetInputModels">
            <summary>
            Lazily enumerates models; callbacks to 
            <see cref="M:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionGraphObserver.NodeLocationChanged(Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode)"/> and 
            <see cref="M:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionGraphObserver.NodeBumped(Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode)"/> might happen during the enumeration.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.InputEnumeration.IPexInputEnumerator.GetProgressMessage">
            <summary>
            Gets a progress message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.InputEnumeration.IPexInputEnumerator.DumpStatistics(Microsoft.ExtendedReflection.Logging.DumpTreeWriter)">
            <summary>
            Dumps the statistics.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:Microsoft.Pex.Engine.InputEnumeration.IPexInputEnumerator.Name">
            <summary>
            Gets the name of the input enumerator.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.InputEnumeration.IPexInputEnumeratorManager">
            <summary>
            Interface to manage <see cref="T:Microsoft.Pex.Engine.InputEnumeration.IPexInputEnumerator"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.InputEnumeration.IPexInputEnumeratorManager.AddInputEnumerator(System.Int32,System.Boolean,Microsoft.Pex.Engine.InputEnumeration.IPexInputEnumerator)">
            <summary>
            Adds an input enumerator.
            </summary>
            <param name="priority">The priority; value between 1 and 100; if not alternating, then higher priorities go first</param>
            <param name="alternate">Whether to alternate with other enumerators</param>
            <param name="enumerator">The enumerator.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.InputEnumeration.IPexInputEnumeratorManager.CreateCombinedInputEnumerator">
            <summary>
            Creates a new <see cref="T:Microsoft.Pex.Engine.InputEnumeration.IPexInputEnumerator"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.InputEnumeration.PexInputEnumeratorBase">
            <summary>
            Abstract base class to represent input models.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.InputEnumeration.PexInputEnumeratorBase.#ctor(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.InputEnumeration.PexInputEnumeratorBase"/> class.
            </summary>
            <param name="host">The host.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.InputEnumeration.PexInputEnumeratorBase.GetInputModels">
            <summary>
            Lazily enumerates models; callbacks to
            <see cref="M:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionGraphObserver.NodeLocationChanged(Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode)"/> and
            <see cref="M:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionGraphObserver.NodeBumped(Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode)"/> and
            <see cref="M:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionGraphObserver.PathStarted(Microsoft.ExtendedReflection.Reasoning.IModel)"/> and
            <see cref="M:Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionGraphObserver.PathFinished(Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode)"/> 
            <see cref="M:Microsoft.Pex.Engine.InputEnumeration.PexInputEnumeratorBase.GetProgressMessage"/> 
            might happen during the enumeration.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.InputEnumeration.PexInputEnumeratorBase.GetProgressMessage">
            <summary>
            Gets a progress message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.InputEnumeration.PexInputEnumeratorBase.DumpStatistics(Microsoft.ExtendedReflection.Logging.DumpTreeWriter)">
            <summary>
            Dumps the statistics.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.InputEnumeration.PexInputEnumeratorBase.NodeLocationChanged(Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode)">
            <summary>
            Callback when the location of a node has become known
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.Pex.Engine.InputEnumeration.PexInputEnumeratorBase.NodeBumped(Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode)">
            <summary>
            Callback when an execution node
            is found to have potential for further successors,
            in particular when it is added for the first time.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.Pex.Engine.InputEnumeration.PexInputEnumeratorBase.PathStarted(Microsoft.ExtendedReflection.Reasoning.IModel)">
            <summary>
            Callback when an execution path is monitored.
            </summary>
            <param name="model">model used to generate inputs for this execution path</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.InputEnumeration.PexInputEnumeratorBase.PathFinished(Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode)">
            <summary>
            Callback when an execution path has terminated.
            </summary>
            <param name="node">entire path can be extracted from final node</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.InputEnumeration.PexInputEnumeratorBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.InputEnumeration.PexInputEnumeratorBase.GetInputModel(System.String,Microsoft.ExtendedReflection.Interpretation.States.IState,Microsoft.ExtendedReflection.Interpretation.ISubstitution,Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Obtains an input model from a state (specifying a heap configuration)
            and a substitution.
            </summary>
            <param name="name">The name.</param>
            <param name="state">The state.</param>
            <param name="substitution">The substitution.</param>
            <param name="_inputMethod">the method from which the input was mind if any</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.InputEnumeration.PexInputEnumeratorBase.Name">
            <summary>
            Gets the name of the input enumerator.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.InputEnumeration.PexInputEnumeratorBase.InputModelBuilder">
            <summary>
            This class provides infrastructure to 
            (symbolically) execute a test method
            in order to determine the vales that will
            be passed to the exploration method.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.InputEnumeration.PexInputEnumeratorBase.InputModelBuilder.#ctor(Microsoft.Pex.Engine.InputEnumeration.PexInputEnumeratorBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.InputEnumeration.PexInputEnumeratorBase.InputModelBuilder"/> class.
            </summary>
            <param name="owner">The owner.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.InputEnumeration.PexInputEnumeratorBase.InputModelBuilder.TrySetValue(Microsoft.ExtendedReflection.Interpretation.ISymbolIdFromParameter,System.Object)">
            <summary>
            Tries to set the value of a parameter symbol.
            </summary>
            <param name="symbolId">The symbol id.</param>
            <param name="boxedValue">The boxed value.</param>
            <returns>
            	<code>true</code> if the type of the symbol is supported, and the given boxed value had a compatible type
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.InputEnumeration.PexInputEnumeratorBase.InputModelBuilder.ToInputModel(System.String)">
            <summary>
            Creates an input model from the current state of this builder.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.InputEnumeration.PexInputEnumeratorBase.InputModelBuilder.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.InputEnumeration.PexInputEnumeratorBase.InputModelBuilder.ParameterSymbols">
            <summary>
            Gets the parameter symbols.
            </summary>
            <value>The parameter symbols.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.InputEnumeration.PexInputEnumeratorBase.ModelFromState">
            <summary>
            This class represents a model
            defined by a state
            (that was reached by symbolic execution)
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.InputEnumeration.PexInputEnumeratorBase.ModelFromState.#ctor(Microsoft.ExtendedReflection.Interpretation.States.IState,Microsoft.ExtendedReflection.Interpretation.ISubstitution)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.InputEnumeration.PexInputEnumeratorBase.ModelFromState"/> class.
            </summary>
            <param name="state">The state.</param>
            <param name="substitution">The substitution.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.InputEnumeration.PexInputEnumeratorBase.ModelFromState.Compactify">
            <summary>
            Compactifies this instance.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.InputEnumeration.PexInputEnumeratorBase.ModelFromState.GetValue(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Gets the value.
            </summary>
            <param name="term">The term.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.InputEnumeration.PexInputEnumeratorBase.ModelFromState.StateReader">
            <summary>
            While we have substitutions for all parameters,
            it's not so obvious which portions of the heap will be relevant.
            This rewriter takes care of symbols referring to the heap.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexAttributeBase">
            <summary>
            Abstract base class for all pex attributes
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAttributeBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.PexAttributeBase"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Packages.IPexPackageTypeProvider">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Packages.IPexPackageTypeProvider.GetPackageTypes">
            <summary>
            Gets the package types, i.e. types that have a <see cref="T:Microsoft.Pex.Engine.Packages.IPexPackage"/> attribute attached to it.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Microsoft.Pex.Engine.Libraries.FSharpMetadata.FSharpCoreAssembly">
            <summary>
            FSharp.Core assembly name
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Libraries.FSharpMetadata.FSharpCoreNamespace">
            <summary>
            Main F# namespace
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Libraries.FSharpMetadata.CompilationMappingAttribute">
            <summary>
            The CompilationMappingAttribute type name
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Libraries.FSharpMetadata.CompilationRepresentationAttribute">
            <summary>
            The CompilationRepresentationAttribute type name
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Libraries.FSharpMetadata.FSharpInterfaceDataVersionAttribute">
            <summary>
            The FSharpInterfaceDataVersionAttribute type name
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Libraries.FSharpMetadata.NoDynamicInvocationAttribute">
            <summary>
            The NoDynamicInvocationAttribute type name
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Libraries.FSharpMetadata.SourceConstructFlags">
            <summary>
            SourceContructFlags
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Creatable.PexCreatableFactoryAttributeBase">
            <summary>
            Abstract base class to define new <see cref="T:Microsoft.Pex.Engine.Creatable.IPexCreatableFactory"/>
            implementations
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Packages.PexExplorationPackageAttributeBase">
            <summary>
            Abstract base class for exploration decorator attributes
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.ComponentModel.PexComponentElementDecoratorAttributeBase">
            <summary>
            Base class for decorator attributes
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.ComponentModel.IPexComponentElementDecorator">
            <summary>
            Interface for component element decorators
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.ComponentModel.IPexComponentElementDecorator.Decorate(Microsoft.ExtendedReflection.Metadata.Names.Name,Microsoft.Pex.Engine.ComponentModel.IPexDecoratedComponentElement)">
            <summary>
            This method can announce filters, focuses, and packages to Pex.
            </summary>
            <remarks>
            This method is called once when Pex inspects all decorators.
            A package, that is added at this point, may later create
            components for individual explorations or paths.
            </remarks>
            <param name="location">The location.</param>
            <param name="host">The host.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.ComponentModel.PexComponentElementDecoratorAttributeBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.ComponentModel.PexComponentElementDecoratorAttributeBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.ComponentModel.PexComponentElementDecoratorAttributeBase.Decorate(Microsoft.ExtendedReflection.Metadata.Names.Name,Microsoft.Pex.Engine.ComponentModel.IPexDecoratedComponentElement)">
            <summary>
            This method can announce filters, focuses, and packages to Pex.
            </summary>
            <remarks>
            This method is called once when Pex inspects all decorators.
            A package, that is added at this point, may later create
            components for individual explorations or paths.
            </remarks>
            <param name="location">The location of the decorator.</param>
            <param name="host">The host.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.ComponentModel.PexComponentElementDecoratorAttributeBase.Validate(Microsoft.Pex.Engine.Logging.IPexLog,Microsoft.ExtendedReflection.Metadata.ICustomAttributeProviderEx,Microsoft.ExtendedReflection.Metadata.VisibilityContext)">
            <summary>
            Validates the attribute in a particular visibility context.
            </summary>
            <param name="log">The log.</param>
            <param name="target">The target.</param>
            <param name="visibilityContextOfGeneratedTests">The visibility context of generated tests.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.Packages.IPexExplorationPackage">
            <summary>
            Pex exploration package
            </summary>
            <remarks>
            An exploration package can be installed at the level of an exploration.
            </remarks>
        </member>
        <member name="M:Microsoft.Pex.Engine.Packages.IPexExplorationPackage.Load(Microsoft.ExtendedReflection.ComponentModel.IContainer)">
            <summary>
            This method provides the opportunity install or substitute services;
            no services may be queried at this time.
            </summary>
            <param name="explorationContainer">The exploration container.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Packages.IPexExplorationPackage.Initialize(Microsoft.Pex.Engine.ComponentModel.IPexExplorationEngine)">
            <summary>
            Initializes the specified exploration package. May interact with services.
            </summary>
            <param name="host">The host.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Packages.IPexExplorationPackage.BeforeExploration(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent)">
            <summary>
            Performs initialization actions that may query services.
            </summary>
            <param name="host">The host.</param>
            <returns>some data</returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Packages.IPexExplorationPackage.AfterExploration(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,System.Object)">
            <summary>
            Performs finalization actions that may query services.
            </summary>
            <param name="host">The host.</param>
            <param name="data">The data returned by BeforeExploration.</param>
        </member>
        <member name="P:Microsoft.Pex.Engine.Packages.IPexExplorationPackage.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:Microsoft.Pex.Framework.Packages.PexExplorationPackageAttributeBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Packages.PexExplorationPackageAttributeBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Packages.PexExplorationPackageAttributeBase.Load(Microsoft.ExtendedReflection.ComponentModel.IContainer)">
            <summary>
            This method provides the opportunity install or substitute services.
            </summary>
            <param name="explorationContainer">The exploration container.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Packages.PexExplorationPackageAttributeBase.Initialize(Microsoft.Pex.Engine.ComponentModel.IPexExplorationEngine)">
            <summary>
            Initializes the specified exploration package. May interact with services.
            </summary>
            <param name="host">The host.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Packages.PexExplorationPackageAttributeBase.BeforeExploration(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent)">
            <summary>
            Callback that is executed before the exploration starts.
            </summary>
            <param name="host">The host.</param>
            <returns>some data</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Packages.PexExplorationPackageAttributeBase.AfterExploration(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,System.Object)">
            <summary>
            Callback that is executed after the exploration ends.
            </summary>
            <param name="host">The host.</param>
            <param name="data">The data returned by BeforeExploration.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Packages.PexExplorationPackageAttributeBase.Decorate(Microsoft.ExtendedReflection.Metadata.Names.Name,Microsoft.Pex.Engine.ComponentModel.IPexDecoratedComponentElement)">
            <summary>
            This method can announce filters, focuses, and packages to Pex.
            </summary>
            <param name="location">The location of the decorator.</param>
            <param name="host">The host.</param>
            <remarks>
            This method is called once when Pex inspects all decorators.
            A package, that is added at this point, may later create
            components for individual explorations or paths.
            </remarks>
        </member>
        <member name="P:Microsoft.Pex.Framework.Packages.PexExplorationPackageAttributeBase.Name">
            <summary>
            Gets the name of this package.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.PexCreatableFactoryAttributeBase.TryCreateCreatableFactory(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,Microsoft.Pex.Engine.Creatable.IPexCreatableFactory@)">
            <summary>
            Creates the explorable guesser.
            </summary>
            <param name="host">The host.</param>
            <param name="factory">The factory.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.PexCreatableFactoryAttributeBase.BeforeExploration(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent)">
            <summary>
            Callback that is executed before the exploration starts.
            </summary>
            <param name="host">The host.</param>
            <returns>some data</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.PexCreatableFactoryAttributeBase.AfterExploration(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,System.Object)">
            <summary>
            Callback that is executed after the exploration ends.
            </summary>
            <param name="host">The host.</param>
            <param name="data">The data returned by BeforeExploration.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.PexCreatableFactoryAttributeBase.Initialize(Microsoft.Pex.Engine.ComponentModel.IPexExplorationEngine)">
            <summary>
            Initializes the specified exploration package. May interact with services.
            </summary>
            <param name="host">The host.</param>
        </member>
        <member name="T:Microsoft.Pex.Framework.Explorable.PexExplorableGuesserAttributeBase">
            <summary>
            Abstract base class to define new <see cref="T:Microsoft.Pex.Engine.Explorable.IPexExplorableGuesser"/>
            implementations
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Packages.PexExecutionPackageAttributeBase">
            <summary>
            Abstract base class for exploration decorator attributes
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Packages.PexPackageAttributeBase">
            <summary>
            Abstract base class for exploration decorator attributes
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Packages.IPexPackage">
            <summary>
            Pex package
            </summary>
            <remarks>
            A Pex package can be installed globally in Pex.
            </remarks>
        </member>
        <member name="M:Microsoft.Pex.Engine.Packages.IPexPackage.Load(Microsoft.ExtendedReflection.ComponentModel.IContainer)">
            <summary>
            This method provides the opportunity install or substitute services;
            no services may be queried at this time.
            </summary>
            <param name="engineContainer">The engine container.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Packages.IPexPackage.Initialize(Microsoft.ExtendedReflection.ComponentModel.IEngine)">
            <summary>
            This method provides the opportunity to query services and interact with them.
            </summary>
            <param name="host"></param>
        </member>
        <member name="P:Microsoft.Pex.Engine.Packages.IPexPackage.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:Microsoft.Pex.Framework.Packages.PexPackageAttributeBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Packages.PexPackageAttributeBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Packages.PexPackageAttributeBase.Load(Microsoft.ExtendedReflection.ComponentModel.IContainer)">
            <summary>
            This method provides the opportunity install or substitute services.
            </summary>
            <param name="engineContainer">The exploration container.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Packages.PexPackageAttributeBase.Initialize(Microsoft.ExtendedReflection.ComponentModel.IEngine)">
            <summary>
            this method provides the opportunity to query services and interact with them.
            </summary>
            <param name="engine">The engine.</param>
        </member>
        <member name="P:Microsoft.Pex.Framework.Packages.PexPackageAttributeBase.Name">
            <summary>
            Gets the name of this package.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.Packages.IPexExecutionPackage">
            <summary>
            A Pex package that receives execution events
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Packages.IPexExecutionPackage.BeforeExecution(Microsoft.Pex.Engine.ComponentModel.IPexComponent)">
            <summary>
            Performs initialization actions that may query services.
            </summary>
            <param name="host">The host.</param>
            <returns>some data</returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Packages.IPexExecutionPackage.AfterExecution(Microsoft.Pex.Engine.ComponentModel.IPexComponent,System.Object)">
            <summary>
            Performs finalization actions that may query services.
            </summary>
            <param name="host">The host.</param>
            <param name="data">The data returned by <see cref="M:Microsoft.Pex.Engine.Packages.IPexExecutionPackage.BeforeExecution(Microsoft.Pex.Engine.ComponentModel.IPexComponent)"/>.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Packages.PexExecutionPackageAttributeBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Packages.PexPackageAttributeBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Packages.PexExecutionPackageAttributeBase.BeforeExecution(Microsoft.Pex.Engine.ComponentModel.IPexComponent)">
            <summary>
            Callback that is executed before the execution  starts.
            </summary>
            <param name="host">The host.</param>
            <returns>some data</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Packages.PexExecutionPackageAttributeBase.AfterExecution(Microsoft.Pex.Engine.ComponentModel.IPexComponent,System.Object)">
            <summary>
            Callback that is executed after the execution ends.
            </summary>
            <param name="host">The host.</param>
            <param name="data">The data returned by <see cref="M:Microsoft.Pex.Framework.Packages.PexExecutionPackageAttributeBase.BeforeExecution(Microsoft.Pex.Engine.ComponentModel.IPexComponent)"/>.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexExplorableGuesserAttributeBase.CreateExplorableGuessers(Microsoft.Pex.Engine.ComponentModel.IPexComponent)">
            <summary>
            Creates explorable guessers.
            </summary>
            <param name="host">The host.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexExplorableGuesserAttributeBase.BeforeExecution(Microsoft.Pex.Engine.ComponentModel.IPexComponent)">
            <summary>
            Callback that is executed before the execution  starts.
            </summary>
            <param name="host">The host.</param>
            <returns>some data</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexExplorableGuesserAttributeBase.AfterExecution(Microsoft.Pex.Engine.ComponentModel.IPexComponent,System.Object)">
            <summary>
            Callback that is executed after the execution ends.
            </summary>
            <param name="host">The host.</param>
            <param name="data">The data returned by <see cref="M:Microsoft.Pex.Framework.Explorable.PexExplorableGuesserAttributeBase.BeforeExecution(Microsoft.Pex.Engine.ComponentModel.IPexComponent)"/>.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexExplorableGuesserAttributeBase.Initialize(Microsoft.ExtendedReflection.ComponentModel.IEngine)">
            <summary>
            this method provides the opportunity to query services and interact with them.
            </summary>
            <param name="engine">The engine.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexExplorableGuesserAttributeBase.Load(Microsoft.ExtendedReflection.ComponentModel.IContainer)">
            <summary>
            This method provides the opportunity install or substitute services.
            </summary>
            <param name="engineContainer">The exploration container.</param>
        </member>
        <member name="T:Microsoft.Pex.Framework.RuntimeContexts.PexRuntimeContextAttributeBase">
            <summary>
            Abstract base class for attribute implementing a 
            IPexRuntimeContext instance
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.RuntimeContexts.PexRuntimeContextAttributeBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.RuntimeContexts.PexRuntimeContextAttributeBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.RuntimeContexts.PexRuntimeContextAttributeBase.TryCreateRuntimeContext(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,Microsoft.Pex.Engine.RuntimeContexts.IPexRuntimeContext@)">
            <summary>
            Tries to create runtime context.
            </summary>
            <param name="host">The host.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.RuntimeContexts.PexRuntimeContextAttributeBase.BeforeExploration(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent)">
            <summary>
            Callback that is executed before the exploration starts.
            </summary>
            <param name="host">The host.</param>
            <returns>some data</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.RuntimeContexts.PexRuntimeContextAttributeBase.AfterExploration(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,System.Object)">
            <summary>
            Callback that is executed after the exploration ends.
            </summary>
            <param name="host">The host.</param>
            <param name="data">The data returned by BeforeExploration.</param>
        </member>
        <member name="T:Microsoft.Pex.Engine.RuntimeContexts.IPexRuntimeContext">
            <summary>
            A instance that can create a runtime sandbox around an execution.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.RuntimeContexts.IPexRuntimeContext.Open">
            <summary>
            Creates the context and enables it during the lifetime
            of the disposable object. This method 
            is called around the execution of the path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.RuntimeContexts.IPexRuntimeContext.Rollback(Microsoft.Pex.Engine.ComponentModel.IPexPathComponent)">
            <summary>
            Roll back any changes made while the context was open
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Logging.PexExplorableEventKind">
            <summary>
            Explorable events, used for logging
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Logging.PexExplorableEventKind.GuessedClass">
            <summary>
            the explorable was guessed by Pex
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Logging.PexExplorableEventKind.UnguessableClass">
            <summary>
            could not find any suitable factory method to create an instance of the class
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Logging.PexExplorableEventKind.UnguessableValueType">
            <summary>
            could not find any suitable factory method to create an instance of the struct
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Logging.PexExplorableEventKind.UnexplorableClass">
            <summary>
            could not find any successful execution path through the factory method
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Logging.PexExplorableEventArgs">
            <summary>
            Explorable event args
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Logging.PexExplorableEventArgs.ImageKeyName">
            <summary>
            Image key
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.PexExplorableEventArgs.#ctor(Microsoft.ExtendedReflection.Metadata.Names.TypeName,System.Boolean,Microsoft.Pex.Engine.Logging.PexExplorableEventKind,Microsoft.ExtendedReflection.Feedback.CodeUpdate,Microsoft.ExtendedReflection.Feedback.CodeUpdate,Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.Logging.PexExplorableEventArgs"/> class.
            </summary>
            <param name="explorableType">Type of the explorable.</param>
            <param name="isExplorableTypeExported">Whether the explorable type is exported.</param>
            <param name="kind">The kind.</param>
            <param name="update">might be null</param>
            <param name="preview">might be null</param>
            <param name="testAssemblyName">Name of the test assembly.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.PexExplorableEventArgs.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.PexExplorableEventArgs.GetShortDescription(Microsoft.ExtendedReflection.Utilities.Factory{Microsoft.ExtendedReflection.Emit.ILanguage})">
            <summary>
            Gets a slightly longer description (language specific if code is involved); usually used for tool-tips.
            </summary>
            <param name="languageFactory"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.PexExplorableEventArgs.TryWriteLongDescription(Microsoft.ExtendedReflection.Utilities.Factory{Microsoft.ExtendedReflection.Emit.ILanguage},System.IO.TextWriter)">
            <summary>
            Write a long description, possibly involving line breaks, to a text writer.
            </summary>
            <param name="languageFactory">The language factory.</param>
            <param name="writer">writer</param>
            <returns>whether anything was written</returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.PexExplorableEventArgs.TryGetCodeUpdate(Microsoft.ExtendedReflection.Feedback.CodeUpdate@)">
            <summary>
            Tries to get the code updates.
            </summary>
            <param name="codeUpdate"></param>
            <returns></returns>
            <value>The code updates.</value>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.PexExplorableEventArgs.GetPreviewDescription(Microsoft.ExtendedReflection.Utilities.Factory{Microsoft.ExtendedReflection.Emit.ILanguage})">
            <summary>
            Gets the descrition of the preview
            </summary>
            <param name="languageFactory">The language factory.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.PexExplorableEventArgs.TryGetPreviewCodeUpdate(Microsoft.ExtendedReflection.Feedback.CodeUpdate@)">
            <summary>
            Tries to get the preview code updates.
            </summary>
            <param name="codeUpdate"></param>
            <returns></returns>
            <value>The code updates.</value>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.PexExplorableEventArgs.WriteXml(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter)">
            <summary>
            Writes the XML.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.PexExplorableEventArgs.Equals(Microsoft.Pex.Engine.Logging.PexExplorableEventArgs)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.PexExplorableEventArgs.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.PexExplorableEventArgs.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.Logging.PexExplorableEventArgs.ExplorableType">
            <summary>
            Gets the explorable type.
            </summary>
            <value>The type of the explorable.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Logging.PexExplorableEventArgs.IsExplorableTypeExported">
            <summary>
            Gets a value indicating whether the explorable type is exported.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.Logging.PexExplorableEventArgs.Kind">
            <summary>
            Gets the explorable event kind.
            </summary>
            <value>The kind.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Logging.PexExplorableEventArgs.ImageKey">
            <summary>
            Gets the image key to be fetched from
            an imagelist
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Logging.PexExplorableEventArgs.Title">
            <summary>
            Gets the (short) title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Logging.PexExplorableEventArgs.WikiTopic">
            <summary>
            Gets the help topic.
            </summary>
            <value>The help topic.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.Logging.PexObservedCallMismatch">
            <summary>
            Pex observed call mismatch
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.PexObservedCallMismatch.#ctor(Microsoft.ExtendedReflection.Metadata.Names.MethodName,Microsoft.ExtendedReflection.Metadata.Names.MethodName,System.Boolean,Microsoft.ExtendedReflection.Metadata.Names.MethodName,Microsoft.ExtendedReflection.Symbols.StackTraceName,System.String,Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.Logging.PexObservedCallMismatch"/> class.
            </summary>
            <param name="callerMethod">The caller method.</param>
            <param name="intendedCalleeMethod">The intended callee method.</param>
            <param name="isDeclaringTypeExported">whether the declaring type is exported</param>
            <param name="actualCalleeMethod">The actual callee method.</param>
            <param name="stackTrace">The stack trace.</param>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="testAssemblyName">Name of the test assembly.</param>
        </member>
        <member name="T:Microsoft.Pex.Engine.Logging.PexExplorationImprecision">
            <summary>
            An exploration imprecision location
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.PexExplorationImprecision.#ctor(Microsoft.ExtendedReflection.Metadata.Names.CodeLocationName,System.Boolean,Microsoft.ExtendedReflection.Symbols.StackFrameName,Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.Logging.PexExplorationImprecision"/> class.
            </summary>
            <param name="location">The location.</param>
            <param name="isDeclaringTypeExported">if set to <c>true</c> [is declaring type exported].</param>
            <param name="frame">The frame.</param>
            <param name="testAssemblyName">Name of the test assembly.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.PexExplorationImprecision.Internalize">
            <summary>
            Internalizes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.Logging.PexStaticFieldStore">
            <summary>
            An uninstrumented method was encountered
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.PexStaticFieldStore.#ctor(Microsoft.ExtendedReflection.Metadata.Names.FieldName,System.Boolean,Microsoft.ExtendedReflection.Symbols.StackTraceName,System.String,Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.Logging.PexStaticFieldStore"/> class.
            </summary>
            <param name="staticField">The static field.</param>
            <param name="isDeclaringTypeExported">if set to <c>true</c> [is declaring type exported].</param>
            <param name="stackTrace">The stack trace.</param>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="testAssemblyName">Name of the test assembly.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.PexStaticFieldStore.Internalize">
            <summary>
            Internalizes this instance
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.Logging.PexUninstrumentedMethod">
            <summary>
            Pex uninstrumented method information
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.PexUninstrumentedMethod.#ctor(Microsoft.ExtendedReflection.Metadata.Names.MethodName,Microsoft.ExtendedReflection.Symbols.StackTraceName,System.Boolean,System.String,Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName,Microsoft.ExtendedReflection.Logging.UninstrumentedMethodFilterResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.Logging.PexUninstrumentedMethod"/> class.
            </summary>
            <param name="method">The method.</param>
            <param name="stackTrace">The stack trace.</param>
            <param name="isDeclaringTypeExported">if set to <c>true</c> [is declaring type exported].</param>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="testAssemblyName">Name of the test assembly.</param>
            <param name="filterResult">The filter result.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.PexUninstrumentedMethod.CreateInstrumentTypeOrAssemblyUpdate(Microsoft.ExtendedReflection.Metadata.Names.MethodName,Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName,System.Boolean)">
            <summary>
            Creates a code update that adds a instrumented attribute to the test project
            </summary>
            <param name="method"></param>
            <param name="testAssemblyName"></param>
            <param name="isDeclaringTypeExported"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.PexUninstrumentedMethod.TryCreateMoleTypeUpdate(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethodReference,Microsoft.ExtendedReflection.Metadata.Interfaces.IAssemblyReference,System.Boolean,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Feedback.CodeUpdate}@)">
            <summary>
            Creates a code update that adds the reference, mole type
            and preparation method
            </summary>
            <param name="testAssemblyName"></param>
            <param name="methodDefinition"></param>
            <param name="isDeclaringTypeExported"></param>
            <param name="updates"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.PexUninstrumentedMethod.Internalize">
            <summary>
            Internalizes the current instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.PexUninstrumentedMethod.Equals(Microsoft.ExtendedReflection.Logging.UninstrumentedMethod)">
            <summary>
            Checks two instance are equal
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.Logging.IPexCachedExplorationLog">
            <summary>
            Cached exploration log events
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.IPexCachedExplorationLog.AddExplorationImprecision(Microsoft.ExtendedReflection.Metadata.CodeLocation)">
            <summary>
            Logs an imprecision (if cache miss)
            </summary>
            <param name="location">The location.</param>
            <returns>true if cache miss</returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.IPexCachedExplorationLog.AddExplorableGuessed(Microsoft.Pex.Engine.Explorable.PexExplorableCandidate)">
            <summary>
            Adds a guessed explorable
            </summary>
            <param name="candidate">the guessed explorable candidate</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.IPexCachedExplorationLog.AddExplorableUnguessable(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Adds a type which is neither explorable nor creatable.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.IPexCachedExplorationLog.AddExplorableUnexplorable(Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Adds a type for which the execution of the explorable never succeeded
            </summary>
            <param name="type">The type.</param>
            <param name="factory">The factory (might be null)</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.IPexCachedExplorationLog.AddExplorableEventFilter(Microsoft.Pex.Engine.Logging.IPexExplorableEventFilter)">
            <summary>
            Adds an event filter.
            </summary>
            <param name="filter">The filter.</param>
        </member>
        <member name="P:Microsoft.Pex.Engine.Logging.IPexCachedExplorationLog.ExplorableEventFilters">
            <summary>
            Gets the event filters.
            </summary>
            <value>The event filters.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.Injection.IPexInjectionLogger">
            <summary>
            Injection logger
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Injection.IPexInjectionLogger.InjectedException(System.String,System.String,System.Object)">
            <summary>
            Logs an injected exception
            </summary>
            <param name="reason">The reason.</param>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="P:Microsoft.Pex.Engine.Injection.IPexInjectionLogger.InjectedExceptions">
            <summary>
            Gets the injected exceptions.
            </summary>
            <value>The injected exceptions.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Injection.IPexInjectionLogger.InjectedValues">
            <summary>
            Gets the injected values.
            </summary>
            <value>The injected values.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Injection.IPexInjectionLogger.HasInjected">
            <summary>
            Gets a value indicating whether any value has been injected.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Logging.XmlLogParsingErrorEventArgs">
            <summary>
            Error event args.
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Logging.XmlLogParsingErrorEventArgs.Exception">
            <summary>
            The exception.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.XmlLogParsingErrorEventArgs.#ctor(System.InvalidOperationException)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.Logging.XmlLogParsingErrorEventArgs"/> class.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="T:Microsoft.Pex.Engine.Logging.XmlLogParsingProgressEventArgs">
            <summary>
            Progress event args.
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Logging.XmlLogParsingProgressEventArgs.Index">
            <summary>
            Index (from 0 to <see cref="F:Microsoft.Pex.Engine.Logging.XmlLogParsingProgressEventArgs.Count"/>-1)
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Logging.XmlLogParsingProgressEventArgs.Count">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.XmlLogParsingProgressEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.Logging.XmlLogParsingProgressEventArgs"/> class.
            </summary>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
        </member>
        <member name="P:Microsoft.Pex.Engine.Logging.XmlLogParsingProgressEventArgs.PercentComplete">
            <summary>
            Gets the percentage complete (0..100)
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Packages.IPexPackageManager">
            <summary>
            A service that manages packages
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Packages.IPexPackageManager.ReflectPackages(Microsoft.ExtendedReflection.Metadata.AssemblyEx)">
            <summary>
            Reflects packages from a particular assembly
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Packages.IPexPackageManager.IsPackageAssembly(Microsoft.ExtendedReflection.Metadata.AssemblyEx,Microsoft.ExtendedReflection.Metadata.Names.TypeName@)">
            <summary>
            Determines whether the <paramref name="assembly"/> package has been loaded.
            </summary>
            <remarks>
            When the package is not found, tries to find a 
            PexPackageAssembly attribute in the target assembly
            </remarks>
            <param name="assembly">The assembly.</param>
            <param name="packageAttributeName">Name of the package attribute.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Packages.IPexPackageManager.AddLocatablePackages(Microsoft.ExtendedReflection.Metadata.Names.Name,System.Collections.Generic.IEnumerable{Microsoft.Pex.Engine.Packages.IPexPackage})">
            <summary>
            Adds a collection of locatable packages
            </summary>
            <param name="location"></param>
            <param name="packages"></param>
        </member>
        <member name="P:Microsoft.Pex.Engine.Packages.IPexPackageManager.Packages">
            <summary>
            Gets the packages.
            </summary>
            <value>The packages.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Packages.IPexPackageManager.PackageAssemblies">
            <summary>
            Gets assemblies containing additional packages and decorators
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.Packages.IPexPackageManager.PackageTypes">
            <summary>
            Gets the type annotated with packages
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.PexGeneratedImage">
            <summary>
            Generated image
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexGeneratedImage.#ctor(System.String,System.Drawing.Size)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.PexGeneratedImage"/> class.
            </summary>
            <param name="file">The file.</param>
            <param name="size">The size.</param>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexGeneratedImage.File">
            <summary>
            Gets the file name.
            </summary>
            <value>The file.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexGeneratedImage.Size">
            <summary>
            Gets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.Reflection.IPexReflectorFactory">
            <summary>
            A factory for <see cref="T:Microsoft.Pex.Engine.Reflection.IPexReflector"/> instance
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Reflection.IPexReflectorFactory.CreateReflector(Microsoft.Pex.Engine.ComponentModel.IPexComponent,Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework)">
            <summary>
            Creates the reflector.
            </summary>
            <param name="host">The host.</param>
            <param name="testFramework">The test framework.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.Reflection.IPexReflectorFactory.Name">
            <summary>
            Gets the name of the factory
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.SearchFrontiers.IPexBuiltinSearchFrontiers">
            <summary>
            Interface providing a set of standard search frontiers.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.SearchFrontiers.IPexBuiltinSearchFrontiers.Empty">
            <summary>
            A frontier that never selects any node.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.SearchFrontiers.IPexBuiltinSearchFrontiers.Alternate(Microsoft.Pex.Engine.SearchFrontiers.IPexSearchFrontier[])">
            <summary>
            Combines search frontiers using a round-robin scheme
            </summary>
            <param name="searchFrontiers">The search frontiers.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.SearchFrontiers.IPexBuiltinSearchFrontiers.ShortCircuit(Microsoft.Pex.Engine.SearchFrontiers.IPexSearchFrontier[])">
            <summary>
            Combines search frontiers such that frontiers at the beginning of the list are exhausted before
            drawing nodes from a frontier further to the end of the list.
            </summary>
            <param name="searchFrontiers">The search frontiers.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.SearchFrontiers.IPexBuiltinSearchFrontiers.Shortest(System.Int32)">
            <summary>
            A frontier that makes sure that some nodes with the smallest depth are used.
            </summary>
            <remarks>
            When during the search a node with a smaller depth is discovered,
            counting starts again. Thus, in total, this frontier may remove more than <code>count</code> nodes.
            </remarks>
            <param name="count">How many nodes with the smalltest depth will be removed.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.SearchFrontiers.IPexBuiltinSearchFrontiers.ShortestThroughAllCodeBranches(System.Random)">
            <summary>
            A frontier that makes sure that every shortest path through all individual branches are used.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.SearchFrontiers.IPexBuiltinSearchFrontiers.Default(System.Random,Microsoft.Pex.Engine.SearchFrontiers.IPexPrioritizedFrontierWeightProvider,System.Boolean,Microsoft.Pex.Engine.SearchFrontiers.IPexSearchFrontier[])">
            <summary>
            A frontier which always processes less visited branches first.
            </summary>
            <param name="random">A random value generator.</param>
            <param name="weightProvider">The weight provider.</param>
            <param name="useFittestFrontier">Whether the use the fittest frontier by default.</param>
            <param name="auxiliaryFrontiers">auxiliary frontiers</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.SearchFrontiers.IPexBuiltinSearchFrontiers.DefaultRoundRobin(System.Random,Microsoft.Pex.Engine.SearchFrontiers.IPexPrioritizedFrontierWeightProvider,System.Boolean,Microsoft.Pex.Engine.SearchFrontiers.IPexSearchFrontier[])">
            <summary>
            A frontier which always processes less visited branches first.
            </summary>
            <param name="random">A random value generator.</param>
            <param name="weightProvider">The weight provider.</param>
            <param name="useFittestFrontier">whether to include the fittest frontier by default.</param>
            <param name="auxiliaryFrontiers">auxiliary frontiers</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.SearchFrontiers.IPexBuiltinSearchFrontiers.Fittest(System.Random,Microsoft.Pex.Engine.SearchFrontiers.PexLocatedInnerFrontierFactory{System.Int32})">
            <summary>
            A frontier which chooses branches that the "fittest".
            </summary>
            <param name="random"></param>
            <param name="innerFrontierFactory"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.SearchFrontiers.IPexBuiltinSearchFrontiers.Random(System.Random)">
            <summary>
            Creates a random pick frontier
            </summary>
            <param name="random">The random.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.SearchFrontiers.IPexBuiltinSearchFrontiers.DepthFirst">
            <summary>
            Creates a stack frontier
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.SearchFrontiers.IPexBuiltinSearchFrontiers.BreadthFirst">
            <summary>
            Creates a queue frontier
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.SearchFrontiers.IPexBuiltinSearchFrontiers.IterativeDeepening(System.Random)">
            <summary>
            Creates an iterative deepening frontier
            </summary>
            <param name="random">The random.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.SearchFrontiers.IPexBuiltinSearchFrontiers.IterativeNarrowing(System.Random)">
            <summary>
            Creates an iterative narrowing frontier
            </summary>
            <param name="random">The random.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.SearchFrontiers.IPexBuiltinSearchFrontiers.SafeWrap(Microsoft.Pex.Engine.SearchFrontiers.IPexSearchFrontier)">
            <summary>
            Wraps a frontier such that critical errors in the frontier such as OOM are handled gracefully.
            </summary>
            <param name="searchFrontier">The search frontier.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.SearchFrontiers.IPexBuiltinSearchFrontiers.DepthPrioritized(System.Random,Microsoft.Pex.Engine.SearchFrontiers.PexLocatedInnerFrontierFactory{System.Int32})">
            <summary>
            Creates a depth prioritized frontier
            </summary>
            <param name="random">The random.</param>
            <param name="innerFrontierFactory">The inner frontier factory.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.SearchFrontiers.IPexBuiltinSearchFrontiers.CustomPrioritized(System.Random,System.Converter{Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode,System.Int32},Microsoft.Pex.Engine.SearchFrontiers.PexLocatedInnerFrontierFactory{System.Int32})">
            <summary>
            Creates a custom prioritized frontier
            </summary>
            <param name="random">The random.</param>
            <param name="locator">The locator.</param>
            <param name="innerFrontierFactory">The inner frontier factory.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.SearchFrontiers.IPexBuiltinSearchFrontiers.CodeLocationPrioritized(System.Random,Microsoft.Pex.Engine.SearchFrontiers.IPexPrioritizedFrontierWeightProvider,Microsoft.Pex.Engine.SearchFrontiers.PexLocatedInnerFrontierFactory{Microsoft.ExtendedReflection.Metadata.CodeLocation})">
            <summary>
            Creates a code location prioritized frontier
            </summary>
            <param name="random">The random.</param>
            <param name="searchWeightProvider">The search weight provider (may be null).</param>
            <param name="innerFrontierFactory">The inner frontier factory.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.SearchFrontiers.IPexBuiltinSearchFrontiers.CodeLocationFrequencyPrioritized(System.Random,Microsoft.ExtendedReflection.Metadata.CodeLocation,Microsoft.Pex.Engine.SearchFrontiers.PexLocatedInnerFrontierFactory{System.Int32})">
            <summary>
            Creates a code location prioritized frontier
            </summary>
            <param name="random">The random.</param>
            <param name="codeLocation">The code location whose frequency should be used to prioritize.</param>
            <param name="innerFrontierFactory">The inner frontier factory.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.SearchFrontiers.IPexBuiltinSearchFrontiers.CappedBranchCoveragePrioritized(System.Random,System.Int32,System.Int32,Microsoft.Pex.Engine.SearchFrontiers.PexLocatedInnerFrontierFactory{System.Int32})">
            <summary>
            Creates a special frontier
            </summary>
            <param name="random">The random.</param>
            <param name="cap">The cap.</param>
            <param name="maxCap">The max cap.</param>
            <param name="innerFrontierFactory">The inner frontier factory.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.SearchFrontiers.IPexBuiltinSearchFrontiers.CappedMethodCoveragePrioritized(System.Random,System.Int32,System.Int32,Microsoft.Pex.Engine.SearchFrontiers.PexLocatedInnerFrontierFactory{System.Int32})">
            <summary>
            Creates a special frontier
            </summary>
            <param name="random">The random.</param>
            <param name="cap">The cap.</param>
            <param name="maxCap">The max cap.</param>
            <param name="innerFrontierFactory">The inner frontier factory.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.SearchFrontiers.IPexBuiltinSearchFrontiers.CallStackTracePrioritized(System.Random,Microsoft.Pex.Engine.SearchFrontiers.PexLocatedInnerFrontierFactory{Microsoft.ExtendedReflection.Metadata.ICallStackTrace})">
            <summary>
            Creates a frontier prioritized by stack trace
            </summary>
            <param name="random">The random.</param>
            <param name="innerFrontierFactory">The inner frontier factory.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.SearchFrontiers.IPexPrioritizedFrontierWeightProvider">
            <summary>
            Interface to determine the weight of code locations for a prioritized frontier search
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.SearchFrontiers.IPexPrioritizedFrontierWeightProvider.GetWeight(Microsoft.ExtendedReflection.Metadata.CodeLocation)">
            <summary>
            Returns the weight of a branch from code location in the search.
            </summary>
            <param name="location"></param>
            <returns>positive value</returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.SearchFrontiers.IPexSearchFrontier">
            <summary>
            A search frontier decides in which order the search is performed.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.SearchFrontiers.IPexSearchFrontier.Add(Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode)">
            <summary>
            Adds a node; node was not present before
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.Pex.Engine.SearchFrontiers.IPexSearchFrontier.Remove(Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode,System.Boolean)">
            <summary>
            Removes a node; node was present before
            </summary>
            <param name="node">The node.</param>
            <param name="used">if set to <c>true</c> [used].</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.SearchFrontiers.IPexSearchFrontier.LocationUpdated(Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode)">
            <summary>
            Update the location of a node; node was present before
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.Pex.Engine.SearchFrontiers.IPexSearchFrontier.Contains(Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode)">
            <summary>
            Checks whether a node is already contained
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.SearchFrontiers.IPexSearchFrontier.TryRemove(Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode@)">
            <summary>
            Attempts to remove a node, and returns the node
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.SearchFrontiers.IPexSearchFrontier.SkipMany">
            <summary>
            Skip many nodes to make search faster by giving up completeness
            </summary>
            <returns>number of skipped nodes</returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.SearchFrontiers.IPexSearchFrontier.DumpStatistics(Microsoft.ExtendedReflection.Logging.DumpTreeWriter,System.Int32)">
            <summary>
            Dumps some statistics.
            </summary>
            <param name="writer">The writer.</param>
            <param name="depth">relevant for nested frontiers</param>
        </member>
        <member name="P:Microsoft.Pex.Engine.SearchFrontiers.IPexSearchFrontier.HasContent">
            <summary>
            Whether the frontier is not empty or does not have a memory.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.SearchFrontiers.IPexSearchFrontier.IsProgressing">
            <summary>
            Polls whether this frontier is making progress, and should be given higher priority.
            </summary>
            <remarks>
            If a frontier keeps making progress, it may starve other frontiers.
            </remarks>
        </member>
        <member name="T:Microsoft.Pex.Engine.SearchFrontiers.IPexSearchFrontierManager">
            <summary>
            A manager for search frontiers
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.SearchFrontiers.IPexSearchFrontierManager.AddRoundRobinSearchFrontier(Microsoft.ExtendedReflection.Utilities.Factory{Microsoft.Pex.Engine.SearchFrontiers.IPexSearchFrontier})">
            <summary>
            Adds a new search frontier, to be used in a round-robin fashion with all other search frontiers.
            </summary>
            <param name="factory"></param>
        </member>
        <member name="M:Microsoft.Pex.Engine.SearchFrontiers.IPexSearchFrontierManager.SetMainSearchFrontier(Microsoft.ExtendedReflection.Utilities.Factory{Microsoft.Pex.Engine.SearchFrontiers.IPexSearchFrontier})">
            <summary>
            Sets the main search frontier; cannot be combined with anything else.
            </summary>
            <param name="factory"></param>
        </member>
        <member name="M:Microsoft.Pex.Engine.SearchFrontiers.IPexSearchFrontierManager.CreateFrontier">
            <summary>
            Combines and create the frontiner
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.SearchFrontiers.IPexSearchFrontierManager.DontUseFittestFrontier">
            <summary>
            Whether the fittest frontier should not be used by default.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.SearchFrontiers.PexLocatedInnerFrontierFactory`1">
            <summary>
            Factory method for inner frontiers.
            </summary>
            <typeparam name="TLocation"></typeparam>
            <param name="location"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.States.IPexStateManager">
            <summary>
            Service at the exploration level
            that manages properties of states at the path level.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.States.IPexStateManager.AddInitialObjectMapping(Microsoft.ExtendedReflection.Interpretation.Term,System.Object)">
            <summary>
            Adds an object mapping.
            </summary>
            <param name="term">The term.</param>
            <param name="concreteObject">The concrete object.</param>
        </member>
        <member name="P:Microsoft.Pex.Engine.States.IPexStateManager.InitialObjectMappings">
            <summary>
            Gets the object mappings.
            </summary>
            <value>The initial object mappings.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.States.IPexUnsafeMemoryBuilder">
            <summary>
            Interface to register memory map symbols ids and memory addresses as roots to the constraint solver 
            </summary>
            <remarks>
            Only if symbols have been declared as roots, the constraint solver will find
            an assignment for them.
            </remarks>
        </member>
        <member name="M:Microsoft.Pex.Engine.States.IPexUnsafeMemoryBuilder.AddMemoryMapSymbolId(Microsoft.ExtendedReflection.Interpretation.MemoryMapSymbolId)">
            <summary>
            Registers a memory map with the constraint solver.
            </summary>
            <param name="symbolId">The symbol id.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.States.IPexUnsafeMemoryBuilder.AddMemoryAddress(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Layout)">
            <summary>
            Registers a memory address with the constraint solver.
            </summary>
            <param name="address">The address.</param>
            <param name="elementLayout">The element layout.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.States.IPexUnsafeMemoryBuilder.AddTypeOfMapSymbolId(Microsoft.ExtendedReflection.Interpretation.TypeOfMapSymbolId)">
            <summary>
            Registers a typed map with the constraint solver.
            </summary>
            <param name="typedMapId">The typed map id.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.States.IPexUnsafeMemoryBuilder.AddAllocatedMapSymbolId(Microsoft.ExtendedReflection.Interpretation.AllocatedMapSymbolId)">
            <summary>
            Registers the allocated map with the constraint solver.
            </summary>
            <param name="allocatedMapId">The allocated map id.</param>
        </member>
        <member name="T:Microsoft.Pex.Engine.TestFrameworks.IPexTestFrameworkFactory">
            <summary>
            Factory of <see cref="T:Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.IPexTestFrameworkFactory.CreateTestFramework(Microsoft.ExtendedReflection.ComponentModel.IComponent)">
            <summary>
            Creates the test framework.
            </summary>
            <param name="host">The host.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.Domains.PexZeroMdArrayLowerBoundsAttribute">
            <summary>
            Attribute that makes sure that Pex uses only zero as the lower bounds of multi-dimensional arrays
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Domains.PexDomainAttributeBase">
            <summary>
            Attribute to define the domains of values
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Domains.IPexDomain">
            <summary>
            Domain of values
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Domains.IPexDomain.TryGetInvariant(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,Microsoft.ExtendedReflection.Metadata.Layout,System.Converter{Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term}@)">
            <summary>
            Tries to get an invariant.
            </summary>
            <param name="host">The host.</param>
            <param name="layout">The layout.</param>
            <param name="invariantBuilder">The invariant builder.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.Domains.IPexTargetedDomainProvider">
            <summary>
            A targetted domain provider.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Domains.IPexTargetedDomainProvider.UpdateTarget(Microsoft.Pex.Framework.Domains.PexDomainTarget,Microsoft.ExtendedReflection.Metadata.MetadataEntity,System.Int32)">
            <summary>
            Updates the target of this domain.
            </summary>
            <param name="target">The target.</param>
            <param name="targetInfo">The target info.</param>
            <param name="targetIndex">Index of the target.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Domains.IPexTargetedDomainProvider.Validate(Microsoft.Pex.Engine.Logging.IPexLog,Microsoft.ExtendedReflection.Metadata.ICustomAttributeProviderEx,Microsoft.ExtendedReflection.Metadata.VisibilityContext)">
            <summary>
            Validates the domain against the target
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Domains.PexDomainAttributeBase.GetTargetType">
            <summary>
            Gets the type of the target.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Domains.PexDomainAttributeBase.GetDomainTargetType(Microsoft.Pex.Framework.Domains.PexDomainTarget,Microsoft.ExtendedReflection.Metadata.MetadataEntity,System.Int32)">
            <summary>
            Gets the type of the target.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Domains.PexDomainAttributeBase.UpdateTarget(Microsoft.Pex.Framework.Domains.PexDomainTarget,Microsoft.ExtendedReflection.Metadata.MetadataEntity,System.Int32)">
            <summary>
            Updates the target of this domain.
            </summary>
            <param name="target">The target.</param>
            <param name="targetInfo">The target info.</param>
            <param name="targetIndex">Index of the target.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Domains.PexDomainAttributeBase.MatchesTarget(Microsoft.Pex.Framework.Domains.PexDomainTarget,Microsoft.ExtendedReflection.Metadata.MetadataEntity,System.Int32)">
            <summary>
            Checks whether the target of this attribute matches a given target.
            </summary>
            <param name="target">The target.</param>
            <param name="targetInfo">The target info.</param>
            <param name="targetIndex">Index of the target.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Domains.PexDomainAttributeBase.#ctor">
            <summary>
            Constructor to be used on target declaration only 
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Domains.PexDomainAttributeBase.#ctor(System.Type)">
            <summary>
            Constructor to be used on a type only
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Domains.PexDomainAttributeBase.#ctor(System.Type,System.String)">
            <summary>
            Constructor to be used on a public field only
            </summary>
            <param name="declaringType"></param>
            <param name="fieldName"></param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Domains.PexDomainAttributeBase.#ctor(Microsoft.Pex.Framework.Domains.PexDomainTarget,System.Int32)">
            <summary>
            Constructor to be used on a public field only
            </summary>
            <param name="target">The target.</param>
            <param name="targetIndex">Index of the target.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Domains.PexDomainAttributeBase.TryGetInvariant(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,Microsoft.ExtendedReflection.Metadata.Layout,System.Converter{Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term}@)">
            <summary>
            Tries to get an invariant.
            </summary>
            <param name="host">The host.</param>
            <param name="layout">The layout.</param>
            <param name="invariantBuilder">The invariant builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Domains.PexDomainAttributeBase.BeforeExploration(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent)">
            <summary>
            Callback that is executed before the exploration starts.
            </summary>
            <param name="host">The host.</param>
            <returns>some data</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Domains.PexZeroMdArrayLowerBoundsAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Domains.PexZeroMdArrayLowerBoundsAttribute"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Domains.PexZeroMdArrayLowerBoundsAttribute.TryGetInvariant(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,Microsoft.ExtendedReflection.Metadata.Layout,System.Converter{Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term}@)">
            <summary>
            Tries to get an invariant.
            </summary>
            <param name="host">The host.</param>
            <param name="layout">The layout.</param>
            <param name="invariantBuilder">The invariant builder.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.FixIt.PexFixItEmitterFactoryAttributeBase">
            <summary>
            Base class of fix-it emitter factories
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.FixIt.PexFixItEmitterFactoryAttributeBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.FixIt.PexFixItEmitterFactoryAttributeBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.FixIt.PexFixItEmitterFactoryAttributeBase.CreateFixitEmitterFactories(Microsoft.Pex.Engine.ComponentModel.IPexComponent)">
            <summary>
            Creates fixit emitter factories
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.FixIt.PexFixItEmitterFactoryAttributeBase.BeforeExecution(Microsoft.Pex.Engine.ComponentModel.IPexComponent)">
            <summary>
            Callback that is executed before the execution  starts.
            </summary>
            <param name="host">The host.</param>
            <returns>some data</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.FixIt.PexFixItEmitterFactoryAttributeBase.AfterExecution(Microsoft.Pex.Engine.ComponentModel.IPexComponent,System.Object)">
            <summary>
            Callback that is executed after the execution ends.
            </summary>
            <param name="host">The host.</param>
            <param name="data">The data returned by <see cref="M:Microsoft.Pex.Framework.FixIt.PexFixItEmitterFactoryAttributeBase.BeforeExecution(Microsoft.Pex.Engine.ComponentModel.IPexComponent)"/>.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.FixIt.PexFixItEmitterFactoryAttributeBase.Initialize(Microsoft.ExtendedReflection.ComponentModel.IEngine)">
            <summary>
            this method provides the opportunity to query services and interact with them.
            </summary>
            <param name="engine">The engine.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.FixIt.PexFixItEmitterFactoryAttributeBase.Load(Microsoft.ExtendedReflection.ComponentModel.IContainer)">
            <summary>
            This method provides the opportunity install or substitute services.
            </summary>
            <param name="engineContainer">The exploration container.</param>
        </member>
        <member name="T:Microsoft.Pex.Engine.FixIt.PexFixItEmitterBase">
            <summary>
            Abstract base class for IFixItEmitter implementations
            which provides default behavior.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.FixIt.IPexFixItEmitter">
            <summary>
            Concretizes suggestions into code
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.FixIt.IPexFixItEmitter.SupportsPattern(Microsoft.ExtendedReflection.Metadata.Method,Microsoft.Pex.Engine.FixIt.PexGeneratedFailureFixSuggestionKind,Microsoft.Pex.Engine.FixIt.FixItSuggestionPattern,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.Parameter},System.Int32,System.Int32)">
            <summary>
            Gets a value indicating whether this emitter supports this code pattern
            </summary>
            <param name="method">The method.</param>
            <param name="kind">The kind.</param>
            <param name="pattern">The pattern.</param>
            <param name="parameters">The parameters.</param>
            <param name="choicesCount">The choice count.</param>
            <param name="externalResultsCount">The external results count.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.FixIt.IPexFixItEmitter.EmitSuggestion(Microsoft.ExtendedReflection.Metadata.Method,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.Pex.Engine.FixIt.PexGeneratedFailureFixSuggestionKind,Microsoft.Pex.Engine.FixIt.FixItSuggestionPattern,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.Parameter},System.Int32,System.Int32,System.String,Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder)">
            <summary>
            Emits the suggestion.
            </summary>
            <param name="method">The method.</param>
            <param name="failureCondition">The failure condition.</param>
            <param name="kind">The kind.</param>
            <param name="pattern">The pattern.</param>
            <param name="parameters">The parameters.</param>
            <param name="choicesCount">The choices count.</param>
            <param name="externalResultsCount">The external results count.</param>
            <param name="conditionText">The condition text.</param>
            <param name="codeWriter">The code writer.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.FixIt.PexFixItEmitterBase.#ctor(Microsoft.Pex.Engine.ComponentModel.IPexPathComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.FixIt.PexFixItEmitterBase"/> class.
            </summary>
            <param name="host">The host.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.FixIt.PexFixItEmitterBase.SupportsPattern(Microsoft.ExtendedReflection.Metadata.Method,Microsoft.Pex.Engine.FixIt.PexGeneratedFailureFixSuggestionKind,Microsoft.Pex.Engine.FixIt.FixItSuggestionPattern,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.Parameter},System.Int32,System.Int32)">
            <summary>
            Gets a value indicating whether this emitter supports this code pattern
            </summary>
            <param name="method">The method.</param>
            <param name="kind">The kind.</param>
            <param name="pattern">The pattern.</param>
            <param name="parameters">The parameters.</param>
            <param name="choicesCount">The choices count.</param>
            <param name="externalResultsCount">The external results count.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.FixIt.PexFixItEmitterBase.SupportsPattern(Microsoft.Pex.Engine.FixIt.FixItSuggestionPattern,Microsoft.Pex.Engine.FixIt.PexFixItEmitterBase.SuggestionKind)">
            <summary>
            Gets a value indicating whether this emitter supports this code pattern
            </summary>
            <param name="pattern">The pattern.</param>
            <param name="kind">The kind.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.FixIt.PexFixItEmitterBase.EmitSuggestion(Microsoft.ExtendedReflection.Metadata.Method,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.Pex.Engine.FixIt.PexGeneratedFailureFixSuggestionKind,Microsoft.Pex.Engine.FixIt.FixItSuggestionPattern,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.Parameter},System.Int32,System.Int32,System.String,Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder)">
            <summary>
            Emits the suggestion.
            </summary>
            <param name="method">The method.</param>
            <param name="failureCondition">The failure condition.</param>
            <param name="kind">The kind.</param>
            <param name="pattern">The pattern.</param>
            <param name="parameters">The parameters.</param>
            <param name="choicesCount">The choices count.</param>
            <param name="externalResultsCount">The external results count.</param>
            <param name="conditionText">The condition text.</param>
            <param name="codeWriter">The code writer.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.FixIt.PexFixItEmitterBase.GetAssertionRank(Microsoft.Pex.Engine.FixIt.PexFixItEmitterBase.SuggestionKind,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.Parameter},Microsoft.Pex.Engine.FixIt.PexGeneratedFailureFixSuggestionKind,Microsoft.Pex.Engine.FixIt.FixItSuggestionPattern)">
            <summary>
            Gets the assertion rank.
            </summary>
            <param name="suggestionKind">Kind of the suggestion.</param>
            <param name="failureCondition">The failure condition.</param>
            <param name="parameters">The parameters.</param>
            <param name="kind">The kind.</param>
            <param name="pattern">The pattern.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.FixIt.PexFixItEmitterBase.GetTestAssumptionRank(System.Int32,System.Int32)">
            <summary>
            Gets the test assumption rank.
            </summary>
            <param name="choicesCount">The choices count.</param>
            <param name="externalResultsCount">The external results count.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.FixIt.PexFixItEmitterBase.IsTestCode(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Determines whether the given method should be considered as part of the test code,
            as opposed to product code.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.FixIt.PexFixItEmitterBase.Emit(Microsoft.Pex.Engine.FixIt.PexFixItEmitterBase.SuggestionKind,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.Parameter},Microsoft.Pex.Engine.FixIt.PexGeneratedFailureFixSuggestionKind,Microsoft.Pex.Engine.FixIt.FixItSuggestionPattern,System.String,Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder)">
            <summary>
            Emits the specified fix suggestion.
            </summary>
            <param name="skind">The skind.</param>
            <param name="failureCondition">The failure condition.</param>
            <param name="parameters">The parameters.</param>
            <param name="kind">The kind.</param>
            <param name="pattern">The pattern.</param>
            <param name="conditionText">The condition text.</param>
            <param name="codeWriter">The code writer.</param>
        </member>
        <member name="P:Microsoft.Pex.Engine.FixIt.PexFixItEmitterBase.TestFramework">
            <summary>
            Gets the test framework.
            </summary>
            <value>The test framework.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.FixIt.PexFixItEmitterBase.AssertIsTrueMethod">
            <summary>
            Gets the assert-is-true method, if any.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.FixIt.PexFixItEmitterBase.AssertNotNullMethod">
            <summary>
            Gets the assert-not-null-method, if any.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.FixIt.PexFixItEmitterBase.InvariantIsTrueMethod">
            <summary>
            Gets the invariant-is-true method, if any.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.FixIt.PexFixItEmitterBase.InvariantNotNullMethod">
            <summary>
            Gets the invariant-not-null-method, if any.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.FixIt.PexFixItEmitterBase.TestAssumeIsTrueMethod">
            <summary>
            Gets the test assume-is-true-method, if any.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.FixIt.PexFixItEmitterBase.TestAssumeNotNullMethod">
            <summary>
            Gets the test assume-not-null-method, if any.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.FixIt.PexFixItEmitterBase.PublicAssumeIsTrueMethod">
            <summary>
            Gets the public assume-is-true-method, if any.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.FixIt.PexFixItEmitterBase.PublicAssumeNotNullMethod">
            <summary>
            Gets the public assume-not-null-method, if any.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.FixIt.PexFixItEmitterBase.PrivateAssumeIsTrueMethod">
            <summary>
            Gets the private assume-is-true-method, if any.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.FixIt.PexFixItEmitterBase.PrivateAssumeNotNullMethod">
            <summary>
            Gets the private assume-not-null method, if any.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.FixIt.PexFixItEmitterBase.SuggestionKind">
            <summary>
            Kind of suggestion
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.FixIt.PexFixItEmitterBase.SuggestionKind.TestAssumption">
            <summary>
            Test assumption
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.FixIt.PexFixItEmitterBase.SuggestionKind.Assertion">
            <summary>
            Assertion
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.FixIt.PexFixItEmitterBase.SuggestionKind.PrivateAssumption">
            <summary>
            Private assumption
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.FixIt.PexFixItEmitterBase.SuggestionKind.PublicAssumption">
            <summary>
            Public assumption
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.FixIt.PexFixItEmitterBase.SuggestionKind.Invariant">
            <summary>
            Invariant
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.FixIt.IPexFixItEmitterFactory">
            <summary>
            Factory of IFixItEmitter instances
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.FixIt.IPexFixItEmitterFactory.IsEnabled(Microsoft.ExtendedReflection.Metadata.TypeDefinition)">
            <summary>
            Determines whether the specified the fixit emitter
            should be used for this type.
            </summary>
            <param name="type">The type.</param>
            <returns>
            	<c>true</c> if the specified type is active; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.FixIt.IPexFixItEmitterFactory.CreateFixItEmitter(Microsoft.Pex.Engine.ComponentModel.IPexPathComponent)">
            <summary>
            Creates the fix it emitter.
            </summary>
            <param name="host">The host.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.FixIt.IPexFixItEmitterFactory.Name">
            <summary>
            Gets the name of this factory.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.FixIt.IPexFixItEmitterFactory.Priority">
            <summary>
            Gets the priority of this factory.
            A number between 0 and 100.
            Bigger numbers are better. 
            The default emitter factory has priority <code>50</code>.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.FixIt.PexContractsFixItEmitterFactoryAttribute.Clr4ImplicitAndRewrittenFixItItEmitterFactory.CreateFixItEmitter(Microsoft.Pex.Engine.ComponentModel.IPexPathComponent)">
            <summary>
            Creates the fix it emitter.
            </summary>
            <param name="host">The host.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.Generated.IPexObserveContext">
            <summary>
            The context where observed values are stored
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.IPexObserveContext.GetObservedValue``1(System.String)">
            <summary>
            Gets a named observed value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.Generated.PexRuntimeContractsFlags">
            <summary>
            Gets the rewritten assembly level contract
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Generated.PexRuntimeContractsFlags.Asserts">
            <summary>
            Assertions
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Generated.PexRuntimeContractsFlags.Assumes">
            <summary>
            Assumptions
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Generated.PexRuntimeContractsFlags.Ensures">
            <summary>
            Ensures
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Generated.PexRuntimeContractsFlags.Invariants">
            <summary>
            Invariants
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Generated.PexRuntimeContractsFlags.LegacyRequires">
            <summary>
            LegacyRequires
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Generated.PexRuntimeContractsFlags.None">
            <summary>
            No contracts
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Generated.PexRuntimeContractsFlags.Requires">
            <summary>
            Preconditions
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Generated.PexRuntimeContractsFlags.RequiresAlways">
            <summary>
            RequiresAlways
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Generated.PexRuntimeContractsFlags.Preconditions">
            <summary>
            All preconditions
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Generated.PexRuntimeContractsFlags.Full">
            <summary>
            All contracts
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Generated.PexContract">
            <summary>
            Helper methods for Code Contracts
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.PexContract.IsContractException(System.Exception)">
            <summary>
            Gets a value indicating if the exception is a contract exception
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.PexContract.HasRequiredRuntimeContracts(System.Type,Microsoft.Pex.Framework.Generated.PexRuntimeContractsFlags)">
            <summary>
            Gets a value indicating if the assembly containing
            typeOfAssembly is instrumented.
            </summary>
            <param name="typeOfAssembly"></param>
            <param name="requiredInstrumentationLevel">the minimum level of Contracts instrumentation</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.PexContract.HasRequiredRuntimeContracts(System.String,Microsoft.Pex.Framework.Generated.PexRuntimeContractsFlags)">
            <summary>
            Gets a value indicating whether <paramref name="assembly"/>
            was instrumented by the contracts rewriter.
            </summary>
            <param name="assemblyName"></param>
            <param name="requiredInstrumentationLevel">the minimum level of Contracts instrumentation</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.PexContract.HasRequiredRuntimeContracts(Microsoft.ExtendedReflection.Metadata.AssemblyEx,Microsoft.Pex.Framework.Generated.PexRuntimeContractsFlags)">
            <summary>
            Gets a value indicating whether <paramref name="assembly"/>
            was instrumented by the contracts rewriter.
            </summary>
            <param name="assembly"></param>
            <param name="requiredInstrumentationLevel">the minimum level of Contracts instrumentation</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.Generated.PexDescriptionAttribute">
            <summary>
            The description of a generated test
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.PexDescriptionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Pex.Framework.Generated.PexDescriptionAttribute"/>.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.PexDescriptionAttribute.ToString">
            <summary>
            Gets the message.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.Generated.PexDescriptionAttribute.Message">
            <summary>
            Gets the message
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Generated.PexGeneratedTestsClassAttribute">
            <summary>
            Marks a type that contains generated tests for a particular fixture type
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.PexGeneratedTestsClassAttribute.#ctor(System.Type)">
            <summary>
            Initializes the instance with the fixture type
            </summary>
            <param name="fixtureTypeDefinition"></param>
        </member>
        <member name="P:Microsoft.Pex.Framework.Generated.PexGeneratedTestsClassAttribute.FixtureType">
            <summary>
            Gets the fixture type that generates the tests
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Generated.PexSafeHelpers">
            <summary>
            Static helper class
            which allows to manipulate values in a safe fashion
            which might not be expressible in C#.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.PexSafeHelpers.AssignBoxedValue``1(System.Object,``0)">
            <summary>
            Sets the boxed value of an existing box object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target">The target.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.PexSafeHelpers.IsInst``1(System.Object)">
            <summary>
            Attempts to cast a value, returning null if cast fails.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.PexSafeHelpers.ByteToBoolean(System.Byte)">
            <summary>
            Returns a bool which has the bit-pattern of the given byte.
            </summary>
            <param name="b">The b.</param>
            <returns></returns>
            <remarks>
            This is a conversion that can be done in safe MSIL code;
            however, the C# compiler doesn't allow it.
            </remarks>
        </member>
        <member name="T:Microsoft.Pex.Framework.Generated.PexTraceListenerContext">
            <summary>
            Removes the current trace listeners, and install a trace listener
            that throws a <see cref="T:Microsoft.Pex.Framework.Exceptions.TraceAssertionException"/>.
            Also hooks and handles to the Contract.ContractFailed event.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.PexTraceListenerContext.Create">
            <summary>
            Creates the trace listener context
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.PexTraceListenerContext.Create(System.IO.TextWriter)">
            <summary>
            Creates the trace listener context to writes to the given text writer
            </summary>
            <param name="textWriter"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.PexTraceListenerContext.Dispose">
            <summary>
            Re-installs the original trace listeners
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Framework.Generated.PexTraceListenerContext.Touched">
            <summary>
            Gets a value indicating if the Trace listener was called
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Goals.PexExplorationGoalAttributeBase">
            <summary>
            Abstract base attribute for goals
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Goals.PexExplorationGoalAttributeBase.TryCreateExplorationGoal(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,Microsoft.Pex.Engine.Goals.IPexExplorationGoal@)">
            <summary>
            Tries to create an exploration goal instance
            </summary>
            <param name="host"></param>
            <param name="goal"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Goals.PexExplorationGoalAttributeBase.BeforeExploration(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent)">
            <summary>
            Callback that is executed before the exploration starts.
            </summary>
            <param name="host">The host.</param>
            <returns>some data</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Goals.PexExplorationGoalAttributeBase.AfterExploration(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,System.Object)">
            <summary>
            Callback that is executed after the exploration ends.
            </summary>
            <param name="host">The host.</param>
            <param name="data">The data returned by BeforeExploration.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Goals.PexExplorationGoalAttributeBase.Initialize(Microsoft.Pex.Engine.ComponentModel.IPexExplorationEngine)">
            <summary>
            Initializes the specified exploration package. May interact with services.
            </summary>
            <param name="host">The host.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Goals.PexExplorationGoalAttributeBase.Load(Microsoft.ExtendedReflection.ComponentModel.IContainer)">
            <summary>
            This method provides the opportunity install or substitute services.
            </summary>
            <param name="explorationContainer">The exploration container.</param>
        </member>
        <member name="T:Microsoft.Pex.Framework.InputEnumeration.PexArgumentFromFilesAttribute">
            <summary>
            Reads files; each file content is used as a separate input
            to seed the Pex exploration.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.InputEnumeration.PexInputEnumeratorAttributeBase">
            <summary>
            Abstract base class for specifying seed inputs
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.InputEnumeration.PexInputEnumeratorAttributeBase.GetEnumerator(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent)">
            <summary>
            Gets the input enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.InputEnumeration.PexInputEnumeratorAttributeBase.BeforeExploration(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent)">
            <summary>
            Callback that is executed before the exploration starts.
            </summary>
            <param name="host">The host.</param>
            <returns>some data</returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.InputEnumeration.PexInputEnumeratorAttributeBase.Priority">
            <summary>
            Gets or sets the priority, a value between 0 and 100.
            </summary>
            <value>The priority.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.InputEnumeration.PexInputEnumeratorAttributeBase.Alternate">
            <summary>
            Whether this input enumerator should alternate with other enumerators.
            </summary>
            <value><c>true</c> if alternate; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Microsoft.Pex.Framework.InputEnumeration.PexArgumentFromFilesAttribute.#ctor(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.PexArgumentsAttribute"/> class.
            </summary>
            <param name="path">The path.</param>
            <param name="searchPattern">The search pattern.</param>
            <param name="searchOption">The search option.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.InputEnumeration.PexArgumentFromFilesAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.PexArgumentsAttribute"/> class.
            </summary>
            <param name="fileNames">The file names.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.InputEnumeration.PexArgumentFromFilesAttribute.GetEnumerator(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent)">
            <summary>
            Gets the input enumerator.
            </summary>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.InputEnumeration.PexArgumentFromResourcesAttribute">
            <summary>
            Reads a string from an embedded resource
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.InputEnumeration.PexArgumentFromResourcesAttribute.#ctor(System.Type,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.PexArgumentsAttribute"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.InputEnumeration.PexArgumentFromResourcesAttribute.GetEnumerator(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent)">
            <summary>
            Gets the input enumerator.
            </summary>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexArgumentsAttribute">
            <summary>
            Defines a single value tuple that will be used
            as test inputs to seed the Pex exploration.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexArgumentsAttribute.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.PexArgumentsAttribute"/> class.
            </summary>
            <param name="values">The arguments, listed in order of declared parameters.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexArgumentsAttribute.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.PexArgumentsAttribute"/> class.
            </summary>
            <param name="value">The argument to be passed to the method.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexArgumentsAttribute.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.PexArgumentsAttribute"/> class.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexArgumentsAttribute.#ctor(System.Object,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.PexArgumentsAttribute"/> class.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="value3">The value3.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexArgumentsAttribute.#ctor(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.PexArgumentsAttribute"/> class.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="value3">The value3.</param>
            <param name="value4">The value4.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexArgumentsAttribute.GetEnumerator(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent)">
            <summary>
            Gets the input enumerator.
            </summary>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexObserve">
            <summary>
            Static class that contains methods to record values computed during test execution.
            </summary>
            <remarks>As Pex explores the code, <c>PexObserve</c> methods record Pex-generated values using
            their formatted string representations. Pex displays the values in Visual Studio and records them in the
            HTML reports.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexObserve.NewTest">
            <summary>
            Initializes a new test containing observed values.
            </summary>
            <overloads>Initializes a new test containing observed values.</overloads>
            <returns>Returns an <see cref="T:Microsoft.Pex.Framework.Generated.IPexObserveContext"/> interface.</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexObserve.NewTest(Microsoft.ExtendedReflection.Feedback.NamedValueCollection,Microsoft.Pex.Engine.GeneratedValues.PexObservedValueCollection)">
            <summary>
            Initializes a new test containing observed values.
            </summary>
            <param name="generatedValues">The generated values.</param>
            <param name="observedValues">The observed values.</param>
            <returns>Returns an <see cref="T:Microsoft.Pex.Framework.Generated.IPexObserveContext"/> interface.</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexObserve.DisposeTest">
            <summary>
            Clears the current context.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexObserve.ValueForViewing(System.String,System.String,System.Object[])">
            <summary>
            Logs a value in the parameter table.
            </summary>
            <overloads>Logs a value in the parameter table.</overloads>
            <param name="name">The value's name.</param>
            <param name="format">
            A message format string. The syntax for this string is identical to the format string
            used by <c>Console.Writeline</c>. In particular, insert "{0}", "{1}" and so on at appropriate
            locations in the string to represent the values of the variables in the <paramref name="args"/> array.
            </param>
            <param name="args">
            One or more variables. whose values are to be inserted in <paramref name="format"/>.
            </param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexObserve.ValueForViewing(System.String,System.String)">
            <summary>
            Logs a <c>string</c> value in the parameter table.
            </summary>
            <param name="name">The value's name.</param>
            <param name="value">A <c>string</c> value.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexObserve.ValueForViewing``1(System.String,``0)">
            <summary>
            Logs a value of <typeparamref name="T"/> in the parameter table.
            </summary>
            <typeparam name="T">The value's type.</typeparam>
            <param name="name">The value's name.</param>
            <param name="value">A value of type <typeparamref name="T"/>.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexObserve.ValueAtEndOfTest``1(System.String,``0)">
            <summary>
            Logs the value at the end of a test
            </summary>
            <typeparam name="T">The value's type.</typeparam>
            <param name="name">The value's name.</param>
            <param name="value">A value of type <typeparamref name="T"/>.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexObserve.Value``1(System.String,``0)">
            <summary>
            Logs a value for viewing and performs inline validation if the type is supported.
            </summary>
            <typeparam name="T">The value's type.</typeparam>
            <param name="name">The value's name.</param>
            <param name="value">A value of type <typeparamref name="T"/>.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexObserve.IsInlineValidationSupported(System.Type)">
            <summary>
            Determines whether inline validation can be applied to this type.
            </summary>
            <param name="type">The type.</param>
            <returns>Returns <c>true</c> if inline validation can be applied to <paramref name="type"/>
            and <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.PexObserve.Context">
            <summary>
            Gets the current observer context
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexObserve.Internal">
            <summary>
            Internal helper methods
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexObserve.Internal.AddParameter``1(System.String,``0)">
            <summary>
            Adds a parameter for logging
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexObserve.Internal.AddParameterForInlineValidation``1(System.String,``0)">
            <summary>
            Adds a parameter for logging and inline validation
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexObserve.InlineValidationLevel">
            <summary>
            Inline validation level
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.PexObserve.InlineValidationLevel.NotSupported">
            <summary>
            Inline validation not supported
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.PexObserve.InlineValidationLevel.Indirect">
            <summary>
            Indirect validation supported, e.g. through accessible fields and safe properties
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.PexObserve.InlineValidationLevel.Direct">
            <summary>
            Direct validation supported, e.g. the value has a primitive type
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexObserve.InlineValidation">
            <summary>
            Internal class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexObserve.InlineValidation.Initialize">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexObserve.InlineValidation.GetSupportLevel(Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Internal.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexObserve.InlineValidation.GetSupportLevel(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Internal.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexObserve.InlineValidation.SafeAddParameterForInlineValidation``1(System.String,``0)">
            <summary>
            Internal.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexObserve.InlineValidation.ContainsKey(System.String)">
            <summary>
            Internal.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexObserve.InlineValidation.TryGetValue(System.String,System.Object@)">
            <summary>
            Internal.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexObserve.FieldsAndProperties">
            <summary>
            Fields and properties
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.PexObserve.FieldsAndProperties.Fields">
            <summary>
            Fields
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.PexObserve.FieldsAndProperties.Properties">
            <summary>
            Properties
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexObserve.FieldsAndProperties.#ctor(Microsoft.ExtendedReflection.Metadata.Field[],Microsoft.ExtendedReflection.Metadata.Property[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.PexObserve.FieldsAndProperties"/> struct.
            </summary>
            <param name="fields">The fields.</param>
            <param name="properties">The properties.</param>
        </member>
        <member name="P:Microsoft.Pex.Framework.PexObserve.FieldsAndProperties.Any">
            <summary>
            Gets a value indicating whether this <see cref="T:Microsoft.Pex.Framework.PexObserve.FieldsAndProperties"/> 
            has any elements.
            </summary>
            <value><c>true</c> if any; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexObserve.Metadata">
            <summary>
            Metadata cache
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.PexObserve.Metadata.SafeAddParameterForInlineValidationMethod">
            <summary>
            Internal use
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.PexObserve.Metadata.SafeAddParameterMethod">
            <summary>
            Internal use
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexObserve.Metadata.GetDeclaredVisibleFieldsAndSafePropertyGetters(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Gets the declared visible fields and safe property getters.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexObserve.Metadata.GetVisibleFieldsAndSafePropertyGetters(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Gets the visible fields and safe property getters.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexObserve.Metadata.AddTypeProxy(Microsoft.ExtendedReflection.Metadata.TypeDefinition,Microsoft.ExtendedReflection.Metadata.TypeDefinition)">
            <summary>
            Maps a type to its proxy type
            </summary>
            <param name="type"></param>
            <param name="proxy"></param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexObserve.Metadata.TryGetTypeFromProxy(Microsoft.ExtendedReflection.Metadata.TypeDefinition,Microsoft.ExtendedReflection.Metadata.TypeDefinition@)">
            <summary>
            Tries to get the proxied type fromm a given type definition
            </summary>
            <param name="proxy"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexObserve.ValueWriterManager">
            <summary>
            A manager for value writers
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.PexObserve.ValueWriterManager.MaxWrittenElements">
            <summary>
            Maximum number of elements written per array
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.PexObserve.ValueWriterManager.Ellipse">
            <summary>
            Generic string when replacing a value
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexObserve.ValueWriterManager.AddValueWriterFactory(Microsoft.Pex.Framework.PexObserve.ValueWriterManager.IValueWriterFactory)">
            <summary>
            Adds a new value writer factory
            </summary>
            <param name="factory"></param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexObserve.ValueWriterManager.CanWriteValue(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Gets a value indicating whether the value writer
            can create pretty printed values for this parameter
            </summary>
            <param name="valueType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexObserve.ValueWriterManager.WriteValue(Microsoft.ExtendedReflection.Utilities.Safe.Text.SafeStringBuilder,System.Object)">
            <summary>
            Writes a given value to a pretty printed string
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexObserve.ValueWriterManager.WriteValue(System.Object)">
            <summary>
            Writes a given value to a pretty printed string
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexObserve.ValueWriterManager.ProtectedWriteValue(System.Object)">
            <summary>
            Writes a given value to a pretty printed string
            </summary>
            <remarks>
            This method runs in a protected context.
            </remarks>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexObserve.ValueWriterManager.SafeAddParameter(System.String,System.Object)">
            <summary>
            Internal use
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexObserve.ValueWriterManager.ValueWriterContext">
            <summary>
            Gets the current rendering context
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.PexObserve.ValueWriterManager.ValueWriterContext.Writer">
            <summary>
            Gets the string builder
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexObserve.ValueWriterManager.ValueWriterContext.WriteValue(System.Object)">
            <summary>
            Gets the default value writer for nested values
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexObserve.ValueWriterManager.ValueWriterContext.#ctor(Microsoft.ExtendedReflection.Utilities.Safe.Text.SafeStringBuilder)">
            <summary>
            Intializes a new instance of the value writer context
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexObserve.ValueWriterManager.ValueWriterDelegate">
            <summary>
            A delegate that writes a value to a string writer
            </summary>
            <param name="context"></param>
            <param name="value"></param>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexObserve.ValueWriterManager.IValueWriterFactory">
            <summary>
            A factory for value writers
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexObserve.ValueWriterManager.IValueWriterFactory.TryCreateValueWriter(Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.Pex.Framework.PexObserve.ValueWriterManager.ValueWriterDelegate@)">
            <summary>
            Tries to create a value writer for a
            given <paramref name="type"/>.
            </summary>
            <param name="type"></param>
            <param name="writer"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexObserve.PexObserveContext">
            <summary>
            A context object to observe and store values.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexObserve.PexObserveContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.PexObserve.PexObserveContext"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexObserve.PexObserveContext.#ctor(Microsoft.ExtendedReflection.Feedback.NamedValueCollection,Microsoft.Pex.Engine.GeneratedValues.PexObservedValueCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.PexObserve.PexObserveContext"/> class.
            </summary>
            <param name="generatedValues">The generated values.</param>
            <param name="observedValues">The observed values.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexObserve.PexObserveContext.Microsoft#Pex#Framework#Generated#IPexObserveContext#GetObservedValue``1(System.String)">
            <summary>
            Gets a named observed value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.PexObserve.PexObserveContext.GeneratedValues">
            <summary>
            Gets the generated values.
            </summary>
            <value>The generated values.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.PexObserve.PexObserveContext.ObservedValues">
            <summary>
            Gets the observed values.
            </summary>
            <value>The observed values.</value>
        </member>
        <member name="T:Microsoft.Pex.Framework.Exceptions.PexInconclusiveException">
            <summary>
            Exception indicating that a test is inconclusive
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Exceptions.PexException">
            <summary>
            Base class for all Pex exceptions
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Exceptions.PexException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Exceptions.PexException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Exceptions.PexException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Exceptions.PexException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Exceptions.PexException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Exceptions.PexException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Exceptions.PexException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Exceptions.PexException"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Exceptions.PexInconclusiveException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Exceptions.PexInconclusiveException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Exceptions.PexInconclusiveException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Exceptions.PexInconclusiveException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Exceptions.PexInconclusiveException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Exceptions.PexInconclusiveException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Exceptions.PexInconclusiveException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Exceptions.PexInconclusiveException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Microsoft.Pex.Framework.Explorable.PexExplorableFromConstructorAndSettersAttribute">
            <summary>
            Explorable from constructor and setters
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Explorable.PexExplorableFromMethodAttribute">
            <summary>
            Attribute to define how instances of a particular type can be created
            by using property setters and setter methods to set field values
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Explorable.PexExplorableAttributeBase">
            <summary>
            Attribute to define how instances of a particular type can be created by exploring a (parameterized) method
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexExplorableAttributeBase.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Explorable.PexExplorableAttributeBase"/> class.
            </summary>
            <param name="explorableType">Type of the explorable.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexExplorableAttributeBase.TryCreateExplorable(Microsoft.Pex.Engine.ComponentModel.IPexComponent,Microsoft.Pex.Engine.Explorable.IPexExplorable@)">
            <summary>
            Creates the explorable instance
            </summary>
            <param name="host">The host.</param>
            <param name="explorable">The explorable.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexExplorableAttributeBase.BeforeExploration(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent)">
            <summary>
            Callback that is executed before the exploration starts.
            </summary>
            <param name="host">The host.</param>
            <returns>some data</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexExplorableAttributeBase.AfterExploration(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,System.Object)">
            <summary>
            Callback that is executed after the exploration ends.
            </summary>
            <param name="host">The host.</param>
            <param name="data">The data returned by BeforeExploration.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexExplorableAttributeBase.Load(Microsoft.ExtendedReflection.ComponentModel.IContainer)">
            <summary>
            This method provides the opportunity install or substitute services.
            </summary>
            <param name="explorationContainer">The exploration container.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexExplorableAttributeBase.Initialize(Microsoft.Pex.Engine.ComponentModel.IPexExplorationEngine)">
            <summary>
            Initializes the specified exploration package. May interact with services.
            </summary>
            <param name="host">The host.</param>
        </member>
        <member name="P:Microsoft.Pex.Framework.Explorable.PexExplorableAttributeBase.ExplorableType">
            <summary>
            Gets the type to be created by exploration.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexExplorableFromMethodAttribute.#ctor(System.Type,System.Type,System.String,System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Explorable.PexExplorableFromMethodAttribute"/> class.
            </summary>
            <param name="explorableType">Type which can be constructed by exploring a (parameterized) Method.</param>
            <param name="explorationMethodDeclaringType">Type which declares the method which should be explored.</param>
            <param name="explorationMethodName">Name of the exploration method.</param>
            <param name="explorationMethodParameterTypes">The exploration method parameter types; or null for any types.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexExplorableFromMethodAttribute.#ctor(System.Type,System.String,System.Type,System.String,System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Explorable.PexExplorableFromMethodAttribute"/> class.
            </summary>
            <param name="explorableTypeAssembly">The explorable type assembly.</param>
            <param name="explorableTypeFullName">Type which can be constructed by exploring a (parameterized) Method.</param>
            <param name="explorationMethodDeclaringType">Type which declares the method which should be explored.</param>
            <param name="explorationMethodName">Name of the exploration method.</param>
            <param name="explorationMethodParameterTypes">The exploration method parameter types; or null for any types.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexExplorableFromMethodAttribute.#ctor(System.Type,System.Reflection.MethodBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Explorable.PexExplorableFromMethodAttribute"/> class.
            </summary>
            <param name="explorableType">Type of the explorable.</param>
            <param name="explorationMethod">The exploration method.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexExplorableFromMethodAttribute.ValidateExplorationMethod(Microsoft.Pex.Engine.Logging.IPexLog,Microsoft.ExtendedReflection.Metadata.ICustomAttributeProviderEx,Microsoft.ExtendedReflection.Metadata.VisibilityContext)">
            <summary>
            Validates the exploration method.
            </summary>
            <param name="log">The log.</param>
            <param name="target">The target.</param>
            <param name="visibilityContextOfGeneratedTests">The visibility context of generated tests.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexExplorableFromMethodAttribute.Validate(Microsoft.Pex.Engine.Logging.IPexLog,Microsoft.ExtendedReflection.Metadata.ICustomAttributeProviderEx,Microsoft.ExtendedReflection.Metadata.VisibilityContext)">
            <summary>
            Validates the attribute in a particular visibility context.
            </summary>
            <param name="log">The log.</param>
            <param name="target">The target.</param>
            <param name="visibilityContextOfGeneratedTests">The visibility context of generated tests.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexExplorableFromMethodAttribute.TryCreateExplorable(Microsoft.Pex.Engine.ComponentModel.IPexComponent,Microsoft.Pex.Engine.Explorable.IPexExplorable@)">
            <summary>
            Creates the explorable instance
            </summary>
            <param name="host">The host.</param>
            <param name="explorable">The explorable.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexExplorableFromMethodAttribute.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.Explorable.PexExplorableFromMethodAttribute.ExplorationMethod">
            <summary>
            Gets the exploration method.
            </summary>
            <value>The exploration method.</value>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexExplorableFromConstructorAndSettersAttribute.#ctor(System.Type,System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Explorable.PexExplorableFromConstructorAndSettersAttribute"/> class.
            </summary>
            <param name="explorableType">Type of the explorable.</param>
            <param name="constructorParameterTypes">The constructor parameter types.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexExplorableFromConstructorAndSettersAttribute.TryCreateExplorable(Microsoft.Pex.Engine.ComponentModel.IPexComponent,Microsoft.Pex.Engine.Explorable.IPexExplorable@)">
            <summary>
            Creates the explorable instance
            </summary>
            <param name="host">The host.</param>
            <param name="explorable">The explorable.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.Explorable.PexExplorableFromConstructorAndSettersAttribute.FieldsToConsider">
            <summary>
            Which fields should be considered to create instances (default: all)
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Framework.Explorable.PexExplorableFromConstructorAndSettersAttribute.PropertiesToConsider">
            <summary>
            Which properties should be considered to create instances (default: all)
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Generated.IPexRaisedExceptionSource">
            <summary>
            Pex raised exception source
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Framework.Generated.IPexRaisedExceptionSource.ExceptionType">
            <summary>
            Gets the type of the exception.
            </summary>
            <value>The type of the exception.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Generated.IPexRaisedExceptionSource.ExceptionState">
            <summary>
            Gets the state of the exception.
            </summary>
            <value>The state of the exception.</value>
        </member>
        <member name="T:Microsoft.Pex.Framework.Generated.PexRaisedExceptionAttribute">
            <summary>
            Decorates a generated test with the 'unexpected' exception
            that the test raises.
            </summary>
            <remarks>
            This attribute is not intended to be used by customer. Pex will 
            use this attribute to mark generated tests.
            </remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.PexRaisedExceptionAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Generated.PexRaisedExceptionAttribute"/> class.
            </summary>
            <param name="exceptionType">Type of the exception.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.PexRaisedExceptionAttribute.#ctor(System.Type,Microsoft.Pex.Engine.Exceptions.PexExceptionState)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Generated.PexRaisedExceptionAttribute"/> class.
            </summary>
            <param name="exceptionType">Type of the exception.</param>
            <param name="exceptionState">state of the exception</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.PexRaisedExceptionAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Generated.PexRaisedExceptionAttribute"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.PexRaisedExceptionAttribute.#ctor(System.Type,System.String,Microsoft.Pex.Engine.Exceptions.PexExceptionState)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Generated.PexRaisedExceptionAttribute"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.PexRaisedExceptionAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Generated.PexRaisedExceptionAttribute"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.PexRaisedExceptionAttribute.#ctor(System.String,System.String,Microsoft.Pex.Engine.Exceptions.PexExceptionState)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Generated.PexRaisedExceptionAttribute"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.PexRaisedExceptionAttribute.TryReadException(Microsoft.ExtendedReflection.Metadata.ICustomAttributeProviderEx,Microsoft.Pex.Framework.Generated.IPexRaisedExceptionSource@)">
            <summary>
            Tries to read the exception from the attribute provider.
            </summary>
            <param name="attributeProvider">The attribute p rovider.</param>
            <param name="raisedException">The raised exception.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.Generated.PexRaisedExceptionAttribute.ExceptionType">
            <summary>
            Gets the type of the exception.
            </summary>
            <value>The type of the exception.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Generated.PexRaisedExceptionAttribute.ExceptionState">
            <summary>
            Gets the state of the exception.
            </summary>
            <value>The state of the exception.</value>
        </member>
        <member name="T:Microsoft.Pex.Framework.Generated.PexRaisedExceptionAttribute.Metadata">
            <summary>
            Metadata elements related to PexRaisedExceptionAttributeCtors
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Generated.PexRaisedExceptionAttribute.Metadata.PexRaisedExceptionAttributeCtors">
            <summary>
            Constructor picker
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Generated.PexRaisedExceptionAttribute.Metadata.PexRaisedExceptionAttributeCtorsExceptionState">
            <summary>
            Constructor picker with PexException State overload
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Generated.PexRaisedExceptionAttribute.Metadata.PexRaisedContractExceptionAttributeCtorExceptionState">
            <summary>
            Constructor picker with contract exception
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Generated.PexRaisedExceptionAttribute.Metadata.PexRaisedContractExceptionAttributeCtor">
            <summary>
            Constructor picker with contract exception
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.PexRaisedExceptionAttribute.Metadata.CreateAttribute(Microsoft.ExtendedReflection.Metadata.VisibilityContext,Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.Pex.Engine.Exceptions.PexExceptionState)">
            <summary>
            Picks the best constructor overload based on the exception visibilty, type
            </summary>
            <param name="visibility"></param>
            <param name="exceptionType"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.Generated.PexRaisedContractExceptionAttribute">
            <summary>
            A contract exception was raised
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.PexRaisedContractExceptionAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Generated.PexRaisedContractExceptionAttribute"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.PexRaisedContractExceptionAttribute.#ctor(Microsoft.Pex.Engine.Exceptions.PexExceptionState)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Generated.PexRaisedContractExceptionAttribute"/> class.
            </summary>
            <param name="exceptionState">State of the exception.</param>
        </member>
        <member name="T:Microsoft.Pex.Framework.Generated.IPexComprehensionChoiceSessionBuilder">
            <summary>
            This interface is used to define the behavior of mock objects
            at the beginning of a test.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Generated.IPexMethodCallChoiceSessionBuilder">
            <summary>
            This interface is used to define the behavior of mock objects
            at the beginning of a test.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Generated.IPexChoiceSessionBuilder">
            <summary>
            This interface is used to define the behavior of mock objects
            at the beginning of a test.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.IPexChoiceSessionBuilder.At(System.Int32,System.String,System.Object)">
            <summary>
            Sets a free choice.
            </summary>
            <param name="index">The index.</param>
            <param name="description">The description.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.IPexMethodCallChoiceSessionBuilder.ExpectParameter(System.Int32,System.Object)">
            <summary>
            Sets an expected parameter value.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.IPexMethodCallChoiceSessionBuilder.ValueAtReturn(System.Int32,System.Object)">
            <summary>
            Sets an expected out-parameter value.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.IPexMethodCallChoiceSessionBuilder.Returns(System.Object)">
            <summary>
            Sets a result value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.IPexMethodCallChoiceSessionBuilder.Throws(System.Boolean)">
            <summary>
            Sets whether the method should throw an exception.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.IPexMethodCallChoiceSessionBuilder.Thrown(System.Exception)">
            <summary>
            Sets whether the method should throw an exception.
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.IPexComprehensionChoiceSessionBuilder.IsDone(System.Boolean)">
            <summary>
            Sets whether the comprehension building is done
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.IPexComprehensionChoiceSessionBuilder.BoundVariableValue(System.Object)">
            <summary>
            Sets the value of the bound variable
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.Generated.IPexChoiceRecorder">
            <summary>
            Interface for building an oracle execution
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.IPexChoiceRecorder.NextSegment(System.Int32)">
            <summary>
            notifies that a new invocation segment is about to start
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.IPexChoiceRecorder.Session(System.Int32,System.String)">
            <summary>
            Gets the oracle builder for a session.
            </summary>
            <param name="time">The time of the session.</param>
            <param name="description">The description of the session.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.IPexChoiceRecorder.OnCall(System.Int32,System.String)">
            <summary>
            Retrieves an oracle builder for a given method.
            </summary>
            <param name="time">The time.</param>
            <param name="methodId">The method id.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.IPexChoiceRecorder.OnComprehension(System.Int32,System.String)">
            <summary>
            Retrieves an oracle builder for a given comprehenion
            </summary>
            <param name="time">The time.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.IPexChoiceRecorder.OnInjection(System.Int32,System.Int32,System.String)">
            <summary>
            Retrieves an oracle builder for a given injection.
            </summary>
            <param name="time">The time.</param>
            <param name="codeLabel">The code label.</param>
            <param name="methodId">The method id.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.Generated.IPexChoiceRecorder.DefaultSession">
            <summary>
            Gets the default oracle builder session
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Packages.IPexPackageAssemblyProvider">
            <summary>
            Instance that provides additional package assemblies
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Packages.IPexPackageAssemblyProvider.GetPackageAssemblies">
            <summary>
            Gets a list of assemblies containing additional packages
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.PathExecution.IPathSegmentCallbacks">
            <summary>
            Path segment callbacks
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.PathExecution.IPathSegmentCallbacks.PathStarted(Microsoft.ExtendedReflection.Interpretation.States.IState)">
            <summary>
            Marks the begin of a path.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.PathExecution.IPathSegmentCallbacks.SetCurrentSequenceId(Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.ISequenceId)">
            <summary>
            Sets the current sequence id.
            </summary>
            <param name="sequenceId"></param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PathExecution.IPathSegmentCallbacks.NextSegment(Microsoft.ExtendedReflection.Interpretation.States.IState)">
            <summary>
            A path condition is a sequence of conjuncts; this sequence can be split into segments.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.PathExecution.IPathSegmentCallbacks.PathFinished(Microsoft.ExtendedReflection.Interpretation.States.IState)">
            <summary>
            Marks the end of the path.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.PathExecution.IPathSegmentCallbacks.UninstrumentedCall(System.Int32,Microsoft.ExtendedReflection.Metadata.IMethodSignature,Microsoft.ExtendedReflection.Interpretation.Term[])">
            <summary>
            Logs an uninstrumented call.
            </summary>
            <param name="codeLabel">The code label.</param>
            <param name="signature">The signature.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="T:Microsoft.Pex.Engine.PathExecution.PexPathExecutionResult">
            <summary>
            Path execution result
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.PathExecution.IPexPathExecutionResult">
            <summary>
            Pex path execucution result
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.PathExecution.IPexPathExecutionResult.Kind">
            <summary>
            Gets the path execution result kind.
            </summary>
            <value>The kind.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PathExecution.IPexPathExecutionResult.IsDuplicatePath">
            <summary>
            Gets a value indicating whether this execution path has been observed before.
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PathExecution.PexPathExecutionResult.BranchCoverage">
            <summary>
            The branch coverage.
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PathExecution.PexPathExecutionResult.Path">
            <summary>
            The execution path.
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PathExecution.PexPathExecutionResult.NodeToRetryOrAbandon">
            <summary>
            If this path did not execute to the end,
            this field indicates the execution node
            which must be tried or abandoned.
            Otherwise, this field is null.
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PathExecution.PexPathExecutionResult.Invocations">
            <summary>
            List of method invocations.
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PathExecution.PexPathExecutionResult.Substitution">
            <summary>
            Substitution.
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PathExecution.PexPathExecutionResult.Exception">
            <summary>
            Exception, if any.
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PathExecution.PexPathExecutionResult.ExceptionType">
            <summary>
            Exception type, if any.
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PathExecution.PexPathExecutionResult.ExceptionTerm">
            <summary>
            Exception term, if any.
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PathExecution.PexPathExecutionResult.ExecutedInvocations">
            <summary>
            Number of executed <see cref="F:Microsoft.Pex.Engine.PathExecution.PexPathExecutionResult.Invocations"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.PathExecution.PexPathExecutionResult.#ctor(Microsoft.Pex.Engine.PathExecution.PexPathExecutionResultKind,Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode,Microsoft.ExtendedReflection.Coverage.IBranchCoverage,System.Boolean,System.Boolean,Microsoft.Pex.Engine.ExecutionNodes.IPexExecutionPath,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.Pex.Engine.MethodInvocations.PexMethodInvocation},Microsoft.ExtendedReflection.Interpretation.ISubstitution,System.Exception,Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.ExtendedReflection.Interpretation.Term,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.PathExecution.PexPathExecutionResult"/> struct.
            </summary>
            <param name="kind">The kind.</param>
            <param name="nodeToRetryOrAbandon">The node to retry or abandon.</param>
            <param name="branchCoverage">The branch coverage.</param>
            <param name="isDuplicatePath">if set to <c>true</c> [is duplicate path].</param>
            <param name="isDuplicateException">if set to <c>true</c> [is duplicate exception].</param>
            <param name="path">The path.</param>
            <param name="invocations">The invocations.</param>
            <param name="substitution">The substitution.</param>
            <param name="exception">The exception.</param>
            <param name="exceptionType">Type of the exception.</param>
            <param name="exceptionTerm">The exception term.</param>
            <param name="executedInvocations">The executed invocations.</param>
        </member>
        <member name="P:Microsoft.Pex.Engine.PathExecution.PexPathExecutionResult.Kind">
            <summary>
            Gets the path execution result kind.
            </summary>
            <value>The kind.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PathExecution.PexPathExecutionResult.IsDuplicatePath">
            <summary>
            Gets a value indicating whether this execution path has been observed before.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.PathExecution.PexPathExecutionResult.IsDuplicateException">
            <summary>
            Gets a value indicating whether the stack trace of the exception (if any) has been observed before.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.PexCodeUpdate">
            <summary>
            Various things about updates
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexCodeUpdate.PreConditionTag">
            <summary>
            Tag used in fixit
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexCodeUpdate.AttributeFileNameHint">
            <summary>
            Default file name to drop pex assembly level attributes.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.PexFrameworkEnvironmentSettings">
            <summary>
            Static class with environment settings
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexFrameworkEnvironmentSettings.FSharpDisablePackagesVariable">
            <summary>
            Name of the environment variable to disable F# packages
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexFrameworkEnvironmentSettings.MaxWrittenArrayElements">
            <summary>
            How many array elements to write at most.
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexFrameworkEnvironmentSettings.MaxMetadataNameLength">
            <summary>
            The maximum length of generated metadata names such as type names, method names, etc...")
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexFrameworkEnvironmentSettings.MaxTestNameLength">
            <summary>
            The maximum length of generated unit test names
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexFrameworkEnvironmentSettings.FSharpDisablePackages">
            <summary>
            Disables the F# built-in packages
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexFrameworkEnvironmentSettings.ContractsDisablePackages">
            <summary>
            Disables the Contracts built-in packages
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexFrameworkEnvironmentSettings.DumpDetours">
            <summary>
            Logs each detour taken by the program
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexFrameworkEnvironmentSettings.ExtensiveDisposableContext">
            <summary>
            Whether to enable extensive additions to the PexDisposableContext
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexFrameworkEnvironmentSettings.DumpCoverageFilters">
            <summary>
            Logs the coverage filter information
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.PexGeneratedTestResultStatus">
            <summary>
            Generated test result status
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexGeneratedTestResultStatus.NormalTermination">
            <summary>
            Normal termination
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexGeneratedTestResultStatus.Exception">
            <summary>
            Exception
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexGeneratedTestResultStatus.ExpectedException">
            <summary>
            Expected exception
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexGeneratedTestResultStatus.InconclusiveException">
            <summary>
            Inconclusive exception
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexGeneratedTestResultStatus.MissingException">
            <summary>
            Missing exception
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexGeneratedTestResultStatus.PathBoundsExceeded">
            <summary>
            PathBoundsExceeded
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexGeneratedTestResultStatus.AssumptionViolation">
            <summary>
            Assumption violation
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexGeneratedTestResultStatus.Retry">
            <summary>
            Retry
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexGeneratedTestResultStatus.MinimizationRequest">
            <summary>
            Minimization request
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexGeneratedTestResultStatus.SystemEnvironmentExit">
            <summary>
            System.Environment.Exit call
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexGeneratedTestResultStatus.DuplicatePath">
            <summary>
            Duplicate path
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.PexResult">
            <summary>
            Result on an execution path
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexResult.State">
            <summary>
            Result state.
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexResult.Duration">
            <summary>
            Duration.
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexResult.ConsoleOutput">
            <summary>
            Console output
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexResult.ConsoleError">
            <summary>
            Console error output
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexResult.Trace">
            <summary>
            Trace output
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexResult.#ctor(Microsoft.Pex.Engine.PexResultState,System.Double,Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeResourceAwareString,Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeResourceAwareString,Microsoft.ExtendedReflection.Utilities.Safe.IO.SafeResourceAwareString)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.PexResult"/> class.
            </summary>
            <param name="state">The state.</param>
            <param name="duration">The duration.</param>
            <param name="consoleOutput">The console output.</param>
            <param name="consoleError">The console error.</param>
            <param name="trace">The trace output</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexResult.Dump(Microsoft.ExtendedReflection.Logging.DumpTreeWriter,System.String)">
            <summary>
            Dump result to tree writer
            </summary>
            <param name="writer"></param>
            <param name="title"></param>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexResult.HasOutput">
            <summary>
            Gets a value indicating whether this result has output.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Reflection.IPexReflector">
            <summary>
            A Pex reflector
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Reflection.IPexReflector.Reflect(Microsoft.Pex.Engine.PexAssembly,Microsoft.ExtendedReflection.Metadata.AssemblyEx)">
            <summary>
            Reflects the specified assembly.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="testAssembly">The test assembly.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Reflection.IPexReflector.GetAssemblyBuilders">
            <summary>
            Retrieves auxiliary assembly definition builders;
            the reflected explorations might refer to these assemblies.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.Search.IObjectExplorationSequenceId">
            <summary>
            A sequence id that represents a method call 
            that is part of the creation of an object by exploration
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.Search.IObjectExplorationSequenceId.ExplorableSequence">
            <summary>
            Gets the explorable sequence
            </summary>
            <value>The explorable sequence.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Search.IObjectExplorationSequenceId.Index">
            <summary>
            Number indicating how many object explorations are before this instance
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.Search.IObjectExplorationSequenceId.MutatorIndex">
            <summary>
            Gets the mutator index; -1 indicates <see cref="P:Microsoft.Pex.Engine.Explorable.IPexExplorableSequence.ExplorationMethod"/>;
            non-negative values are indices into <see cref="P:Microsoft.Pex.Engine.Explorable.IPexExplorableSequence.MutationMethods"/>.
            </summary>
            <value>The index.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Search.IObjectExplorationSequenceId.Distance">
            <summary>
            Number indicating the distance to the root exploration sequence id.
            </summary>
            <value>The distance.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.Search.IPexSearcher">
            <summary>
            Searcher
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Search.IPexSearcher.GetNextExecutionSignatureIndex">
            <summary>
            Obtains a unique index that is used to identify execution signatures.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Search.IPexSearcher.GetPathEngines">
            <summary>
            Gets all relevant path engines. 
            These engines are enumerated lazily, as the execution graph fills up.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Search.IPexSearcher.Abandon(Microsoft.Pex.Engine.PathExecution.PexPathExecutionResult,Microsoft.Pex.Engine.Strategies.PexPathAbandoningReason)">
            <summary>
            Marks an execution path as abandoned.
            </summary>
            <param name="methodExecutionResult"></param>
            <param name="reason"></param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Search.IPexSearcher.Final(Microsoft.Pex.Engine.PathExecution.PexPathExecutionResult,System.Boolean)">
            <summary>
            Marks an execution path as final (and neither abandoned not retry).
            </summary>
            <param name="methodExecutionResult"></param>
            <param name="productive"></param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Search.IPexSearcher.Retry(Microsoft.Pex.Engine.PathExecution.PexPathExecutionResult)">
            <summary>
            Indicates that an execution path should be tried again later.
            </summary>
            <param name="methodExecutionResult"></param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Search.IPexSearcher.AddException(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Adds an exception type to a list. Returns true iff the exception type was added for the first time.
            </summary>
            <param name="exceptionType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Search.IPexSearcher.AddSuccessfulPrefix(Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionSignature,System.Int32)">
            <summary>
            Indicates that a prefix of an execution signature was executed successfully.
            </summary>
            <param name="signature"></param>
            <param name="prefixLength"></param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Search.IPexSearcher.Publish">
            <summary>
            Called when the search is over.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Search.IPexSearcher.DumpStatistics(Microsoft.ExtendedReflection.Logging.DumpTreeWriter)">
            <summary>
            Dumps statistics.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Microsoft.Pex.Engine.Search.IPexSearcher.InitialExecutionSignature">
            <summary>
            Gets the initial execution signature.
            </summary>
            <value>The initial execution signature.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Search.IPexSearcher.InitialNode">
            <summary>
            Gets the initial execution node associated with the <see cref="P:Microsoft.Pex.Engine.Search.IPexSearcher.InitialExecutionSignature"/>.
            </summary>
            <value>The initial node.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Search.IPexSearcher.ExecutionGraphBuilder">
            <summary>
            The execution graph builder.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.Search.IPexSearcher.ExplorationStrategy">
            <summary>
            The exploration strategy.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.Search.IPexSearcher.InputEnumerator">
            <summary>
            The input enumerator.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Exceptions.IPexExceptionValidator">
            <summary>
            An <see cref="T:System.Exception"/> validator
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Exceptions.IPexExceptionValidator.Validate(System.Exception,System.String@,System.String@)">
            <summary>
            Validates the specified exception.
            </summary>
            <param name="exception">The exception.</param>
            <param name="message">optional; may provide more information about why the validator came to its conclusion</param>
            <param name="wikiTopic">optional; may provide more information</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Exceptions.IPexExceptionValidator.MarkTest(System.Exception,Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder)">
            <summary>
            Gets the opportunity to annotate the test with more information about the exception
            </summary>
            <param name="exception">caught exception if any; otherwise a null reference.</param>
            <param name="testMethod"></param>
        </member>
        <member name="P:Microsoft.Pex.Engine.Exceptions.IPexExceptionValidator.Description">
            <summary>
            Describes what this validator does; optional
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Exceptions.IPexExceptionManager">
            <summary>
            A manager of a set of validators.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Exceptions.IPexExceptionManager.AddAssumptionExceptionValidator(Microsoft.Pex.Engine.Exceptions.IPexAssumptionExceptionValidator)">
            <summary>
            Adds the specified valitor
            </summary>
            <param name="validator">The validator.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Exceptions.IPexExceptionManager.IsAssumption(System.Exception)">
            <summary>
            Determines whether <paramref name="ex"/> is an assumption
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Exceptions.IPexExceptionManager.AddExceptionValidator(Microsoft.Pex.Engine.Exceptions.IPexExceptionValidator)">
            <summary>
            Adds the specified validator.
            </summary>
            <param name="validator">The validator.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Exceptions.IPexExceptionManager.Validate(System.Exception,Microsoft.Pex.Engine.Exceptions.IPexExceptionValidator@,System.String@,System.String@)">
            <summary>
            Validates the specified exception.
            </summary>
            <param name="exception">The exception.</param>
            <param name="validator">The validator that validated, if any.</param>
            <param name="failureText">The failure text.</param>
            <param name="failureWikiTopic">The failure wiki topic.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.Exceptions.PexExceptionState">
            <summary>
            Defines the different state of an exception caught during a test
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Exceptions.PexExceptionState.Unknown">
            <summary>
            Unkown state
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Exceptions.PexExceptionState.Expected">
            <summary>
            The exception was expected
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Exceptions.PexExceptionState.Inconclusive">
            <summary>
            The exception denotes an inconclusive test
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Exceptions.PexExceptionState.Unexpected">
            <summary>
            The exception was unexpected
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Explorable.IPexExplorableManager">
            <summary>
            Manager of explorable types
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.IPexExplorableManager.LogExplorableInsufficiency(Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Logs an explorable insufficiency.
            </summary>
            <param name="executionNode">The execution node that we couldn't flip.</param>
            <param name="explorableType">Explorable type whose factory was insufficient.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.IPexExplorableManager.AddExplorableInsufficienyObserver(Microsoft.Pex.Engine.Explorable.IPexExplorableInsufficienyObserver)">
            <summary>
            Adds an explorable insufficieny observer.
            </summary>
            <param name="observer">The observer.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.IPexExplorableManager.AddExplorableCandidate(Microsoft.Pex.Engine.Explorable.PexExplorableCandidate)">
            <summary>
            Adds an explorable candidate.
            </summary>
            <param name="candidate">The candidate.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.IPexExplorableManager.AddExplorable(Microsoft.Pex.Engine.Explorable.IPexExplorable)">
            <summary>
            Adds an explorable type.
            </summary>
            <param name="explorable">The explorable.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.IPexExplorableManager.AddExplorableStrategy(Microsoft.Pex.Engine.Explorable.IPexExplorableStrategy)">
            <summary>
            Adds an explorable strategy.
            </summary>
            <param name="strategy">The strategy.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.IPexExplorableManager.AddExplorableMutatorFactory(Microsoft.Pex.Engine.Explorable.IPexExplorableMutatorFactory)">
            <summary>
            Adds an explorable mutator factory.
            </summary>
            <param name="mutator">The mutator.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.IPexExplorableManager.IsExplorable(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Determines whether the specified explorable type is explorable.
            </summary>
            <param name="explorableType">Type of the explorable.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.IPexExplorableManager.TryGetExplorables(Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.Pex.Engine.Explorable.IPexExplorable}@)">
            <summary>
            Tries to the get explorable.information for a given explorable type.
            </summary>
            <param name="explorableType">Type of the explorable.</param>
            <param name="explorables">The explorables.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.IPexExplorableManager.GetExplorableMutators(Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Gets a list of explorable mutators for a given type.
            </summary>
            <param name="explorableType">Type of the explorable.</param>
            <param name="targetMethod">The target method.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.IPexExplorableManager.TryGetExplorableStrategy(Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.Pex.Engine.Explorable.IPexExplorableStrategy@)">
            <summary>
            Tries to get an explorable strategy for a given type.
            </summary>
            <param name="type">The type.</param>
            <param name="explorableStrategy">The explorable strategy.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.Explorable.IPexExplorableMutator">
            <summary>
            Pex explorable mutator
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.Explorable.IPexExplorableMutator.ExplorableType">
            <summary>
            Gets the explorable type
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.Explorable.IPexExplorableMutator.InstanceMethod">
            <summary>
            Gets the mutating instance method.
            </summary>
            <value>The instance method.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.Explorable.IPexExplorableMutatorFactory">
            <summary>
            A factory of IPexExplorableMutator
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.IPexExplorableMutatorFactory.GetMutatorProvider(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Gets the explorable mutators.
            </summary>
            <param name="host">The host.</param>
            <param name="explorableType">Type of the explorable.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.Explorable.IPexExplorableSequence">
            <summary>
            Explorable sequence
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.IPexExplorableSequence.TryCreateCode(Microsoft.Pex.Engine.Explorable.IPexExplorableCreateCodeContext)">
            <summary>
            If no custom code expression can be created, the <see cref="P:Microsoft.Pex.Engine.Explorable.IPexExplorableSequence.ExplorationMethod"/> will be used.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.Explorable.IPexExplorableSequence.ExplorableType">
            <summary>
            Gets the explorable type.
            </summary>
            <value>The type of the explorable.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Explorable.IPexExplorableSequence.ExplorationMethod">
            <summary>
            Gets the exploration method.
            </summary>
            <value>The exploration method.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Explorable.IPexExplorableSequence.MutationMethods">
            <summary>
            Gets the list of mutation methods.
            </summary>
            <value>The mutation methods.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.Explorable.IPexExplorableStrategy">
            <summary>
            Pex explorable strategy
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.IPexExplorableStrategy.CanCreateSession(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Determines whether this strategy can create a session for the given explorable type.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.IPexExplorableStrategy.CreateSession(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Creates the session.
            </summary>
            <param name="host">The host.</param>
            <param name="explorableType">Explorable type.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.Explorable.IPexExplorableStrategySession">
            <summary>
            Explorable strategy session
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.IPexExplorableStrategySession.GetSequences(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Gets the sequences.
            </summary>
            <param name="targetMethod">The target method.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.Explorable.IPexExplorableStrategySession.ExplorableType">
            <summary>
            Gets the explorable type.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Explorable.IPexExplorableTypeMutatorProvider">
            <summary>
            Pex explorable type mutator provider
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.IPexExplorableTypeMutatorProvider.GetExplorableMutators(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Gets the explorable mutators.
            </summary>
            <param name="targetMethod">The target method.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.Explorable.IPexExplorableTypeMutatorProvider.ExplorableType">
            <summary>
            Gets the explorable type.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Explorable.PexExplorableCollection">
            <summary>
            Collection of explorables
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Explorable.PexExplorableStrategySessionBase">
            <summary>
            Base class of explorable strategy sessions
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableStrategySessionBase.#ctor(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.Explorable.PexExplorableStrategySessionBase"/> class.
            </summary>
            <param name="host">The host.</param>
            <param name="explorableType">Type of the explorable.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableStrategySessionBase.GetSequences(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Gets the sequences.
            </summary>
            <param name="targetMethod">The target method.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableStrategySessionBase.GetSequences(Microsoft.Pex.Engine.Explorable.IPexExplorable,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.Pex.Engine.Explorable.IPexExplorableMutator})">
            <summary>
            Gets the sequences.
            </summary>
            <param name="explorable">The explorable.</param>
            <param name="mutators">The mutators.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.Explorable.PexExplorableStrategySessionBase.ExplorableType">
            <summary>
            Gets the type of the explorable.
            </summary>
            <value>The type of the explorable.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.Exploration.IPexExplorationsManager">
            <summary>
            Manager of explorations
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Exploration.IPexExplorationsManager.AddExplorationFactory(Microsoft.Pex.Engine.Exploration.IPexExplorationFactory)">
            <summary>
            Adds an exploration factory
            </summary>
            <param name="explorationFactory"></param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Exploration.IPexExplorationsManager.TryGetExplorationFactory(Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.Pex.Engine.Exploration.IPexExplorationFactory@)">
            <summary>
            Tries to find the exploration factory in the given attribute.
            </summary>
            <param name="attributeType">The attribute type.</param>
            <param name="factory">The exploration factory.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Exploration.IPexExplorationsManager.CreateExplorations(Microsoft.Pex.Framework.PexExplorationAttributeBase,Microsoft.Pex.Engine.PexFixture,Microsoft.ExtendedReflection.Metadata.MethodDefinition)">
            <summary>
            Creates explorations.
            </summary>
            <param name="attribute">The attribute.</param>
            <param name="fixture">The fixture.</param>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.Exploration.IPexExplorationsManager.ExplorationFactories">
            <summary>
            Gets the exploration factories.
            </summary>
            <value>The exploration factories.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.Drivers.IPexPathDriver">
            <summary>
            Pex path driver
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Drivers.IPexPathDriver.Run(System.Object)">
            <summary>
            Runs an execution path.
            </summary>
            <param name="concreteFixtureObject">The concrete fixture object.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.Drivers.IPexPathDriver.PathID">
            <summary>
            Gets a unique string identifier for the current path
            </summary>
        </member>
        <member name="E:Microsoft.Pex.Engine.Drivers.IPexPathDriver.BeforeRun">
            <summary>
            Raised before executing the path
            </summary>
        </member>
        <member name="E:Microsoft.Pex.Engine.Drivers.IPexPathDriver.AfterRun">
            <summary>
            Raised after executing the path
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Filters.IPexFilterManager">
            <summary>
            Filter manager
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.Filters.IPexFilterManager.FixtureFilter">
            <summary>
            Gets the fixture filter.
            </summary>
            <value>The fixture filter.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Filters.IPexFilterManager.ExplorationFilter">
            <summary>
            Gets the exploration filter.
            </summary>
            <value>The exploration filter.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Filters.IPexFilterManager.WizardTypeFilter">
            <summary>
            Gets the wizard type filter.
            </summary>
            <value>The wizard type filter.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Filters.IPexFilterManager.WizardMemberFilter">
            <summary>
            Gets the wizard member filter.
            </summary>
            <value>The wizard member filter.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.Creatable.IPexCreatableManager">
            <summary>
            Manager of creatable types
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Creatable.IPexCreatableManager.AddCreatableDefinition(Microsoft.Pex.Engine.Creatable.IPexCreatableDefinition)">
            <summary>
            Adds the creatable.
            </summary>
            <param name="creatable">The creatable.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Creatable.IPexCreatableManager.AddCreatable(Microsoft.Pex.Engine.Creatable.IPexCreatable)">
            <summary>
            Adds the creatable.
            </summary>
            <param name="creatable">The creatable.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Creatable.IPexCreatableManager.IsCreatable(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Determines whether the specified type is creatable.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Creatable.IPexCreatableManager.TryGetCreatable(Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.Pex.Engine.Creatable.IPexCreatable@)">
            <summary>
            Tries to get the creatable information of a given type.
            </summary>
            <param name="type">The type.</param>
            <param name="creatable">The creatable.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.Creatable.IPexCreatableManager.VisibilityContext">
            <summary>
            Visibility context in which objects are created
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.IPexCurrentAssemblyProvider">
            <summary>
            Provides the current test Pex assembly
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.IPexCurrentAssemblyProvider.ReflectInstrumentationOnly(Microsoft.ExtendedReflection.Metadata.AssemblyEx,Microsoft.ExtendedReflection.Metadata.AssemblyEx,Microsoft.ExtendedReflection.Metadata.AssemblyEx)">
            <summary>
            Reflects the instrumentation only.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="settingsAssembly">The settings assembly.</param>
            <param name="generatedTestAssembly">The generated test assembly.</param>
        </member>
        <member name="P:Microsoft.Pex.Engine.IPexCurrentAssemblyProvider.Assembly">
            <summary>
            Gets the assembly.
            </summary>
            <value>The assembly.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.IPexCurrentAssemblyProvider.Settings">
            <summary>
            Gets the assembly settings
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Injection.IPexValueInjectorFilterManager">
            <summary>
            Value injector filter manager
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Injection.IPexValueInjectorFilter">
            <summary>
            Defines a decision procedure to inject a value at a particular execution point
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Injection.IPexValueInjectorFilter.MayInjectValue(Microsoft.ExtendedReflection.Metadata.Method,System.Object)">
            <summary>
            Gets a value indicating whether a value may be injected
            in a particular method.
            </summary>
            <param name="method">The method.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Injection.IPexValueInjectorFilterManager.Add(Microsoft.Pex.Engine.Injection.IPexValueInjectorFilter)">
            <summary>
            Adds the specified filter.
            </summary>
            <param name="filter">The filter.</param>
        </member>
        <member name="T:Microsoft.Pex.Engine.Packages.PexLocatableExplorationPackage">
            <summary>
            A package with a location where it was defined.
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Packages.PexLocatableExplorationPackage.Location">
            <summary>
            The location where the package was defined.
            </summary>
            <value>The location.</value>
        </member>
        <member name="F:Microsoft.Pex.Engine.Packages.PexLocatableExplorationPackage.Package">
            <summary>
            The package.
            </summary>
            <value>The package.</value>
        </member>
        <member name="M:Microsoft.Pex.Engine.Packages.PexLocatableExplorationPackage.#ctor(Microsoft.ExtendedReflection.Metadata.Names.Name,Microsoft.Pex.Engine.Packages.IPexExplorationPackage)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.Packages.PexLocatableExplorationPackage"/> class.
            </summary>
            <param name="location">The location.</param>
            <param name="package">The package.</param>
        </member>
        <member name="T:Microsoft.Pex.Engine.Packages.PexLocatablePathPackage">
            <summary>
            A package with a location where it was defined.
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Packages.PexLocatablePathPackage.Location">
            <summary>
            The location where the package was defined.
            </summary>
            <value>The location.</value>
        </member>
        <member name="F:Microsoft.Pex.Engine.Packages.PexLocatablePathPackage.Package">
            <summary>
            The package.
            </summary>
            <value>The package.</value>
        </member>
        <member name="M:Microsoft.Pex.Engine.Packages.PexLocatablePathPackage.#ctor(Microsoft.ExtendedReflection.Metadata.Names.Name,Microsoft.Pex.Engine.Packages.IPexPathPackage)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.Packages.PexLocatablePathPackage"/> class.
            </summary>
            <param name="location">The location.</param>
            <param name="package">The package.</param>
        </member>
        <member name="T:Microsoft.Pex.Engine.Packages.IPexPathPackage">
            <summary>
            Pex path package
            </summary>
            <remarks>
            A path package can be installed at the level of the tracing of an execution path.
            </remarks>
        </member>
        <member name="M:Microsoft.Pex.Engine.Packages.IPexPathPackage.Load(Microsoft.ExtendedReflection.ComponentModel.IContainer)">
            <summary>
            This method provides the opportunity install or substitute services;
            no services may be queried at this time.
            </summary>
            <param name="pathContainer">The path container.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Packages.IPexPathPackage.BeforeRun(Microsoft.Pex.Engine.ComponentModel.IPexPathComponent)">
            <summary>
            Performs initialization actions that may query services.
            </summary>
            <param name="host">The host.</param>
            <returns>some data</returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Packages.IPexPathPackage.AfterRun(Microsoft.Pex.Engine.ComponentModel.IPexPathComponent,System.Object)">
            <summary>
            Performs finalization actions that may query services.
            </summary>
            <param name="host">The host.</param>
            <param name="data">The data returned by BeforeRun.</param>
        </member>
        <member name="P:Microsoft.Pex.Engine.Packages.IPexPathPackage.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.Packages.PexLocatablePackage">
            <summary>
            A package with a location where it was defined.
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Packages.PexLocatablePackage.Location">
            <summary>
            The location where the package was defined.
            </summary>
            <value>The location.</value>
        </member>
        <member name="F:Microsoft.Pex.Engine.Packages.PexLocatablePackage.Package">
            <summary>
            The package.
            </summary>
            <value>The package.</value>
        </member>
        <member name="M:Microsoft.Pex.Engine.Packages.PexLocatablePackage.#ctor(Microsoft.ExtendedReflection.Metadata.Names.Name,Microsoft.Pex.Engine.Packages.IPexPackage)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.Packages.PexLocatablePackage"/> class.
            </summary>
            <param name="location">The location.</param>
            <param name="package">The package.</param>
        </member>
        <member name="T:Microsoft.Pex.Engine.Packages.PexLocatablePackageCollection">
            <summary>
            Collection of locatable packages
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.PostAnalysis.PexArgumentTracking">
            <summary>
            Argument tracking mode
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PostAnalysis.PexArgumentTracking.Concrete">
            <summary>
            Use concrete argument values
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PostAnalysis.PexArgumentTracking.Derived">
            <summary>
            Use argument values derived from the computations of the calling context
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PostAnalysis.PexArgumentTracking.Track">
            <summary>
            Introduce new symbols to track the arguments in this method
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PostAnalysis.PexArgumentTracking.TrackThisDeriveOther">
            <summary>
            Introduce new symbol to track the this argument
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PostAnalysis.PexArgumentTracking.DeriveThisTrackOther">
            <summary>
            Introduce new symbols to track all arguments but the this argument
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.PostAnalysis.IPexTrackingController">
            <summary>
            Interface which controls what information is tracked.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.IPexTrackingController.GetNextFrameId(System.Int32,Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Obtains an id for the next frame created in a particular thread.
            </summary>
            <param name="threadId"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.IPexTrackingController.GetArgumentTreatment(Microsoft.Pex.Engine.PostAnalysis.PexTrackingThread,System.Int32,Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            How to treat the arguments of a frame.
            </summary>
            <param name="thread">The thread.</param>
            <param name="frameId">The frame id.</param>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.IPexTrackingController.DerivedArguments(System.Int32,Microsoft.ExtendedReflection.Metadata.Method,Microsoft.ExtendedReflection.Interpretation.Term[])">
            <summary>
            Passes on the derived arguments.
            </summary>
            <remarks>
            The <paramref name="arguments"/> array may be mutated later by the caller, and must be cloned if the callee wants to preserve it.
            </remarks>
            <param name="frameId"></param>
            <param name="method"></param>
            <param name="arguments"></param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.IPexTrackingController.TrackedArguments(System.Int32,Microsoft.ExtendedReflection.Metadata.Method,Microsoft.ExtendedReflection.Interpretation.Term[])">
            <summary>
            Passes on the tracked arguments, if any.
            </summary>
            <remarks>
            The <paramref name="arguments"/> array may be mutated later by the caller, and must be cloned if the callee wants to preserve it.
            Depending on the <see cref="T:Microsoft.Pex.Engine.PostAnalysis.PexArgumentTracking"/> mode, some arguments may in fact be derived.
            </remarks>
            <param name="frameId"></param>
            <param name="method"></param>
            <param name="arguments"></param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.IPexTrackingController.FrameDisposed(System.Int32,Microsoft.Pex.Engine.PostAnalysis.PexTrackingFrame)">
            <summary>
            A frame is disposed.
            </summary>
            <param name="frameId">The frame id.</param>
            <param name="frame">The frame.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.IPexTrackingController.FrameHasExplicitFailures(System.Int32,Microsoft.ExtendedReflection.Metadata.Method,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Callback to indicate that an unaccounted exception was witnessed in a frame.
            </summary>
            <param name="frameId"></param>
            <param name="method"></param>
            <param name="exceptionObjects"></param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.IPexTrackingController.FrameHasExceptions(System.Int32,Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Callback to indicate that exceptions occurred in a frame.
            </summary>
            <param name="frameId"></param>
            <param name="method"></param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.IPexTrackingController.GetNextCallId(System.Int32,System.Int32,Microsoft.ExtendedReflection.Metadata.IMethodSignature,Microsoft.ExtendedReflection.Metadata.TypeEx[],Microsoft.ExtendedReflection.Interpretation.Term[])">
            <summary>
            Obtains an id for the next call in a particular thread.
            </summary>
            <param name="threadId">The thread id.</param>
            <param name="offset">The MSIL offset in the current method were the call was initialized.</param>
            <param name="methodSignature">The method signature.</param>
            <param name="varArgTypes">The var arg types.</param>
            <param name="arguments">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.IPexTrackingController.InvalidateCall(Microsoft.Pex.Engine.PostAnalysis.PexTrackingThread,System.Int32)">
            <summary>
            Cancels an initiated call; no callbacks to <see cref="M:Microsoft.Pex.Engine.PostAnalysis.IPexTrackingController.GetResultTreatment(Microsoft.Pex.Engine.PostAnalysis.PexTrackingThread,System.Int32,Microsoft.ExtendedReflection.Metadata.IMethodSignature,Microsoft.ExtendedReflection.Metadata.TypeEx[],System.Boolean)"/> or <see cref="M:Microsoft.Pex.Engine.PostAnalysis.IPexTrackingController.DerivedResult(System.Int32,Microsoft.ExtendedReflection.Metadata.IMethodSignature,Microsoft.ExtendedReflection.Metadata.TypeEx[],Microsoft.ExtendedReflection.Interpretation.Term)"/> or <see cref="M:Microsoft.Pex.Engine.PostAnalysis.IPexTrackingController.TrackedResult(System.Int32,Microsoft.ExtendedReflection.Metadata.IMethodSignature,Microsoft.ExtendedReflection.Metadata.TypeEx[],Microsoft.ExtendedReflection.Interpretation.Term)"/> will follow for this id.
            </summary>
            <param name="thread">The thread.</param>
            <param name="callId">The call id.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.IPexTrackingController.GetResultTreatment(Microsoft.Pex.Engine.PostAnalysis.PexTrackingThread,System.Int32,Microsoft.ExtendedReflection.Metadata.IMethodSignature,Microsoft.ExtendedReflection.Metadata.TypeEx[],System.Boolean)">
            <summary>
            How to treat the results of a call.
            </summary>
            <param name="thread">The thread.</param>
            <param name="callId">The call id.</param>
            <param name="methodSignature">The method signature.</param>
            <param name="varArgTypes">The var arg types.</param>
            <param name="hasDerivedResult">if the result of the call could be derived, or if the call has no result.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.IPexTrackingController.DerivedResult(System.Int32,Microsoft.ExtendedReflection.Metadata.IMethodSignature,Microsoft.ExtendedReflection.Metadata.TypeEx[],Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Passes on the derived result.
            </summary>
            <param name="callId">The call id.</param>
            <param name="methodSignature">The method signature.</param>
            <param name="varArgTypes">The var arg types.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.IPexTrackingController.TrackedResult(System.Int32,Microsoft.ExtendedReflection.Metadata.IMethodSignature,Microsoft.ExtendedReflection.Metadata.TypeEx[],Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Passes on the derived result.
            </summary>
            <param name="callId">The call id.</param>
            <param name="methodSignature">The method signature.</param>
            <param name="varArgTypes">The var arg types.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.IPexTrackingController.PathConditionAdded(Microsoft.ExtendedReflection.Interpretation.Term,System.Int32)">
            <summary>
            Callback invoked whenever a non-trivial path condition is added to the path condition builder.
            </summary>
            <param name="condition">The condition.</param>
            <param name="codeLabel">The codeLabel in the currently active method.</param>
        </member>
        <member name="T:Microsoft.Pex.Engine.PostAnalysis.IPexTrackingEngineFactory">
            <summary>
            Pex tracking engine factory
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.IPexTrackingEngineFactory.CreateTrackingEngine(Microsoft.Pex.Engine.PostAnalysis.IPexTrackingController)">
            <summary>
            Creates the tracking engine.
            </summary>
            <param name="controller">The controller.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.PostAnalysis.PexTrackedParameterId">
            <summary>
            Id for tracked values.
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PostAnalysis.PexTrackedParameterId.parameter">
            <summary>
            Tracked parameter.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackedParameterId.#ctor(Microsoft.ExtendedReflection.Metadata.Parameter)">
            <summary>
            Creates an instance of this type.
            </summary>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackedParameterId.GetPersistentHashCode">
            <summary>
            Gets a strong, persistent hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackedParameterId.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackedParameterId.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackedParameterId.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.PostAnalysis.PexTrackedParameterId.Description">
            <summary>
            Textual description of the symbol.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PostAnalysis.PexTrackedParameterId.Microsoft#ExtendedReflection#Interpretation#ISymbolId#Layout">
            <summary>
            The layout of the symbol.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PostAnalysis.PexTrackedParameterId.ObjectCreationTime">
            <summary>
            When the object (or all objects within this value) was created.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PostAnalysis.PexTrackedParameterId.Parameter">
            <summary>
            Gets the parameter; may be <code>null</code>
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Pex.Engine.PostAnalysis.PexTrackingControllerBase">
            <summary>
            Base class of <see cref="T:Microsoft.Pex.Engine.PostAnalysis.IPexTrackingController"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackingControllerBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.PostAnalysis.PexTrackingControllerBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackingControllerBase.GetNextFrameId(System.Int32,Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Obtains an id for the next frame created in a particular thread.
            </summary>
            <param name="threadId"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackingControllerBase.GetArgumentTreatment(Microsoft.Pex.Engine.PostAnalysis.PexTrackingThread,System.Int32,Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            How to treat the arguments of a frame.
            </summary>
            <param name="thread">The thread.</param>
            <param name="frameId">The frame id.</param>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackingControllerBase.DerivedArguments(System.Int32,Microsoft.ExtendedReflection.Metadata.Method,Microsoft.ExtendedReflection.Interpretation.Term[])">
            <summary>
            Passes on the derived arguments.
            </summary>
            <remarks>
            The <paramref name="arguments"/> array may be mutated later by the caller, and must be cloned if the callee wants to preserve it.
            </remarks>
            <param name="frameId"></param>
            <param name="method"></param>
            <param name="arguments"></param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackingControllerBase.TrackedArguments(System.Int32,Microsoft.ExtendedReflection.Metadata.Method,Microsoft.ExtendedReflection.Interpretation.Term[])">
            <summary>
            Passes on the tracked arguments, if any.
            </summary>
            <remarks>
            The <paramref name="arguments"/> array may be mutated later by the caller, and must be cloned if the callee wants to preserve it.
            Depending on the <see cref="T:Microsoft.Pex.Engine.PostAnalysis.PexArgumentTracking"/> mode, some arguments may in fact be derived.
            </remarks>
            <param name="frameId"></param>
            <param name="method"></param>
            <param name="arguments"></param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackingControllerBase.FrameDisposed(System.Int32,Microsoft.Pex.Engine.PostAnalysis.PexTrackingFrame)">
            <summary>
            A frame is disposed.
            </summary>
            <param name="frameId">The frame id.</param>
            <param name="frame">The frame.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackingControllerBase.FrameHasExplicitFailures(System.Int32,Microsoft.ExtendedReflection.Metadata.Method,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Callback to indicate that an unaccounted exception was witnessed in a frame.
            </summary>
            <param name="frameId"></param>
            <param name="method"></param>
            <param name="exceptionObjects"></param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackingControllerBase.FrameHasExceptions(System.Int32,Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Callback to indicate that exceptions occurred in a frame.
            </summary>
            <param name="frameId"></param>
            <param name="method"></param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackingControllerBase.GetNextCallId(System.Int32,System.Int32,Microsoft.ExtendedReflection.Metadata.IMethodSignature,Microsoft.ExtendedReflection.Metadata.TypeEx[],Microsoft.ExtendedReflection.Interpretation.Term[])">
            <summary>
            Obtains an id for the next call in a particular thread.
            </summary>
            <param name="threadId">The thread id.</param>
            <param name="offset">The MSIL offset in the current method were the call was initialized.</param>
            <param name="methodSignature">The method signature.</param>
            <param name="varArgTypes">The var arg types.</param>
            <param name="arguments">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackingControllerBase.InvalidateCall(Microsoft.Pex.Engine.PostAnalysis.PexTrackingThread,System.Int32)">
            <summary>
            Cancels an initiated call; no callbacks to <see cref="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackingControllerBase.GetResultTreatment(Microsoft.Pex.Engine.PostAnalysis.PexTrackingThread,System.Int32,Microsoft.ExtendedReflection.Metadata.IMethodSignature,Microsoft.ExtendedReflection.Metadata.TypeEx[],System.Boolean)"/> or <see cref="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackingControllerBase.DerivedResult(System.Int32,Microsoft.ExtendedReflection.Metadata.IMethodSignature,Microsoft.ExtendedReflection.Metadata.TypeEx[],Microsoft.ExtendedReflection.Interpretation.Term)"/> or <see cref="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackingControllerBase.TrackedResult(System.Int32,Microsoft.ExtendedReflection.Metadata.IMethodSignature,Microsoft.ExtendedReflection.Metadata.TypeEx[],Microsoft.ExtendedReflection.Interpretation.Term)"/> will follow for this id.
            </summary>
            <param name="thread">The thread.</param>
            <param name="callId">The call id.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackingControllerBase.GetResultTreatment(Microsoft.Pex.Engine.PostAnalysis.PexTrackingThread,System.Int32,Microsoft.ExtendedReflection.Metadata.IMethodSignature,Microsoft.ExtendedReflection.Metadata.TypeEx[],System.Boolean)">
            <summary>
            How to treat the results of a call.
            </summary>
            <param name="thread">The thread.</param>
            <param name="callId">The call id.</param>
            <param name="methodSignature">The method signature.</param>
            <param name="varArgTypes">The var arg types.</param>
            <param name="hasDerivedResult">if set to <c>true</c> [has derived result].</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackingControllerBase.DerivedResult(System.Int32,Microsoft.ExtendedReflection.Metadata.IMethodSignature,Microsoft.ExtendedReflection.Metadata.TypeEx[],Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Passes on the derived result.
            </summary>
            <param name="callId">The call id.</param>
            <param name="methodSignature">The method signature.</param>
            <param name="varArgTypes">The var arg types.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackingControllerBase.TrackedResult(System.Int32,Microsoft.ExtendedReflection.Metadata.IMethodSignature,Microsoft.ExtendedReflection.Metadata.TypeEx[],Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Passes on the derived result.
            </summary>
            <param name="callId">The call id.</param>
            <param name="methodSignature">The method signature.</param>
            <param name="varArgTypes">The var arg types.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackingControllerBase.PathConditionAdded(Microsoft.ExtendedReflection.Interpretation.Term,System.Int32)">
            <summary>
            Callback invoked whenever a non-trivial path condition is added to the path condition builder.
            </summary>
            <param name="condition">The condition.</param>
            <param name="codeLabel">The codeLabel in the currently active method.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackingControllerBase.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.PostAnalysis.PexTrackingControllerBase.PathConditionBuilder">
            <summary>
            Gets the path condition builder.
            </summary>
            <value>The path condition builder.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PostAnalysis.PexTrackingControllerBase.TermManager">
            <summary>
            Gets the term manager.
            </summary>
            <value>The term manager.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.PostAnalysis.PexTrackingFrame">
            <summary>
            A frame which supports
            tracking of data- and control-flow.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackingFrame.#ctor(Microsoft.Pex.Engine.PostAnalysis.PexTrackingThread,Microsoft.ExtendedReflection.Interpretation.States.IFrame,System.Int32,Microsoft.ExtendedReflection.Metadata.Method,System.Boolean@)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="thread"></param>
            <param name="prev"></param>
            <param name="frameIndex"></param>
            <param name="method"></param>
            <param name="needArguments"></param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackingFrame.BeginCall(System.Int32,Microsoft.ExtendedReflection.Metadata.IMethodSignature,Microsoft.ExtendedReflection.Metadata.TypeEx[],Microsoft.ExtendedReflection.Interpretation.Term[])">
            <summary>
            Begins the call.
            </summary>
            <param name="offset">The offset.</param>
            <param name="signature">The signature.</param>
            <param name="varArgTypes">The var arg types.</param>
            <param name="callArguments">The call arguments.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackingFrame.EndCall(System.Int32,Microsoft.ExtendedReflection.Interpretation.States.EndCallKind)">
            <summary>
            Indicates that a call has finished.
            Afterwards, IsCallInprocess returns <code>false</code>.
            </summary>
            <param name="codeLabel">The code label.</param>
            <param name="kind">End call kind</param>
            <remarks>
            Only allowed if IsCallInprocess.
            </remarks>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackingFrame.GotException(System.Object)">
            <summary>
            Called whenever an exception is witnessed during the processing of a frame.
            (This call is used to record the correct stack trace, if not cached yet.)
            </summary>
            <param name="exceptionObject">The exception.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackingFrame.MarkExceptionAsExpected(System.Object)">
            <summary>
            When an exception is witnessed, and it is not marked as an expected exception,
            then the exception probably indicates an error in the program.
            </summary>
            <param name="exceptionObject"></param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackingFrame.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.PostAnalysis.PexTrackingFrame.TrackingController">
            <summary>
            Gets the tracking controller.
            </summary>
            <value>The tracking controller.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.PostAnalysis.PexTrackingPathConditionBuilder">
            <summary>
            TrackingPathConditionBuilder
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackingPathConditionBuilder.#ctor(Microsoft.Pex.Engine.PostAnalysis.IPexTrackingController)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.Pex.Engine.PostAnalysis.PexTrackingPathConditionBuilder"/>.
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackingPathConditionBuilder.TryGetLastCondition(Microsoft.ExtendedReflection.Interpretation.Term@)">
            <summary>
            Tries to get get the last condition.
            </summary>
            <param name="condition">The condition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackingPathConditionBuilder.GetMarker">
            <summary>
            Gets a marker indicating the last path condition conjunct.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackingPathConditionBuilder.Undo(System.Int32)">
            <summary>
            Undoes added path condition conjuncts, to the point given by the marker
            obtained from <see cref="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackingPathConditionBuilder.GetMarker"/>.
            </summary>
            <param name="marker">The marker.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackingPathConditionBuilder.Clear">
            <summary>
            Clears all recorded path condition conjuncts.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackingPathConditionBuilder.GetCondition(System.Int32,System.Int32)">
            <summary>
            Gets the path condition between two markers (first include, second exclusive)
            obtained from <see cref="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackingPathConditionBuilder.GetMarker"/>.
            </summary>
            <param name="beginMarker">The begin marker.</param>
            <param name="endMarker">The end marker.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackingPathConditionBuilder.GetConditions(System.Int32,System.Int32)">
            <summary>
            Gets the path conditions conjuncts between two markers (first include, second exclusive)
            obtained from <see cref="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackingPathConditionBuilder.GetMarker"/>.
            </summary>
            <param name="beginMarker">The begin marker.</param>
            <param name="endMarker">The end marker.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackingPathConditionBuilder.Add(Microsoft.ExtendedReflection.Metadata.ICallStackTrace,System.Int32,System.Boolean,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Adds a path condition
            </summary>
            <param name="callStackTrace">The call stack trace.</param>
            <param name="codeLabel">position in method</param>
            <param name="sign">whether the positive form of the condition is to be added</param>
            <param name="term">value that has <see cref="F:Microsoft.ExtendedReflection.Metadata.Layout.I4"/></param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackingPathConditionBuilder.EnterFrame(Microsoft.ExtendedReflection.Interpretation.States.IFrame)">
            <summary>
            Enters a frame; always followed by <see cref="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackingPathConditionBuilder.LeaveFrame(Microsoft.ExtendedReflection.Interpretation.States.IFrame)"/>.
            </summary>
            <param name="frame"></param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackingPathConditionBuilder.LeaveFrame(Microsoft.ExtendedReflection.Interpretation.States.IFrame)">
            <summary>
            Leaves a frame.
            </summary>
            <param name="frame"></param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackingPathConditionBuilder.Reached(System.Int32)">
            <summary>
            A code position has been reached, but there is no further condition attached to the position.
            </summary>
            <param name="codeLabel"></param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackingPathConditionBuilder.Inconsistent(System.Int32)">
            <summary>
            Indicates that this path is infeasible.
            </summary>
            <param name="codeLabel">position in method</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackingPathConditionBuilder.UninstrumentedCall(System.Int32,Microsoft.ExtendedReflection.Metadata.IMethodSignature,Microsoft.ExtendedReflection.Interpretation.Term[])">
            <summary>
            An uninstrumented call terminated normally.
            </summary>
            <param name="codeLabel">The code label.</param>
            <param name="signature">The signature.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackingPathConditionBuilder.Stop">
            <summary>
            The path condition builder should not gather any more information.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackingPathConditionBuilder.Minimize(System.Int32,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Adds a request to minimize a I4/I8 value.
            </summary>
            <param name="codeLabel">The code label.</param>
            <param name="number">The number.</param>
            <returns>
            boolean that indicates whether this is the first time that the minimization request was encountered
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackingPathConditionBuilder.IsLikelyLoopBound(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Checks whether a value is likely to be a loop bound.
            </summary>
            <param name="number">The number.</param>
            <returns>
            boolean that indicates whether this number is likely to be a loop bound.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackingPathConditionBuilder.TryGetCurrentPathConditionInfo(Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.PathConditionInfo@)">
            <summary>
            Tries to the get current path condition info.
            </summary>
            <param name="info">The info.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackingPathConditionBuilder.Reduce(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Reduces the given value, taking into account the path condition.
            </summary>
            <param name="term"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.PostAnalysis.PexTrackingPathConditionBuilder.Condition">
            <summary>
            Gets a term that represents the conjunction of all path condition conjuncts.
            </summary>
            <value>The condition.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PostAnalysis.PexTrackingPathConditionBuilder.RawConditions">
            <summary>
            Gets a list of all recorded path condition conjuncts.
            </summary>
            <value>The raw conditions.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.PostAnalysis.PexTrackingState">
            <summary>
            A state which supports 
            tracking of data- and control-flow.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackingState.RestartObjectFieldMaps">
            <summary>
            Restarts the object field maps.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackingState.DefaultFieldsOf(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Restarts the fields of a given reference.
            </summary>
            <param name="reference">The reference.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackingState.GetThread(System.Int32)">
            <summary>
            Gets an existing thread with the given index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.PostAnalysis.PexTrackingState.TrackingController">
            <summary>
            Gets the tracking controller.
            </summary>
            <value>The tracking controller.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.PostAnalysis.PexTrackingThread">
            <summary>
            A thread which supports 
            tracking of data- and control-flow.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackingThread.#ctor(Microsoft.Pex.Engine.PostAnalysis.PexTrackingState,System.Int32)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="state">The state.</param>
            <param name="threadId">The thread id.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackingThread.CreateFrame(Microsoft.ExtendedReflection.Metadata.Method,Microsoft.ExtendedReflection.Interpretation.States.IFrame,System.Int32,System.Boolean@)">
            <summary>
            Creates a new stack frame that is going to be pushed on the stack.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.PostAnalysis.PexTrackingThread.TrackingController">
            <summary>
            Gets the tracking controller.
            </summary>
            <value>The tracking controller.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.States.IndexIntoMemoryMapSymbolId">
            <summary>
            Index into memory map symbol ID.
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.States.IndexIntoMemoryMapSymbolId.ElementLayout">
            <summary>
            Element layout
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.States.IndexIntoMemoryMapSymbolId.#ctor(Microsoft.ExtendedReflection.Interpretation.TermManager,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Layout)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.States.IndexIntoMemoryMapSymbolId"/> class.
            </summary>
            <param name="termManager">The term manager.</param>
            <param name="term">The term.</param>
            <param name="elementLayout">The element layout.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.States.IndexIntoMemoryMapSymbolId.Equals(System.Object)">
            <summary>
            Checks equality with the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.States.IndexIntoMemoryMapSymbolId.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.TestGeneration.IPexTestNamer">
            <summary>
            Exploration service that generates unique test names
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestGeneration.IPexTestNamer.TryCreateTestName(Microsoft.Pex.Engine.IPexGeneratedTest,System.String@)">
            <summary>
            Tries to produce a nice name for the test
            </summary>
            <param name="test">The test.</param>
            <param name="testName">Name of the test.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.TestGeneration.IPexTestNamerManager">
            <summary>
            Test namer manager
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestGeneration.IPexTestNamerManager.ClearTestNamers">
            <summary>
            Clears all the test namers
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestGeneration.IPexTestNamerManager.AddTestNamer(Microsoft.Pex.Engine.TestGeneration.IPexTestNamer)">
            <summary>
            Adds the test namer.
            </summary>
            <param name="namer">The namer.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestGeneration.IPexTestNamerManager.CreateTestName(Microsoft.Pex.Engine.IPexGeneratedTest)">
            <summary>
            Creates the name of the test.
            </summary>
            <param name="test">The test.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestGeneration.IPexTestNamerManager.TestNamers">
            <summary>
            Gets the test namers.
            </summary>
            <value>The test namers.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.IPexGenericArgumentsProvider">
            <summary>
            Generic arguments provider
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.IPexGenericArgumentsProvider.GetGenericArgumentTuples(Microsoft.ExtendedReflection.Metadata.MethodDefinition)">
            <summary>
            Gets the generic argument tuples.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.IPexCurrentExplorationProvider">
            <summary>
            Provides information about the current exploration
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.IPexCurrentExplorationProvider.TryGetMergedSearchPriority(Microsoft.ExtendedReflection.Metadata.MethodDefinition,Microsoft.Pex.Framework.Focus.PexSearchPriority@)">
            <summary>
            Tries to get the merged search priority.
            </summary>
            <param name="method">The method.</param>
            <param name="priority">The priority.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.IPexCurrentExplorationProvider.Exploration">
            <summary>
            Gets the exploration.
            </summary>
            <value>The exploration.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.IPexCurrentExplorationProvider.MergedSettings">
            <summary>
            Gets the settings.
            </summary>
            <value>The settings.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.IPexCurrentExplorationProvider.MergedExplorationPackages">
            <summary>
            Gets the merged exploration packages.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.IPexCurrentExplorationProvider.MergedPathPackages">
            <summary>
            Gets the merged exploration packages.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Logging.IPexLogManager">
            <summary>
            Pex log manager
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.IPexLogManager.PrepareLoggers">
            <summary>
            Prepares the loggers.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.IPexLogManager.CloseXmlLogger">
            <summary>
            Closes the XML logger.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Logging.IPexRemotableLog">
            <summary>
            Remotable log
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Logging.IPexLog">
            <summary>
            Pex log
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Logging.IPexEventSource">
            <summary>
            Pex event source
            </summary>
        </member>
        <member name="E:Microsoft.Pex.Engine.Logging.IPexEventSource.BeforeExecutionHandler">
            <summary>
            Occurs before execution.
            </summary>
        </member>
        <member name="E:Microsoft.Pex.Engine.Logging.IPexEventSource.AfterExecutionHandler">
            <summary>
            Occurs after execution.
            </summary>
        </member>
        <member name="E:Microsoft.Pex.Engine.Logging.IPexEventSource.BeforeReflectionHandler">
            <summary>
            Occurs before reflection.
            </summary>
        </member>
        <member name="E:Microsoft.Pex.Engine.Logging.IPexEventSource.AfterReflectionHandler">
            <summary>
            Occurs after reflection.
            </summary>
        </member>
        <member name="E:Microsoft.Pex.Engine.Logging.IPexEventSource.BeforePexAssemblyHandler">
            <summary>
            Occurs before an assembly is processed.
            </summary>
        </member>
        <member name="E:Microsoft.Pex.Engine.Logging.IPexEventSource.AfterPexAssemblyHandler">
            <summary>
            Occurs after an assembly is processed.
            </summary>
        </member>
        <member name="E:Microsoft.Pex.Engine.Logging.IPexEventSource.BeforeAssemblyExHandler">
            <summary>
            Occurs before an assembly is processed.
            </summary>
        </member>
        <member name="E:Microsoft.Pex.Engine.Logging.IPexEventSource.AfterAssemblyExHandler">
            <summary>
            Occurs after an assembly is processed.
            </summary>
        </member>
        <member name="E:Microsoft.Pex.Engine.Logging.IPexEventSource.BeforePexFixtureHandler">
            <summary>
            Occurs before a fixture is processed.
            </summary>
        </member>
        <member name="E:Microsoft.Pex.Engine.Logging.IPexEventSource.AfterPexFixtureHandler">
            <summary>
            Occurs after a fixture is processed.
            </summary>
        </member>
        <member name="E:Microsoft.Pex.Engine.Logging.IPexEventSource.BeforeTypeExHandler">
            <summary>
            Occurs before a fixture is processed.
            </summary>
        </member>
        <member name="E:Microsoft.Pex.Engine.Logging.IPexEventSource.AfterTypeExHandler">
            <summary>
            Occurs after a fixture is processed.
            </summary>
        </member>
        <member name="E:Microsoft.Pex.Engine.Logging.IPexEventSource.BeforePexExplorationHandler">
            <summary>
            Occurs before an exploration is processed.
            </summary>
        </member>
        <member name="E:Microsoft.Pex.Engine.Logging.IPexEventSource.ExplorationHandler">
            <summary>
            Occurs when an exploration is processed.
            </summary>
        </member>
        <member name="E:Microsoft.Pex.Engine.Logging.IPexEventSource.AfterPexExplorationHandler">
            <summary>
            Occurs after an exploration is processed.
            </summary>
        </member>
        <member name="E:Microsoft.Pex.Engine.Logging.IPexEventSource.BeforeMethodHandler">
            <summary>
            Occurs before an exploration is processed.
            </summary>
        </member>
        <member name="E:Microsoft.Pex.Engine.Logging.IPexEventSource.MethodResultHandler">
            <summary>
            Occurs when an exploration is processed.
            </summary>
        </member>
        <member name="E:Microsoft.Pex.Engine.Logging.IPexEventSource.AfterMethodHandler">
            <summary>
            Occurs after an exploration is processed.
            </summary>
        </member>
        <member name="E:Microsoft.Pex.Engine.Logging.IPexEventSource.AssemblySetUpHandler">
            <summary>
            Occurs when an assembly is setup.
            </summary>
        </member>
        <member name="E:Microsoft.Pex.Engine.Logging.IPexEventSource.AssemblyTearDownHandler">
            <summary>
            Occurs when an assembly is torn down.
            </summary>
        </member>
        <member name="E:Microsoft.Pex.Engine.Logging.IPexEventSource.FixtureSetUpHandler">
            <summary>
            Occurs when a fixture is setup.
            </summary>
        </member>
        <member name="E:Microsoft.Pex.Engine.Logging.IPexEventSource.FixtureTearDownHandler">
            <summary>
            Occurs when a fixture is torn down.
            </summary>
        </member>
        <member name="E:Microsoft.Pex.Engine.Logging.IPexEventSource.SetUpHandler">
            <summary>
            Occurs when a method is setup.
            </summary>
        </member>
        <member name="E:Microsoft.Pex.Engine.Logging.IPexEventSource.TearDownHandler">
            <summary>
            Occurs when a fixture is torn down.
            </summary>
        </member>
        <member name="E:Microsoft.Pex.Engine.Logging.IPexEventSource.TestHandler">
            <summary>
            Occurs when a test is generated.
            </summary>
        </member>
        <member name="E:Microsoft.Pex.Engine.Logging.IPexEventSource.ExistingTestHandler">
            <summary>
            Occurs when an existing test is found.
            </summary>
        </member>
        <member name="E:Microsoft.Pex.Engine.Logging.IPexEventSource.DuplicateExistingTestHandler">
            <summary>
            Occurs when an existing test was tagged as duplicate
            </summary>
        </member>
        <member name="E:Microsoft.Pex.Engine.Logging.IPexEventSource.MissedExistingTestHandler">
            <summary>
            Occurs when an existing test cannot be found.
            </summary>
        </member>
        <member name="E:Microsoft.Pex.Engine.Logging.IPexEventSource.GeneratedTestHandler">
            <summary>
            Occurs when a test is generated.
            </summary>
        </member>
        <member name="E:Microsoft.Pex.Engine.Logging.IPexEventSource.GeneratedFixtureHandler">
            <summary>
            Occurs when a fixture is generated.
            </summary>
        </member>
        <member name="E:Microsoft.Pex.Engine.Logging.IPexEventSource.GeneratedFileHandler">
            <summary>
            Occurs when a file is generated.
            </summary>
        </member>
        <member name="E:Microsoft.Pex.Engine.Logging.IPexEventSource.ProgressHandler">
            <summary>
            Occurs occasionally.
            </summary>
        </member>
        <member name="E:Microsoft.Pex.Engine.Logging.IPexEventSource.ExplorableHandler">
            <summary>
            Occurs when an explorable event is raised.
            </summary>
        </member>
        <member name="E:Microsoft.Pex.Engine.Logging.IPexEventSource.ExplorationGoalHandler">
            <summary>
            Occurs when a goal is reached or missed
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.IPexLog.BeforeExecution">
            <summary>
            Indicates that an exploration is about to start.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.IPexLog.AfterExecution">
            <summary>
            Indicates that an exploration is finished.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.IPexLog.BeforeReflection">
            <summary>
            Indicates that reflection is about to start.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.IPexLog.AfterReflection(Microsoft.Pex.Engine.Logging.AfterReflectionEventArgs)">
            <summary>
            Indicates that reflection is done.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.IPexLog.BeforeAssembly(Microsoft.Pex.Engine.Logging.PexAssemblyEventArgs)">
            <summary>
            Indicates that an assembly is about to be processed.
            </summary>
            <param name="args">The <see cref="T:Microsoft.Pex.Engine.Logging.PexAssemblyEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.IPexLog.AfterAssembly(Microsoft.Pex.Engine.Logging.PexAssemblyEventArgs)">
            <summary>
            Indicates that an assembly has been processed.
            </summary>
            <param name="args">The <see cref="T:Microsoft.Pex.Engine.Logging.PexAssemblyEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.IPexLog.BeforeAssemblyEx(Microsoft.Pex.Engine.Logging.AssemblyExEventArgs)">
            <summary>
            Indicates that an assembly is about to be processed.
            </summary>
            <param name="args">The <see cref="T:Microsoft.Pex.Engine.Logging.AssemblyExEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.IPexLog.AfterAssemblyEx(Microsoft.Pex.Engine.Logging.AssemblyExEventArgs)">
            <summary>
            Indicates that an assembly has been processed.
            </summary>
            <param name="args">The <see cref="T:Microsoft.Pex.Engine.Logging.AssemblyExEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.IPexLog.BeforeFixture(Microsoft.Pex.Engine.PexFixture)">
            <summary>
            Indicates that a fixture is about to be processed.
            </summary>
            <param name="fixture">The fixture.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.IPexLog.AfterFixture(Microsoft.Pex.Engine.PexFixture)">
            <summary>
            Indicates that a fixture has been processed.
            </summary>
            <param name="fixture">The fixture.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.IPexLog.BeforeTypeEx(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Indicates that a fixture is about to be processed.
            </summary>
            <param name="fixture">The fixture.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.IPexLog.AfterTypeEx(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Indicates that a fixture has been processed.
            </summary>
            <param name="fixture">The fixture.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.IPexLog.BeforeExploration(Microsoft.Pex.Engine.Logging.PexExplorationEventArgs)">
            <summary>
            Indicates that an exploration is about to be processed.
            </summary>
            <param name="exploration">The <see cref="T:Microsoft.Pex.Engine.Logging.PexExplorationEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.IPexLog.Exploration(Microsoft.Pex.Engine.PexExplorationResultObserver)">
            <summary>
            Indicates that an exploration is being processed.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.IPexLog.AfterExploration(Microsoft.Pex.Engine.Logging.PexExplorationEventArgs)">
            <summary>
            Indicates that an exploration has been processed.
            </summary>
            <param name="exploration">The <see cref="T:Microsoft.Pex.Engine.Logging.PexExplorationEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.IPexLog.BeforeMethod(Microsoft.Pex.Engine.Logging.MethodEventArgs)">
            <summary>
            Indicates that an exploration is about to be processed.
            </summary>
            <param name="exploration">The <see cref="T:Microsoft.Pex.Engine.Logging.MethodEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.IPexLog.MethodResult(Microsoft.Pex.Engine.Logging.ResultEventArgs)">
            <summary>
            Indicates that an exploration is being processed.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.IPexLog.AfterMethod(Microsoft.Pex.Engine.Logging.MethodEventArgs)">
            <summary>
            Indicates that an exploration has been processed.
            </summary>
            <param name="exploration">The <see cref="T:Microsoft.Pex.Engine.Logging.MethodEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.IPexLog.AssemblySetUp(Microsoft.Pex.Engine.PexResultObserver)">
            <summary>
            Logs assembly setup.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.IPexLog.AssemblyTearDown(Microsoft.Pex.Engine.PexResultObserver)">
            <summary>
            Logs assembly tear down.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.IPexLog.FixtureSetUp(Microsoft.Pex.Engine.PexResultObserver)">
            <summary>
            Logs fixture setup.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.IPexLog.FixtureTearDown(Microsoft.Pex.Engine.PexResultObserver)">
            <summary>
            Logs fixture tear down.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.IPexLog.SetUp(Microsoft.Pex.Engine.PexResultObserver)">
            <summary>
            Logs test setup.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.IPexLog.TearDown(Microsoft.Pex.Engine.PexResultObserver)">
            <summary>
            Logs test tear down.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.IPexLog.Test(Microsoft.Pex.Engine.PexResultObserver)">
            <summary>
            Logs a test run.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.IPexLog.ExistingTest(Microsoft.Pex.Engine.PexExistingTest)">
            <summary>
            Logs an existing test.
            </summary>
            <param name="test">The test.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.IPexLog.DuplicateExistingTest(Microsoft.Pex.Engine.PexExistingTest)">
            <summary>
            Logs a duplicate existing test
            </summary>
            <param name="test"></param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.IPexLog.MissedExistingTest(Microsoft.Pex.Engine.PexExistingTest)">
            <summary>
            Logs an missing existing test.
            </summary>
            <param name="test">The test.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.IPexLog.GeneratedTest(Microsoft.Pex.Engine.IPexGeneratedTest)">
            <summary>
            Logs the generation of a test.
            </summary>
            <param name="test">The test.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.IPexLog.GeneratedFixture(Microsoft.Pex.Engine.PexGeneratedFixture)">
            <summary>
            Logs the generation of a fixture.
            </summary>
            <param name="fixture">The fixture.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.IPexLog.GeneratedFile(Microsoft.Pex.Engine.Logging.PexGeneratedFileKind,System.String,System.String)">
            <summary>
            Logs a generated file.
            </summary>
            <param name="kind">The kind.</param>
            <param name="itemName">Name of the item.</param>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.IPexLog.ExplorationGoal(Microsoft.Pex.Engine.Goals.PexExplorationGoalEventArgs)">
            <summary>
            Logs a goal
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.IPexLog.Explorable(Microsoft.Pex.Engine.Logging.PexExplorableEventArgs)">
            <summary>
            Logs an explorable event.
            </summary>
            <param name="event">The <see cref="T:Microsoft.Pex.Engine.Logging.PexExplorableEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.IPexLog.Progress(Microsoft.Pex.Engine.PexProgress)">
            <summary>
            Logs progress.
            </summary>
            <param name="progress">The progress.</param>
        </member>
        <member name="P:Microsoft.Pex.Engine.Logging.IPexLog.FixtureCount">
            <summary>
            Gets the fixture count.
            </summary>
            <value>The fixture count.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Logging.IPexLog.ExplorationCount">
            <summary>
            Gets the exploration count.
            </summary>
            <value>The exploration count.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Logging.IPexLog.GeneratedTestCount">
            <summary>
            Gets the generated test count.
            </summary>
            <value>The generated test count.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Logging.IPexLog.GeneratedTestNewCount">
            <summary>
            Gets the number of generated tests that are new.
            </summary>
            <value>The generated test new count.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Logging.IPexLog.GeneratedTestFailureCount">
            <summary>
            Gets the number of failing generated tests.
            </summary>
            <value>The generated test failure count.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Logging.IPexLog.GeneratedTestDuplicateCount">
            <summary>
            Gets the number of duplicate generated tests.
            </summary>
            <value>The generated test duplicate count.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Logging.IPexLog.GeneratedTestInconclusiveCount">
            <summary>
            Gets the number of generated inconclusive tests.
            </summary>
            <value>The generated test inconclusive count.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Logging.IPexLog.ExplorationGoalReachedCount">
            <summary>
            Gets the number of reached goals
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.Logging.IPexLog.ExplorationGoalMissedCount">
            <summary>
            Gets the number of missed goals
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.Logging.IPexLog.ExplorationGoalCount">
            <summary>
            Gets the total number of goals
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.Logging.IPexLog.ExceptionFrameTree">
            <summary>
            Gets the exception frame tree.
            </summary>
            <value>The exception frame tree.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Logging.IPexLog.ExecutionDuration">
            <summary>
            Gets the duration of the execution.
            </summary>
            <value>The duration of the execution.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Logging.IPexLog.CurrentExplorationDuration">
            <summary>
            Gets the duration of the current exploration.
            </summary>
            <value>The duration of the current exploration.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Logging.IPexLog.ProgressEnabled">
            <summary>
            Gets a value indicating whether progress logging enabled.
            </summary>
            <value><c>true</c> if [progress enabled]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Logging.IPexRemotableLog.RemoteLog">
            <summary>
            Gets or sets the remote log.
            </summary>
            <value>The remote log.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.Logging.PexTrajectorySettings">
            <summary>
            Helper class with different trajectory names
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Logging.PexTrajectorySettings.Scopes">
            <summary>
            Helper class with different trajectory names
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Logging.PexTrajectorySettings.Scopes.Assembly">
            <summary>
            Assembly
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Logging.PexTrajectorySettings.Scopes.Fixture">
            <summary>
            Fixture
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Logging.PexTrajectorySettings.Scopes.Exploration">
            <summary>
            Exploration
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Logging.PexTrajectorySettings.Groups">
            <summary>
            Helper class with different trajectory names
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Logging.PexTrajectorySettings.Groups.Terms">
            <summary>
            Terms
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Logging.PexTrajectorySettings.Groups.Tests">
            <summary>
            Tests
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Logging.PexTrajectorySettings.Groups.Runs">
            <summary>
            Runs
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Logging.PexTrajectorySettings.Groups.Nodes">
            <summary>
            Nodes
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Logging.PexTrajectorySettings.Groups.Memory">
            <summary>
            Memory
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Logging.PexTrajectorySettings.Groups.Coverage">
            <summary>
            Coverage
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Logging.PexTrajectorySettings.Groups.Metrics">
            <summary>
            Metrics
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Logging.PexTrajectorySettings.Trajectories">
            <summary>
            Helper class with different trajectory names
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Logging.PexTrajectorySettings.Trajectories.Runs">
            <summary>
            Runs
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Logging.PexTrajectorySettings.Trajectories.UniquePaths">
            <summary>
            Unique paths
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Logging.PexTrajectorySettings.Trajectories.UniquePathsPrecision">
            <summary>
            Unique paths precision
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Logging.PexTrajectorySettings.Trajectories.Tests">
            <summary>
            Tests
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Logging.PexTrajectorySettings.Trajectories.FailedTests">
            <summary>
            Failed tests
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Logging.PexTrajectorySettings.Trajectories.DuplicateTests">
            <summary>
            Duplicate tests
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Logging.PexTrajectorySettings.Trajectories.NewTests">
            <summary>
            New tests
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Logging.PexTrajectorySettings.Trajectories.Nodes">
            <summary>
            Nodes
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.PexTrajectorySettings.Trajectories.GetTerm(System.String)">
            <summary>
            Gets the trajectory name for a term category.
            </summary>
            <param name="category">The category.</param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.Pex.Engine.Logging.PexTrajectorySettings.Trajectories.CoveredBasicBlocks">
            <summary>
            Covered basic blocks
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Logging.PexTrajectorySettings.Trajectories.TotalBasicBlocks">
            <summary>
            Total basic blocks
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Logging.PexTrajectorySettings.Trajectories.BasicBlocksCoverage">
            <summary>
            Basic blocks coverage
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Logging.PexTrajectorySettings.Trajectories.PrivateBytes">
            <summary>
            Virtual memory
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Logging.PexTrajectorySettings.Trajectories.WorkingSet">
            <summary>
            Working set
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Logging.PexTrajectorySettings.Trajectories.GCHeap">
            <summary>
            GC heap
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Logging.PexTrajectorySettings.Trajectories.OutOfMemory">
            <summary>
            Out-of-memory
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Logging.PexTrajectorySettings.Trajectories.Explorations">
            <summary>
            Explorations
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.MethodInvocations.IPexPexMethodInvocationRequestSequenceProvider">
            <summary>
            Provider of <see cref="T:Microsoft.Pex.Engine.MethodInvocations.PexMethodInvocationRequest"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.MethodInvocations.IPexPexMethodInvocationRequestSequenceProvider.Requests">
            <summary>
            Gets the requests.
            </summary>
            <value>The requests.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.MethodInvocations.PexMethodInvocation">
            <summary>
            Method invocation
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.MethodInvocations.PexMethodInvocation.SequenceId">
            <summary>
            /// Identifier to mark a point in the execution
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.MethodInvocations.PexMethodInvocation.MayPerformVTableLookup">
            <summary>
            If the method is an instance method, whether the first argument should be used to perform a vtable lookup
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.MethodInvocations.PexMethodInvocation.Method">
            <summary>
            Method to be invoked
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.MethodInvocations.PexMethodInvocation.Arguments">
            <summary>
            Arguments to method
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.MethodInvocations.PexMethodInvocation.Result">
            <summary>
            A symbol representing the result of the invocation; could be used in arguments of future invocations;
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.MethodInvocations.PexMethodInvocation.#ctor(Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.ISequenceId,System.Boolean,Microsoft.ExtendedReflection.Metadata.Method,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.MethodInvocations.PexMethodInvocation"/> class.
            </summary>
            <param name="sequenceId">The sequence id.</param>
            <param name="mayPerformVTableLookup">Whether a v-table lookup may be performed.</param>
            <param name="method">The method.</param>
            <param name="result">The result, if method's return type is not void.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.MethodInvocations.PexMethodInvocation.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.MethodInvocations.PexMethodInvocationRequest">
            <summary>
            A request to invoke a method with contextual instructions
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.MethodInvocations.PexMethodInvocationRequest.MethodInvocation">
            <summary>
            The requested method invocation
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.MethodInvocations.PexMethodInvocationRequest.CreatesType">
            <summary>
            The type this invocation is supposed to create; if any.
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.MethodInvocations.PexMethodInvocationRequest.ExceptionIsAssumptionViolation">
            <summary>
            Whether all exceptional results should be treated as assumption violations.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.MethodInvocations.PexMethodInvocationRequest.#ctor(Microsoft.Pex.Engine.MethodInvocations.PexMethodInvocation,Microsoft.ExtendedReflection.Metadata.TypeEx,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.MethodInvocations.PexMethodInvocationRequest"/> class.
            </summary>
            <param name="methodInvocation">The method invocation.</param>
            <param name="createsType">Type this invocation is supposed to create, if any.</param>
            <param name="exceptionIsAssumptionViolation">Whether the exception should be regarded as an assumption violation.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.MethodInvocations.PexMethodInvocationRequest.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.Mixes.IPexMixManager">
            <summary>
            Manager of a collection of <see cref="T:Microsoft.Pex.Framework.Settings.PexSettingsMixAttribute"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Mixes.IPexMixManager.AddMix(Microsoft.Pex.Framework.Settings.PexSettingsMixAttribute)">
            <summary>
            Adds the mix.
            </summary>
            <param name="mix">The mix.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Mixes.IPexMixManager.TryGetMix(System.String,Microsoft.Pex.Framework.Settings.PexSettingsMixAttribute@)">
            <summary>
            Tries to get a mix.
            </summary>
            <param name="name">The name.</param>
            <param name="mix">The mix.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.Mixes.IPexMixManager.Mixes">
            <summary>
            Gets the mixes.
            </summary>
            <value>The mixes.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.Logging.PexXmlReport">
            <summary>
            Readonly wrapper around a Pex xml report
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.PexXmlReport.GetExplorationsWithErrors">
            <summary>
            Gets the fixtures which contained errors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.PexXmlReport.TryLoad(Microsoft.ExtendedReflection.Logging.IEventLog,System.String,Microsoft.Pex.Engine.Logging.PexXmlReport@)">
            <summary>
            Tries to load the report.
            </summary>
            <param name="log">The log.</param>
            <param name="path">The path.</param>
            <param name="report">The report.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.Logging.PexXmlReport.FileName">
            <summary>
            Gets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Logging.PexXmlReport.Document">
            <summary>
            Gets the document.
            </summary>
            <value>The document.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.Sequences.IPexTargetStrategyFactory">
            <summary>
            A <see cref="T:Microsoft.Pex.Engine.Sequences.IPexTargetStrategy"/>
            factory
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Sequences.IPexTargetStrategyFactory.CreateStrategy(Microsoft.ExtendedReflection.Metadata.CodeBranch)">
            <summary>
            Creates the strategy.
            </summary>
            <param name="codeBranch">The code branch.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.Solutions.IInspectableState">
            <summary>
            Interface to inspct the heap
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Solutions.IInspectableState.ReadSzArrayElement(Microsoft.ExtendedReflection.Metadata.Layout,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Reads an array element of a zero-based array.
            </summary>
            <param name="layout">The layout.</param>
            <param name="array">The array.</param>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Solutions.IInspectableState.ReadMdArrayElement(Microsoft.ExtendedReflection.Metadata.Layout,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term[])">
            <summary>
            Reads an array element of a multi-dimensional array.
            </summary>
            <param name="layout">The layout.</param>
            <param name="array">The array.</param>
            <param name="indices">The indices.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Solutions.IInspectableState.ReadObjectField(Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Reads an object field.
            </summary>
            <param name="object">The object.</param>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.Solutions.ISolution">
            <summary>
            A solution is a thin wrapper around a model.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Solutions.ISolution.GetValue(Microsoft.ExtendedReflection.Interpretation.ISymbolId)">
            <summary>
            Returns the model for a symbol; result may be arbitrary if symbol is not part of model equality graph.
            </summary>
            <param name="choice"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Solutions.ISolution.GetValue(Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Returns the model for a term; result may be arbitrary if term is not part of model equality graph.
            </summary>
            <param name="term"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Solutions.ISolution.Dump(System.IO.TextWriter)">
            <summary>
            Dumps the solution out to a text file for debugging purposes.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:Microsoft.Pex.Engine.Solutions.ISolution.MethodInvocations">
            <summary>
            Gets the method invocations.
            </summary>
            <value>The method invocations.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.Explorable.PexExplorableSequence">
            <summary>
            Default implementation of <see cref="T:Microsoft.Pex.Engine.Explorable.IPexExplorableSequence"/>
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableSequence.#ctor(Microsoft.Pex.Engine.Explorable.IPexExplorable,Microsoft.ExtendedReflection.Metadata.Method[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.Explorable.PexExplorableSequence"/> class.
            </summary>
            <param name="explorable">The explorable.</param>
            <param name="mutationMethods">The mutation methods.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableSequence.TryCreateCode(Microsoft.Pex.Engine.Explorable.IPexExplorableCreateCodeContext)">
            <summary>
            If no custom code expression can be created, the <see cref="P:Microsoft.Pex.Engine.Explorable.PexExplorableSequence.ExplorationMethod"/> will be used.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableSequence.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterPriority>2</filterPriority>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableSequence.Equals(Microsoft.Pex.Engine.Explorable.IPexExplorableSequence)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableSequence.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <filterPriority>2</filterPriority>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.PexExplorableSequence.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.Explorable.PexExplorableSequence.Explorable">
            <summary>
            Gets the explorable.
            </summary>
            <value>The explorable.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Explorable.PexExplorableSequence.ExplorableType">
            <summary>
            Gets the type of the explorable.
            </summary>
            <value>The type of the explorable.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Explorable.PexExplorableSequence.ExplorationMethod">
            <summary>
            Gets the exploration method.
            </summary>
            <value>The exploration method.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Explorable.PexExplorableSequence.MutationMethods">
            <summary>
            Gets the mutation methods.
            </summary>
            <value>The mutation methods.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.TestFrameworks.IPexTestFrameworkManager">
            <summary>
            Test framework manager
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.IPexTestFrameworkManager.CreateTestFramework(Microsoft.Pex.Engine.TestFrameworks.IPexTestFrameworkFactory)">
            <summary>
            Creates a test framework.
            </summary>
            <param name="testFrameworkFactory">The test framework factory.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.IPexTestFrameworkManager.AddTestFramework(Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework)">
            <summary>
            Adds the specified test framework.
            </summary>
            <param name="testFramework">The test framework.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.IPexTestFrameworkManager.TryGetReferencedTestFramework(Microsoft.ExtendedReflection.Collections.ICountable{Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName},Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework@)">
            <summary>
            Tries to guess a test framework from a list of assembly references
            </summary>
            <param name="referencedAssemblies"></param>
            <param name="testFramework"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.IPexTestFrameworkManager.TryGetTestFramework(System.String,Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework@)">
            <summary>
            Tries to get a named test framework, or it guesses a default framework if the name is null.
            </summary>
            <param name="name">The name.</param>
            <param name="testFramework">The test framework.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.IPexTestFrameworkManager.TestFrameworks">
            <summary>
            Gets the loaded test frameworks.
            </summary>
            <value>The test frameworks.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.IPexTestFrameworkManager.DefaultTestFramework">
            <summary>
            Gets or sets the default test framework.
            </summary>
            <remarks>
            Must be added to the test framework list first
            </remarks>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.IPexTestFrameworkManager.DefaultTestFrameworkSilverlight">
            <summary>
            Gets or sets the default test framework for Silverlight projects
            </summary>
            <remarks>
            Must be added to the test framework list first
            </remarks>
        </member>
        <member name="T:Microsoft.Pex.Engine.TestGeneration.IPexTestExplorationGenerator">
            <summary>
            Test exploration generator
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestGeneration.IPexTestExplorationGenerator.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestGeneration.IPexTestExplorationGenerator.PublishTest(Microsoft.Pex.Engine.IPexGeneratedTest)">
            <summary>
            Publishes the test.
            </summary>
            <param name="test">The test.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestGeneration.IPexTestExplorationGenerator.CreateTestMethod(System.Boolean)">
            <summary>
            Creates the test method.
            </summary>
            <param name="static">whether the generated test is static</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestGeneration.IPexTestExplorationGenerator.RemoveTestMethod(Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder)">
            <summary>
            Removes the test method.
            </summary>
            <param name="method">The method.</param>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestGeneration.IPexTestExplorationGenerator.Opened">
            <summary>
            Gets a value indicating whether this <see cref="T:Microsoft.Pex.Engine.TestGeneration.IPexTestExplorationGenerator"/> is opened.
            </summary>
            <value><c>true</c> if opened; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.TestGeneration.IPexTestHasher">
            <summary>
            Pex test hasher
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestGeneration.IPexTestHasher.IsSupported">
            <summary>
            Determines whether test hashing is supported
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestGeneration.IPexTestHasher.Hash(Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.ExtendedReflection.Metadata.Method,Microsoft.ExtendedReflection.Metadata.MethodDefinition,Microsoft.ExtendedReflection.Metadata.TypeEx,System.Boolean,System.Boolean)">
            <summary>
            Hashes the specified method type.
            </summary>
            <param name="fixtureType">Type of the fixture.</param>
            <param name="explorationMethod">The exploration method.</param>
            <param name="method">The method.</param>
            <param name="exceptionType">Type of the exception.</param>
            <param name="isFailure">if set to <c>true</c> [is failure].</param>
            <param name="isHosted"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestGeneration.IPexTestHasher.Hash(Microsoft.Pex.Engine.IPexGeneratedTest)">
            <summary>
            Hashes the specified generated test.
            </summary>
            <param name="test">The test.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.TestGeneration.IPexTestOrganizer">
            <summary>
            Pex test organizer
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestGeneration.IPexTestOrganizer.Initialize">
            <summary>
            Initializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestGeneration.IPexTestOrganizer.AddAssemblyBuilders(System.Collections.Generic.IEnumerable{Microsoft.ExtendedReflection.Metadata.Builders.AssemblyDefinitionBuilder})">
            <summary>
            Adds auxiliary assembly builders that must be embedded in the generated tests
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestGeneration.IPexTestOrganizer.BeginTestGeneration">
            <summary>
            Begins the test generation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestGeneration.IPexTestOrganizer.FinishTestGeneration">
            <summary>
            Finishes the test generation.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestGeneration.IPexTestOrganizer.GetVisibilityContextOfFixtureTests(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Gets the visibility context of tests located in the given fixture type.
            </summary>
            <param name="fixtureType">Type of the fixture.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestGeneration.IPexTestOrganizer.GetVisibilityContextOfFixtures(Microsoft.ExtendedReflection.Metadata.AssemblyEx)">
            <summary>
            Gets the visibility of fixtures
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestGeneration.IPexTestOrganizer.CreateExplorationGenerator(Microsoft.Pex.Engine.PexExplorationBase)">
            <summary>
            Creates the exploration generator.
            </summary>
            <param name="exploration">The exploration.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestGeneration.IPexTestOrganizer.Project">
            <summary>
            Gets the project.
            </summary>
            <value>The project.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.TestGeneration.IPexTestMethodGenerator">
            <summary>
            Test method generator
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestGeneration.IPexTestMethodGenerator.TryAddTestCase(Microsoft.Pex.Engine.ComponentModel.IPexPathComponent,Microsoft.ExtendedReflection.Interpretation.IObjectId,System.Int32,System.Exception,System.Boolean,Microsoft.Pex.Engine.Exceptions.IPexExceptionValidator,System.String,System.String,Microsoft.Pex.Engine.PexGeneratedTestResult,Microsoft.Pex.Engine.Exceptions.PexExceptionState,Microsoft.Pex.Engine.PexGeneratedTestResultStatus,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.Pex.Engine.Injection.PexGeneratedInjectedException},Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.Pex.Engine.Injection.PexGeneratedInjectedValue},Microsoft.ExtendedReflection.Feedback.NamedValueCollection,Microsoft.Pex.Engine.GeneratedValues.PexObservedValueCollection,Microsoft.ExtendedReflection.Collections.IFiniteSet{System.Object},Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.Pex.Engine.FixIt.PexGeneratedFailureFixSuggestion},Microsoft.ExtendedReflection.Collections.ICountable{Microsoft.Pex.Engine.RuntimeContexts.IPexRuntimeContextRollback},System.String,System.String,System.Boolean,System.Boolean,System.Boolean,Microsoft.ExtendedReflection.Feedback.CodeUpdate,System.String,Microsoft.ExtendedReflection.Coverage.RunningCoverageEntry[],Microsoft.Pex.Engine.PexGeneratedTest@)">
            <summary>
            Tries to add the test case.
            </summary>
            <param name="host">host</param>
            <param name="thisReferenceObjectId">The this reference object id.</param>
            <param name="run">The run.</param>
            <param name="exception">The exception.</param>
            <param name="isFailure">Whether the test represents a failure.</param>
            <param name="validator">The exception validator if any.</param>
            <param name="failureText">optional if isFailure; may provide additional information about failure</param>
            <param name="failureWikiTopic">optional if isFailure; may point to a wiki topic why this failure was tagged as a failure</param>
            <param name="result">The result.</param>
            <param name="exceptionState">State of the exception.</param>
            <param name="status">The status.</param>
            <param name="injectedExceptions">The injected exceptions.</param>
            <param name="injectedValues">The injected values.</param>
            <param name="generatedValues">The freezer.</param>
            <param name="observedValues">observed values</param>
            <param name="instancedObjects">objects which have been moled</param>
            <param name="failureFixSuggestions">Suggestions</param>
            <param name="runtimeContextRollbacks">The runtime context rollbacks.</param>
            <param name="pathAssumption">The path assumption.</param>
            <param name="pathCondition">The path condition.</param>
            <param name="uncompilable">Whether the method body cannot be compiled.</param>
            <param name="hasExtendedMethodBody">Whether the test method body involves more that simply passing parameters. For example, object creation or oracle choices.</param>
            <param name="traceTouched">Whether the test uses Trace.</param>
            <param name="boundaryCodeUpdate">The boundary code update, if any.</param>
            <param name="boundaryDetails">The boundary details, if any.</param>
            <param name="_runningCoverages">The coverages if any.</param>
            <param name="test">generated test</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestGeneration.IPexTestMethodGenerator.TryGenerateTestMethod(Microsoft.Pex.Engine.ComponentModel.IPexPathComponent,Microsoft.ExtendedReflection.Interpretation.IObjectId,Microsoft.ExtendedReflection.Collections.IFiniteSet{System.Object},Microsoft.Pex.Engine.GeneratedValues.PexObservedValueCollection,Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder@,System.Boolean@)">
            <summary>
            Tries to the generate test method.
            </summary>
            <param name="host"></param>
            <param name="thisReferenceObjectId">The this reference object id.</param>
            <param name="instancedObjects">Object instances which have been moled.</param>
            <param name="observedValues">The observed values</param>
            <param name="testMethod">The test method.</param>
            <param name="uncompilable">Whether the method body cannot be compiled.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestGeneration.IPexTestMethodGenerator.RemoveTestMethod(Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder)">
            <summary>
            Removes a test method.
            </summary>
            <param name="method">The method.</param>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestGeneration.IPexTestMethodGenerator.CodeCreationContext">
            <summary>
            Gets the code creation context
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Injection.IPexExceptionInjectorOwner">
            <summary>
            Interface that identifies exception injector
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Injection.IPexExceptionInjectorOwner.UncreatableExceptionType(Microsoft.Pex.Engine.ComponentModel.IPexComponent,System.Type)">
            <summary>
            Marks a potentially relevant exception type as uncreatable
            </summary>
            <param name="host">The host.</param>
            <param name="exceptionType">Type of the exception.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Injection.IPexExceptionInjectorOwner.AllowExceptionSubtypes(Microsoft.Pex.Engine.ComponentModel.IPexComponent)">
            <summary>
            Whether exception subtypes are allowed.
            </summary>
            <param name="host">The host.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.Domains.IPexTypeForMatchingProvider">
            <summary>
            An on-demand type matcher
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Domains.IPexTypeForMatchingProvider.TryGetTypesForMatching(Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.TypeEx}@)">
            <summary>
            Given a type populates the domain manager
            </summary>
            <param name="type"></param>
            <param name="hints"></param>
        </member>
        <member name="T:Microsoft.Pex.Framework.Suppression.PexSuppressStackFrameAttributeBase">
            <summary>
            Filters out irrelevant stack frame in stack traces
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Suppression.PexSuppressStackFrameAttributeBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Suppression.PexSuppressStackFrameAttributeBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Suppression.PexSuppressStackFrameAttributeBase.CreateFilter(Microsoft.Pex.Engine.ComponentModel.IPexComponent)">
            <summary>
            Creates a stack frame filter
            </summary>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Suppression.PexSuppressStackFrameAttributeBase.BeforeExecution(Microsoft.Pex.Engine.ComponentModel.IPexComponent)">
            <summary>
            Callback that is executed before the execution  starts.
            </summary>
            <param name="host">The host.</param>
            <returns>some data</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Suppression.PexSuppressStackFrameAttributeBase.AfterExecution(Microsoft.Pex.Engine.ComponentModel.IPexComponent,System.Object)">
            <summary>
            Callback that is executed after the execution ends.
            </summary>
            <param name="host">The host.</param>
            <param name="data">The data returned by <see cref="M:Microsoft.Pex.Framework.Suppression.PexSuppressStackFrameAttributeBase.BeforeExecution(Microsoft.Pex.Engine.ComponentModel.IPexComponent)"/>.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Suppression.PexSuppressStackFrameAttributeBase.Initialize(Microsoft.ExtendedReflection.ComponentModel.IEngine)">
            <summary>
            this method provides the opportunity to query services and interact with them.
            </summary>
            <param name="engine">The engine.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Suppression.PexSuppressStackFrameAttributeBase.Load(Microsoft.ExtendedReflection.ComponentModel.IContainer)">
            <summary>
            This method provides the opportunity install or substitute services.
            </summary>
            <param name="engineContainer">The exploration container.</param>
        </member>
        <member name="T:Microsoft.Pex.Engine.RuntimeContexts.IPexRuntimeContextRollback">
            <summary>
            An action that serializes the rollback as code
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.RuntimeContexts.IPexRuntimeContextRollback.UpdateGeneratedTest(Microsoft.Pex.Engine.IPexGeneratedTest,Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder,Microsoft.Pex.Engine.TestGeneration.IPexCodeCreationContext)">
            <summary>
            Updates the generated test as needed
            </summary>
            <param name="test">The test.</param>
            <param name="testMethod">The test method.</param>
            <param name="codeCreationContext">The code creation context.</param>
        </member>
        <member name="T:Microsoft.Pex.Framework.Creatable.PexCreatableAttributeBase">
            <summary>
            Attribute to define how instances of a particular type can be created
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.PexCreatableAttributeBase.#ctor(System.Type)">
            <summary>
            Loads the type of the creatable.
            </summary>
            <param name="creatableType">Type of the creatable.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.PexCreatableAttributeBase.TryInstantiate(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,Microsoft.ExtendedReflection.Metadata.TypeEx[],Microsoft.Pex.Engine.Creatable.IPexCreatable@)">
            <summary>
            Tries to instantiate this definition with the specified arguments.
            </summary>
            <param name="host">The host.</param>
            <param name="genericTypeArguments">The type arguments.</param>
            <param name="creatable">The creatable.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.PexCreatableAttributeBase.BeforeExploration(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent)">
            <summary>
            Callback that is executed before the exploration starts.
            </summary>
            <param name="host">The host.</param>
            <returns>some data</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.PexCreatableAttributeBase.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.Creatable.PexCreatableAttributeBase.CreatableTypeDefinition">
            <summary>
            Gets the type to be created.
            </summary>
            <value>The created type.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.Libraries.MscorlibLibrary.StackExplorableAttribute">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Libraries.MscorlibLibrary.PexSingletons">
            <summary>
            Helper class to create values
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Libraries.MscorlibLibrary.PexSingletons.InvariantCultureTextInfo">
            <summary>
            Gets the invariants culture text info.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.Libraries.PexFrameworkLibrary.PexCoverageFilterCompilerGeneratedMethodsAttribute">
            <summary>
            Filters out compiler generated methods (such as IEnumerator.Reset)
            that are mostly dead code and mess up coverage numbers.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Coverage.PexCoverageFilterAttributeBase">
            <summary>
            Base class Attribute for coverage filtering
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Coverage.PexCoverageFilterAttributeBase.#ctor(Microsoft.Pex.Framework.Coverage.PexCoverageDomain)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Coverage.PexCoverageFilterAttributeBase"/> class.
            </summary>
            <param name="coverageDomain">The coverage domain.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Coverage.PexCoverageFilterAttributeBase.CreateFilter(Microsoft.Pex.Engine.ComponentModel.IPexDecoratedComponentElement)">
            <summary>
            Creates the filter
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Coverage.PexCoverageFilterAttributeBase.Decorate(Microsoft.ExtendedReflection.Metadata.Names.Name,Microsoft.Pex.Engine.ComponentModel.IPexDecoratedComponentElement)">
            <summary>
            Decorates component with custom decorators
            </summary>
            <param name="location">The location of the decorator.</param>
            <param name="host">The host.</param>
        </member>
        <member name="P:Microsoft.Pex.Framework.Coverage.PexCoverageFilterAttributeBase.CoverageDomain">
            <summary>
            Gets the domain.
            </summary>
            <value>The domain.</value>
        </member>
        <member name="M:Microsoft.Pex.Engine.Libraries.PexFrameworkLibrary.PexCoverageFilterCompilerGeneratedMethodsAttribute.CreateFilter(Microsoft.Pex.Engine.ComponentModel.IPexDecoratedComponentElement)">
            <summary>
            Creates the filter
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.Coverage.PexCoverageFilterBase`1">
            <summary>
            Base class for <see cref="T:Microsoft.ExtendedReflection.Coverage.ICoverageFilter"/>
            implementations
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Coverage.PexCoverageFilterBase`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Coverage.PexCoverageFilterBase`1"/> class.
            </summary>
            <param name="owner">The owner.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Coverage.PexCoverageFilterBase`1.GetCoverageDomain(System.Boolean)">
            <summary>
            Gets the coverage domain.
            </summary>
            <param name="selected">if set to <c>true</c> [selected].</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Coverage.PexCoverageFilterBase`1.IsIgnored(Microsoft.ExtendedReflection.Metadata.ModuleEx)">
            <summary>
            Gets a value indicating wheter the assembly is ignored.
            </summary>
            <param name="module">The module.</param>
            <returns>
            	<c>true</c> if the specified module is ignored; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Coverage.PexCoverageFilterBase`1.TryGetDomain(Microsoft.ExtendedReflection.Metadata.MethodDefinition,Microsoft.ExtendedReflection.Coverage.CoverageDomain@)">
            <summary>
            Gets the <see cref="T:Microsoft.ExtendedReflection.Coverage.CoverageDomain"/> of the method
            </summary>
            <param name="method">The method.</param>
            <param name="domain">The domain.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Coverage.PexCoverageFilterBase`1.IsSelected(Microsoft.ExtendedReflection.Metadata.MethodDefinition)">
            <summary>
            Determines whether the specified method is selected.
            </summary>
            <param name="method">The method.</param>
            <returns>
            	<c>true</c> if the specified method is selected; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.Coverage.PexCoverageFilterBase`1.Owner">
            <summary>
            Gets the owner.
            </summary>
            <value>The owner.</value>
        </member>
        <member name="T:Microsoft.Pex.Framework.Suppression.PexSuppressUninstrumentedMethodAttributeBase">
            <summary>
            Abstract base class for uninstrumented call filters
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Suppression.PexSuppressUninstrumentedMethodAttributeBase.CreateFilter(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent)">
            <summary>
            Creates the filter
            </summary>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Suppression.PexSuppressUninstrumentedMethodAttributeBase.BeforeExploration(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent)">
            <summary>
            Callback that is executed before the exploration starts.
            </summary>
            <param name="host">The host.</param>
            <returns>some data</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Suppression.PexSuppressUninstrumentedMethodAttributeBase.AfterExploration(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,System.Object)">
            <summary>
            Callback that is executed after the exploration ends.
            </summary>
            <param name="host">The host.</param>
            <param name="data">The data returned by BeforeExploration.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Suppression.PexSuppressUninstrumentedMethodAttributeBase.Initialize(Microsoft.Pex.Engine.ComponentModel.IPexExplorationEngine)">
            <summary>
            Initializes the specified exploration package. May interact with services.
            </summary>
            <param name="host">The host.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Suppression.PexSuppressUninstrumentedMethodAttributeBase.Load(Microsoft.ExtendedReflection.ComponentModel.IContainer)">
            <summary>
            This method provides the opportunity install or substitute services.
            </summary>
            <param name="explorationContainer">The exploration container.</param>
        </member>
        <member name="T:Microsoft.Pex.Framework.Instrumentation.PexMonitorSettingsAttributeBase">
            <summary>
            Abstract base class for attribute providing configuration settings
            for launching the monitored process.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Instrumentation.PexMonitorSettingsAttributeBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Instrumentation.PexMonitorSettingsAttributeBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Instrumentation.PexMonitorSettingsAttributeBase.GetService(System.Type)">
            <summary>
            Gets a service if available
            </summary>
            <param name="serviceType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Instrumentation.PexMonitorSettingsAttributeBase.CreateInstrumentationProvider">
            <summary>
            Creates an instrumentation providedr
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.Instrumentation.PexMonitorSettingsAttributeBase.DisablingEnvironmentVariable">
            <summary>
            Gets or sets the name of the environment variable that can be set to disable this attribute
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Framework.Instrumentation.PexMonitorSettingsAttributeBase.IsDisabled">
            <summary>
            Gets a value indicating if these settings were disabled
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Injection.PexExceptionInjectorBase`1">
            <summary>
            Directly throws any exception the called method might throw.
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Injection.PexExceptionInjectorBase`1.Owner">
            <summary>
            Owner
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Injection.PexExceptionInjectorBase`1.#ctor(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,`0)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Injection.PexExceptionInjectorBase`1.CheckWhetherExceptionTypesAreValidMatchingTypes(System.Type[])">
            <summary>
            Makes sure that the domain provider knows types .
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Injection.PexExceptionInjectorBase`1.ConsiderThrow(Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter,System.Type[],System.String)">
            <summary>
            Consider to throw an exception.
            </summary>
            <param name="interpreter">The interpreter.</param>
            <param name="specifiedExceptions">The specified exceptions.</param>
            <param name="id">The id.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Injection.PexExceptionInjectorBase`1.DoThrow(Microsoft.ExtendedReflection.Interpretation.Interpreter.InstructionInterpreter,Microsoft.Pex.Engine.Choices.IPexEarlyMethodCallChoiceSession,System.Type[])">
            <summary>
            Throw an exception.
            </summary>
            <param name="interpreter">The interpreter.</param>
            <param name="callOracle">The call oracle.</param>
            <param name="specifiedExceptions">The specified exceptions.</param>
        </member>
        <member name="P:Microsoft.Pex.Engine.Injection.PexExceptionInjectorBase`1.WikiTopic">
            <summary>
            Gets the wiki topic.
            </summary>
            <value>The wiki topic.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.FixIt.PexGeneratedFailureFixSuggestionKind">
            <summary>
            Fix suggestion kind
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.FixIt.PexGeneratedFailureFixSuggestionKind.Precondition">
            <summary>
            Precondition
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.FixIt.PexGeneratedFailureFixSuggestionKind.Invariant">
            <summary>
            Invariant
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.FixIt.PexGeneratedFailureFixSuggestionKind.ChoiceCondition">
            <summary>
            Condition on choice
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.FixIt.PexGeneratedFailureFixSuggestionKind.ExternalResultCondition">
            <summary>
            Condition on external result
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Injection.PexGeneratedInjectedValue">
            <summary>
            A generated injected value.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Injection.PexGeneratedInjectedValue.TryGetStackTrace(Microsoft.ExtendedReflection.Symbols.StackTraceName@)">
            <summary>
            Gets the stack trace (might be null)
            </summary>
            <param name="trace">The trace.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Injection.PexGeneratedInjectedValue.#ctor(System.String,System.String,System.Object,System.Object,Microsoft.ExtendedReflection.Symbols.StackTraceName)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.Injection.PexGeneratedInjectedValue"/> class.
            </summary>
            <param name="reason">The reason.</param>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="originalValue">The original value.</param>
            <param name="value">The value.</param>
            <param name="stackTrace">The stack trace.</param>
        </member>
        <member name="P:Microsoft.Pex.Engine.Injection.PexGeneratedInjectedValue.Reason">
            <summary>
            Gets the reason.
            </summary>
            <value>The reason.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Injection.PexGeneratedInjectedValue.WikiTopic">
            <summary>
            Gets the help topic.
            </summary>
            <value>The help topic.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Injection.PexGeneratedInjectedValue.OriginalValue">
            <summary>
            Gets the original value.
            </summary>
            <value>The original value.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Injection.PexGeneratedInjectedValue.OriginalValueDescription">
            <summary>
            Gets a description of the original value.
            </summary>
            <value>The original value description.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Injection.PexGeneratedInjectedValue.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Injection.PexGeneratedInjectedValue.ValueDescription">
            <summary>
            Gets the value description.
            </summary>
            <value>The value description.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.Coverage.IPexCoverageManager">
            <summary>
            Coverage manager
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Coverage.IPexCoverageManager.GetCoverageFilter(Microsoft.Pex.Engine.PexDecoratedComponentElementBase)">
            <summary>
            Gets the coverage filter.
            </summary>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Coverage.IPexCoverageManager.TryGetAssemblyCoverage(Microsoft.ExtendedReflection.Coverage.CoverageEntry@)">
            <summary>
            Tries to get the assembly coverage entry.
            </summary>
            <param name="assemblyCoverageEntry">The assemblyCoverageEntry.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Coverage.IPexCoverageManager.TryGetFixtureCoverageBuilder(Microsoft.ExtendedReflection.Coverage.TaggedBranchCoverageBuilder{Microsoft.Pex.Engine.PexGeneratedTestName}@)">
            <summary>
            Tries to get the current fixture coverage vector
            </summary>
            <param name="cov"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Coverage.IPexCoverageManager.TryGetAssemblyCoverageBuilder(Microsoft.ExtendedReflection.Coverage.TaggedBranchCoverageBuilder{Microsoft.Pex.Engine.PexGeneratedTestName}@)">
            <summary>
            Tries to get the current assembly coverage vector
            </summary>
            <param name="cov"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Coverage.IPexCoverageManager.PrepareAssemblyCoverage(Microsoft.Pex.Engine.PexAssembly)">
            <summary>
            Prepares the assembly coverage for publishing.
            </summary>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Coverage.IPexCoverageManager.PublishAssemblyCoverage(Microsoft.Pex.Engine.PexAssembly)">
            <summary>
            Publishes the assembly coverage.
            </summary>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Coverage.IPexCoverageManager.PrepareFixtureCoverage(Microsoft.Pex.Engine.PexFixture)">
            <summary>
            Prepares the fixture coverage for publishing.
            </summary>
            <param name="fixture">The fixture.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Coverage.IPexCoverageManager.PublishFixtureCoverage(Microsoft.Pex.Engine.PexFixture)">
            <summary>
            Publishes the fixture coverage.
            </summary>
            <param name="fixture">The fixture.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Coverage.IPexCoverageManager.GenerateCoverageReports">
            <summary>
            Generates the html generated source file to html
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Coverage.IPexCoverageManager.RenderCoverageReports">
            <summary>
            Renders the xml generated source file to html
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Coverage.IPexCoverageManager.MergeExplorationCoverage(Microsoft.Pex.Engine.PexExplorationBase,Microsoft.ExtendedReflection.Coverage.TaggedBranchCoverageBuilder{Microsoft.Pex.Engine.PexGeneratedTestName})">
            <summary>
            Merges exploration coverage into the fixture and assembly coverage
            </summary>
            <param name="exploration">current exploration</param>
            <param name="taggedBranchCoverageBuilder"></param>
        </member>
        <member name="E:Microsoft.Pex.Engine.Coverage.IPexCoverageManager.BeforePublishAssemblyCoverage">
            <summary>
            Raised before publish (and forgetting) the assembly coverage data
            </summary>
        </member>
        <member name="E:Microsoft.Pex.Engine.Coverage.IPexCoverageManager.BeforePrepareFixtureCoverage">
            <summary>
            Raised before publish (and forgetting) the assembly coverage data
            </summary>
        </member>
        <member name="E:Microsoft.Pex.Engine.Coverage.IPexCoverageManager.BeforePublishFixtureCoverage">
            <summary>
            Raised before publish (and forgetting) the assembly coverage data
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Reports.IPexReportManager">
            <summary>
            Pex report manager
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Reports.IPexReportManager.CreateGraphWriter(System.String,System.String)">
            <summary>
            Creates a new instance of a DGML graph writer. Logs the graph when disposed
            </summary>
            <param name="fileName"></param>
            <param name="title"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Reports.IPexReportManager.GetPreviousReportDirectories">
            <summary>
            Gets the previous report directories.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Reports.IPexReportManager.GetRelativeCoverageFile(System.String)">
            <summary>
            Gets the relative coverage file name.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Reports.IPexReportManager.GetRelativeFixtureHtmlReport(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Gets the relative fixture HTML report file name.
            </summary>
            <param name="fixture">The fixture.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Reports.IPexReportManager.GetRelativeTestSource(System.String)">
            <summary>
            Gets the relative test source file name.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Reports.IPexReportManager.RelativizePathToReportPath(System.String)">
            <summary>
            Relativizes the path to report path.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Reports.IPexReportManager.RelativizePathToStartupPath(System.String)">
            <summary>
            Relativizes the path to startup path.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Reports.IPexReportManager.TryGetLastXmlReport(Microsoft.Pex.Engine.Logging.PexXmlReport@)">
            <summary>
            Tries to get the last XML report.
            </summary>
            <param name="lastXmlReport">The last XML report.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Reports.IPexReportManager.GenerateReports">
            <summary>
            Generates the reports.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Reports.IPexReportManager.GetFixtureXmlReport(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Gets the fixture XML report file name.
            </summary>
            <param name="fixture">The fixture.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Reports.IPexReportManager.GeneratePexReport">
            <summary>
            Generates the pex report.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Reports.IPexReportManager.PublishPexReport">
            <summary>
            Publishes the pex report.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.Reports.IPexReportManager.ReportExtension">
            <summary>
            Gets the file extension (including the dot)
            of the xml report
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.Reports.IPexReportManager.ReportFileName">
            <summary>
            Gets the xml report file name
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.Reports.IPexReportManager.ReportFileDialogFilter">
            <summary>
            Gets the dialog filter to select xml reports
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.Reports.IPexReportManager.CoveragePath">
            <summary>
            Gets the coverage path.
            </summary>
            <value>The coverage path.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Reports.IPexReportManager.FixtureOutputPath">
            <summary>
            Gets the fixture output path.
            </summary>
            <value>The fixture output path.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Reports.IPexReportManager.FixturePath">
            <summary>
            Gets the fixture path.
            </summary>
            <value>The fixture path.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Reports.IPexReportManager.GraphPath">
            <summary>
            Gets the path to the directory containing the DGML graphs
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.Reports.IPexReportManager.ExceptionTreeXml">
            <summary>
            Gets the exception tree xml path
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.Reports.IPexReportManager.ExceptionTreeReport">
            <summary>
            Gets the exception tree html path
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.Reports.IPexReportManager.LastTestPath">
            <summary>
            Gets the last test path.
            </summary>
            <value>The last test path.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Reports.IPexReportManager.Report">
            <summary>
            Gets the report file name.
            </summary>
            <value>The report.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Reports.IPexReportManager.ReportUri">
            <summary>
            Gets the report URI.
            </summary>
            <value>The report URI.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Reports.IPexReportManager.TestPath">
            <summary>
            Gets the test path.
            </summary>
            <value>The test path.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Reports.IPexReportManager.XmlReport">
            <summary>
            Gets the XML report file name.
            </summary>
            <value>The XML report.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Reports.IPexReportManager.OverviewXmlReport">
            <summary>
            Get the slimmed XML report file name.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.FixIt.IPexFixItManager">
            <summary>
            Manager for IFixItEmitterFactories
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.FixIt.IPexFixItManager.AddFixItMethodFilter(Microsoft.Pex.Engine.FixIt.IPexFixItMethodFilter)">
            <summary>
            Adds a method filter to the manager
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:Microsoft.Pex.Engine.FixIt.IPexFixItManager.SkipFixesFromMethod(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Gets a value indicating whether Pex should not emit fixes for a particular method
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.FixIt.IPexFixItManager.AddFixItEmitterFactory(Microsoft.Pex.Engine.FixIt.IPexFixItEmitterFactory)">
            <summary>
            Adds the fix it emitter factory.
            </summary>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.FixIt.IPexFixItManager.TryGetBestFixItEmitterFactory(Microsoft.ExtendedReflection.Metadata.MethodDefinition,Microsoft.Pex.Engine.FixIt.IPexFixItEmitterFactory@)">
            <summary>
            Tries to retrive the best fix it emitter factory.
            </summary>
            <param name="method">The method.</param>
            <param name="factory">The factory.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.FixIt.IPexFixItManager.MethodFilters">
            <summary>
            Gets the list of method filters
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.FixIt.IPexFixItManager.FixItEmitterFactories">
            <summary>
            Gets the fix it emitters.
            </summary>
            <value>The fix it emitters.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.PostAnalysis.PexTrackedStaticFieldId">
            <summary>
            Id for tracked values.
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PostAnalysis.PexTrackedStaticFieldId.Field">
            <summary>
            Tracked field.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackedStaticFieldId.#ctor(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Creates an instance of this type.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackedStaticFieldId.GetPersistentHashCode">
            <summary>
            Gets a strong, persistent hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackedStaticFieldId.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackedStaticFieldId.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackedStaticFieldId.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.PostAnalysis.PexTrackedStaticFieldId.Description">
            <summary>
            Textual description of the symbol.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PostAnalysis.PexTrackedStaticFieldId.ObjectCreationTime">
            <summary>
            When the object (or all objects within this value) was created.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Pex.Engine.Sequences.IPexTargetContext">
            <summary>
            A branch target context
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.Sequences.IPexTargetContext.TargetNode">
            <summary>
            Gets the target node.
            </summary>
            <value>The target node.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Sequences.IPexTargetContext.PathCondition">
            <summary>
            Gets the path condition.
            </summary>
            <value>The path condition.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Sequences.IPexTargetContext.TargetCondition">
            <summary>
            Gets the target condition.
            </summary>
            <value>The target condition.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.Sequences.IPexTargetStrategy">
            <summary>
            Manages target contexts for a particular target node.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Sequences.IPexTargetStrategy.TryGetBest(Microsoft.Pex.Engine.Sequences.IPexTargetContext@)">
            <summary>
            Tries to query the best target context to potentially cover the target node.
            </summary>
            <param name="targetContext">The target context.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Sequences.IPexTargetStrategy.AddTargetContext(Microsoft.Pex.Engine.Sequences.IPexTargetContext)">
            <summary>
            Adds the sequence to the manager
            </summary>
            <param name="targetContext">The target context.</param>
        </member>
        <member name="P:Microsoft.Pex.Engine.Sequences.IPexTargetStrategy.TargetBranch">
            <summary>
            Gets the target branch.
            </summary>
            <value>The target location.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.Sequences.IPexTargetStrategyManager">
            <summary>
            Target strategy manager
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Sequences.IPexTargetStrategyManager.AttachStrategyFactory(Microsoft.Pex.Engine.Sequences.IPexTargetStrategyFactory)">
            <summary>
            Attaches a strategy factory.
            </summary>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Sequences.IPexTargetStrategyManager.RegisterCoverage(Microsoft.ExtendedReflection.Coverage.IBranchCoverage)">
            <summary>
            Registers that a run achieved a particular coverage.
            </summary>
            <param name="branchCoverage">The branch coverage.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Sequences.IPexTargetStrategyManager.RegisterFailure(Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Interpretation.Term},Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Registers that a constraint system could not be solved.
            </summary>
            <param name="node">The node.</param>
            <param name="feasiblePrefix">The feasible prefix.</param>
            <param name="suffix">The suffix.</param>
        </member>
        <member name="T:Microsoft.Pex.Engine.Sequences.PexTargetStrategyBase">
            <summary>
            Abstract base class for <see cref="T:Microsoft.Pex.Engine.Sequences.IPexTargetStrategy"/>
            implementations
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Sequences.PexTargetStrategyBase.#ctor(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,Microsoft.ExtendedReflection.Metadata.CodeBranch)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.Sequences.PexTargetStrategyBase"/> class.
            </summary>
            <param name="host">The host.</param>
            <param name="targetBranch">The target branch.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Sequences.PexTargetStrategyBase.TryGetBest(Microsoft.Pex.Engine.Sequences.IPexTargetContext@)">
            <summary>
            Tries to query the best target context to potentially cover the target node.
            </summary>
            <param name="targetContext">The target context.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Sequences.PexTargetStrategyBase.AddTargetContext(Microsoft.Pex.Engine.Sequences.IPexTargetContext)">
            <summary>
            Adds the sequence to the manager
            </summary>
            <param name="targetContext">The target context.</param>
        </member>
        <member name="P:Microsoft.Pex.Engine.Sequences.PexTargetStrategyBase.TargetBranch">
            <summary>
            Gets the target branch.
            </summary>
            <value>The target location.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.Injection.IPexExceptionTypeFilter">
            <summary>
            Filter for exception types
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Injection.IPexExceptionTypeFilter.Include(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Whether an exception type should be included.
            </summary>
            <param name="exceptionType"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.TestFrameworks.AttributeBasedTestFrameworkBase">
            <summary>
            Abstract base class for test framework using custom attributes
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase">
            <summary>
            Abstract base class for test framework implementation
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework">
            <summary>
            Definition of a managed test framework
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework.TryGetAssemblyName(Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName@)">
            <summary>
            Tries to get the assembly name of the framework main's assembly if any. This name is used
            to automatically discover test frameworks, based the assembly references
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework.TryGetDirectory(System.String@)">
            <summary>
            Tries to get the directory where the test framework assemblies are located
            </summary>
            <param name="directory"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework.BeforeGeneration(Microsoft.ExtendedReflection.Metadata.Builders.AssemblyDefinitionBuilder)">
            <summary>
            Test generation is about to start
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework.AfterGeneration(Microsoft.ExtendedReflection.Metadata.Builders.AssemblyDefinitionBuilder@)">
            <summary>
            Finished test generation and passes addiotional code if necessary
            </summary>
            <param name="embeddedCode">The embedded code.</param>
            <returns>true if anything has to be serialized</returns>
            <remarks>
            This code is serialized at the end of the test generation process
            </remarks>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework.MarkTestClass(Microsoft.ExtendedReflection.Metadata.Builders.TypeDefinitionBuilder)">
            <summary>
            Marks as test class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework.MarkTestMethod(Microsoft.Pex.Engine.PexExplorationBase,Microsoft.Pex.Engine.IPexGeneratedTest,Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder)">
            <summary>
            Marks the test method.
            </summary>
            <param name="exploration">The exploration that generated the test</param>
            <param name="test">The test.</param>
            <param name="method">The method.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework.MarkIgnored(Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder,System.String)">
            <summary>
            Marks the method as ignored.
            </summary>
            <param name="method">The method.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework.TryMarkExpectedException(Microsoft.ExtendedReflection.Metadata.VisibilityContext,Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder,System.Exception)">
            <summary>
            Tries to marks a test method as expecting a particular exception type
            </summary>
            <param name="visibility">The visibility.</param>
            <param name="method">The method.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework.TryMarkHosted(Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder)">
            <summary>
            Tries to annotate the test method so that it runs hosted.
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework.IsHosted(Microsoft.ExtendedReflection.Metadata.MethodDefinition)">
            <summary>
            Gets a value indicating if the unit test has to be run hosted
            </summary>
            <param name="methodDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework.EmitInconclusive(Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder,System.String)">
            <summary>
            Emits code to make the test inconclusive
            </summary>
            <param name="method">The method.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework.IsTestCode(Microsoft.ExtendedReflection.Metadata.TypeDefinition)">
            <summary>
            Determines whether the target should be considered as test code
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework.IsFixture(Microsoft.ExtendedReflection.Metadata.TypeDefinition)">
            <summary>
            Determines whether the target is contains tests.
            </summary>
            <param name="target">The target.</param>
            <returns>
            	<c>true</c> if [is test fixture] [the specified target]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework.IsTest(Microsoft.ExtendedReflection.Metadata.TypeDefinition,Microsoft.ExtendedReflection.Metadata.MethodDefinition)">
            <summary>
            Determines whether the specified method is a unit test.
            </summary>
            <param name="fixtureType">the fixture type</param>
            <param name="method">The method.</param>
            <returns>
            	<c>true</c> if the specified method is test; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework.IsParameterizedTest(Microsoft.ExtendedReflection.Metadata.TypeDefinition,Microsoft.ExtendedReflection.Metadata.MethodDefinition)">
            <summary>
            Determines whether the specified method is a parameterized unit test.
            </summary>
            <param name="fixtureType">the fixture type</param>
            <param name="method">The method.</param>
            <returns>
            	<c>true</c> if the specified method is a parameterized test; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework.TryReadExpectedException(Microsoft.ExtendedReflection.Metadata.ICustomAttributeProviderEx,Microsoft.ExtendedReflection.Metadata.TypeEx@)">
            <summary>
            Tries to read the expected exception type from a
            ExceptionException attribute (or other decorator).
            </summary>
            <param name="target">The method.</param>
            <param name="exceptionType">Type of the exception.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework.IsFixtureIgnored(Microsoft.Pex.Engine.TestFrameworks.TestFrameworkTestSelection,Microsoft.ExtendedReflection.Metadata.TypeEx,System.String@)">
            <summary>
            Determines whether the fixture is ignored
            </summary>
            <param name="testSelection">The test selection.</param>
            <param name="fixtureType">Type of the fixture.</param>
            <param name="ignoreMessage">The ignore message.</param>
            <returns>
            	<c>true</c> if [is fixture ignored] [the specified test selection]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework.IsTestIgnored(Microsoft.Pex.Engine.TestFrameworks.TestFrameworkTestSelection,Microsoft.ExtendedReflection.Metadata.MethodDefinition,System.String@)">
            <summary>
            Determines whether the test is ignored
            </summary>
            <param name="testSelection">The test selection.</param>
            <param name="method">The method.</param>
            <param name="ignoreMessage">The ignore message.</param>
            <returns>
            	<c>true</c> if test should be ignored; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework.TryGetAssemblySetupTeardownMethods(Microsoft.ExtendedReflection.Metadata.AssemblyEx,Microsoft.ExtendedReflection.Metadata.Method@,Microsoft.ExtendedReflection.Metadata.Method@)">
            <summary>
            Tries to get the assembly set up tear down methods.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="setup">The setup.</param>
            <param name="teardown">The teardown.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework.TryGetFixtureSetupTeardownMethods(Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.ExtendedReflection.Metadata.Method@,Microsoft.ExtendedReflection.Metadata.Method@,Microsoft.ExtendedReflection.Metadata.Method@,Microsoft.ExtendedReflection.Metadata.Method@)">
            <summary>
            Tries to query the fixture setup teardown methods.
            </summary>
            <param name="type">The type.</param>
            <param name="fixtureSetup">The fixture setup.</param>
            <param name="fixtureTeardown">The fixture teardown.</param>
            <param name="testSetup">The test setup.</param>
            <param name="testTeardown">The test teardown.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework.TryGetStackFrameFilter(Microsoft.ExtendedReflection.Symbols.IStackFrameFilter@)">
            <summary>
            Tries to query the stack frame filter.
            </summary>
            <param name="filter">The filter.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework.TryGetUninstrumentedMethodFilter(Microsoft.ExtendedReflection.Logging.IUninstrumentedMethodFilter@)">
            <summary>
            Tries to query the uninstrumented method filter.
            </summary>
            <param name="filter">The filter.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework.TryGetTestProjectTemplate(Microsoft.ExtendedReflection.Emit.ILanguage,System.Boolean,System.String@,System.String@,System.String[]@)">
            <summary>
            Tries to provide the template name and language to create a new project in
            Visual Studio.
            </summary>
            <param name="language">The language.</param>
            <param name="silverlight">whether it should be a silverlight project</param>
            <param name="templateName">Name of the template.</param>
            <param name="languageName">Name of the language.</param>
            <param name="unwantedFiles">A list unwanted files that should be deleted once the template has run</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework.SupportsProjectBitness(Microsoft.ExtendedReflection.Monitoring.Bitness)">
            <summary>
            Gets a value indicating if the test framework supports the given bitness
            </summary>
            <param name="bitness"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework.TryGetConvertToParameterizedTest(Microsoft.ExtendedReflection.Metadata.MethodDefinition,Microsoft.ExtendedReflection.Feedback.CodeUpdate@)">
            <summary>
            Tries to create a codeupdate to convert a unit test method into a 'pex' parameterized method.
            </summary>
            <param name="methodDefinition"></param>
            <param name="convertUpdate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework.TryEmitAssertAreEqual(Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder,Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Tries to emit an assertion that checks that to values are equal. 
            Typically something like Assert.AreEqual&lt;T&gt;(expected, actual).
            Both values have been pushed on the stack.
            </summary>
            <param name="builder">The builder.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework.TryEmitAssertAreNotEqual(Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder,Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Tries to emit an assertion that checks that to values are not equal. 
            Typically something like Assert.AreNotEqual&lt;T&gt;(expected, actual).
            Both values have been pushed on the stack.
            </summary>
            <param name="builder">The builder.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework.TryEmitAssertIsTrue(Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder)">
            <summary>
            Tries to emit an assertion that checks whether a condition is true.
            Typically something like Assert.IsTrue&lt;T&gt;(condition).
            The condition has been pushed on the stack.
            </summary>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework.TryEmitAssertIsNull(Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder)">
            <summary>
            Tries to emit an assertion that checks whether a reference is null.
            Typically something like Assert.IsNull&lt;T&gt;(object).
            The object has been pushed on the stack.
            </summary>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework.TryEmitAssertIsNotNull(Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder)">
            <summary>
            Tries to emit an assertion that checks whether a reference is not null.
            Typically something like Assert.IsNotNull&lt;T&gt;(object).
            The object has been pushed on the stack.
            </summary>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework.TryRunTests(System.String,Microsoft.ExtendedReflection.Collections.ICountable{Microsoft.Pex.Engine.PexGeneratedTestName},System.String,Microsoft.ExtendedReflection.Collections.IIndexable{System.String},Microsoft.ExtendedReflection.Collections.ICountable{Microsoft.Pex.Engine.TestFrameworks.PexUnitTestResult}@)">
            <summary>
            Tries to executes the list of unit tests in <paramref name="testMethods"/>
            and returns the execution result.
            </summary>
            <param name="assemblyLocation">The assembly location.</param>
            <param name="tests">The tests.</param>
            <param name="outputPath">The output path.</param>
            <param name="assembliesWithCodeCoverage">Assemblies for which code coverage should be collected</param>
            <param name="testResults">The test results.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework.BeforeFixture(Microsoft.ExtendedReflection.Metadata.Builders.TypeDefinitionBuilder)">
            <summary>
            Called before adding types to a fixture
            </summary>
            <param name="typeDefinitionBuilder"></param>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework.AfterFixture(Microsoft.ExtendedReflection.Metadata.Builders.TypeDefinitionBuilder)">
            <summary>
            Called before serializing a fixture to disk
            </summary>
            <param name="typeDefinitionBuilder"></param>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework.GetAssemblyRunner(Microsoft.ExtendedReflection.Metadata.AssemblyEx)">
            <summary>
            Gets the assembly driver
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework.TryGetRequiredRuntimeVersion(System.String@)">
            <summary>
            Gets the required .NET runtime version for this test framework if any
            </summary>
            <param name="requiredFrameworkVersion"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework.Name">
            <summary>
            Gets the name that uniquely identifyies of the test framework
            </summary>
            <remarks>
            This name may not contain spaces.
            </remarks>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework.PrettyName">
            <summary>
            Gets the name to be shown in user interfaces.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework.SupportsPartialClasses">
            <summary>
            Gets a value indicating whether
            partial test classes
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework.SupportsStaticTestMethods">
            <summary>
            Gets a value indicating if this test framework supports static test methods
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework.SupportsTestReflection">
            <summary>
            Gets a value indicating whether this test framework supports test reflection.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework.SupportsDesktop">
            <summary>
            Gets a value indicating whether this test framework supports the desktop CLR
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework.SupportsSilverlight">
            <summary>
            Gets a value indicating whether this test framework supports Silverlight
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework.AssertionExceptionType">
            <summary>
            Gets the type of the assertion exception.
            </summary>
            <value>The type of the assertion exception.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework.AssertionExceptionStringCtor">
            <summary>
            Gets the assertion exception constructor that takes a string
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework.InconclusiveExceptionType">
            <summary>
            Gets the type to specify inconclusive tests
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework.AssumptionExceptionType">
            <summary>
            Gets the type of the assumption exception.
            </summary>
            <value>The type of the assumption exception.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework.AttributeBased">
            <summary>
            Gets a value indicating whether the test framework uses custom attributes.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework.References">
            <summary>
            Gets all the necessary references for the test framework
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework.InstrumentedAssemblies">
            <summary>
            Gets the set of assemblies that should be instrumented for this test framework
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework.ProjectTypeGuids">
            <summary>
            Gets all the GUIDs associated with the test project type
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework.AssertMethods">
            <summary>
            Gets the assert methods of this test framework.
            </summary>
            <value>The assert methods.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework.AssertMethodFilters">
            <summary>
            Gets the assert method filters of this test framework.
            </summary>
            <value>The assert methods filters.</value>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.#ctor(Microsoft.ExtendedReflection.ComponentModel.IComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.TryGetAssemblyName(Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName@)">
            <summary>
            Tries to get the assembly name of the framework main's assembly. This name is used
            to automatically discover test frameworks, based the assembly references
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.TryGetDirectory(System.String@)">
            <summary>
            Tries to get the test framework directory
            </summary>
            <param name="directory"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.BeforeGeneration(Microsoft.ExtendedReflection.Metadata.Builders.AssemblyDefinitionBuilder)">
            <summary>
            Test generation is about to start
            </summary>
            <param name="embeddedCode"></param>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.AfterGeneration(Microsoft.ExtendedReflection.Metadata.Builders.AssemblyDefinitionBuilder@)">
            <summary>
            Afters the generation.
            </summary>
            <param name="embeddedCode"></param>
            <returns>true if anything has to be serialized</returns>
            <remarks>
            This code is serialized at the end of the test generation process
            </remarks>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.BeforeFixture(Microsoft.ExtendedReflection.Metadata.Builders.TypeDefinitionBuilder)">
            <summary>
            Befores the fixture.
            </summary>
            <param name="fixtureType">Type of the fixture.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.AfterFixture(Microsoft.ExtendedReflection.Metadata.Builders.TypeDefinitionBuilder)">
            <summary>
            Afters the fixture.
            </summary>
            <param name="fixtureType">Type of the fixture.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.MarkTestClass(Microsoft.ExtendedReflection.Metadata.Builders.TypeDefinitionBuilder)">
            <summary>
            Marks as test class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.MarkTestMethod(Microsoft.Pex.Engine.PexExplorationBase,Microsoft.Pex.Engine.IPexGeneratedTest,Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder)">
            <summary>
            Marks the test method.
            </summary>
            <param name="exploration">The exploration that generated the test.</param>
            <param name="test">The test.</param>
            <param name="method">The method.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.MarkIgnored(Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder,System.String)">
            <summary>
            Marks the method as ignored.
            </summary>
            <param name="method">The method.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.TryMarkExpectedException(Microsoft.ExtendedReflection.Metadata.VisibilityContext,Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder,System.Exception)">
            <summary>
            Tries to marks a test method as expecting a particular exception type
            </summary>
            <param name="visibility">The visibility.</param>
            <param name="method">The method.</param>
            <param name="exception">The exception.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.EmitInconclusive(Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder,System.String)">
            <summary>
            Emits code to make the test inconclusive
            </summary>
            <param name="body">The body.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.IsFixture(Microsoft.ExtendedReflection.Metadata.TypeDefinition)">
            <summary>
            Determines whether the target is contains tests.
            </summary>
            <param name="target">The target.</param>
            <returns>
            	<c>true</c> if [is test fixture] [the specified target]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.IsTestCode(Microsoft.ExtendedReflection.Metadata.TypeDefinition)">
            <summary>
            Determines whether the target should be considered as test code
            </summary>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.IsTest(Microsoft.ExtendedReflection.Metadata.TypeDefinition,Microsoft.ExtendedReflection.Metadata.MethodDefinition)">
            <summary>
            Determines whether the specified method is a unit test.
            </summary>
            <param name="fixtureType">the fixture type</param>
            <param name="method">The method.</param>
            <returns>
            	<c>true</c> if the specified method is test; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.IsParameterizedTest(Microsoft.ExtendedReflection.Metadata.TypeDefinition,Microsoft.ExtendedReflection.Metadata.MethodDefinition)">
            <summary>
            Determines whether the specified method is aparameterized unit test.
            </summary>
            <param name="fixtureType">the fixture type</param>
            <param name="method">The method.</param>
            <returns>
            	<c>true</c> if the specified method is test; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.TryReadExpectedException(Microsoft.ExtendedReflection.Metadata.ICustomAttributeProviderEx,Microsoft.ExtendedReflection.Metadata.TypeEx@)">
            <summary>
            Tries to read the expected exception type from a
            ExceptionException attribute (or other decorator).
            </summary>
            <param name="target">The method.</param>
            <param name="exceptionType">Type of the exception.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.IsFixtureIgnored(Microsoft.Pex.Engine.TestFrameworks.TestFrameworkTestSelection,Microsoft.ExtendedReflection.Metadata.TypeEx,System.String@)">
            <summary>
            Determines whether the fixture is ignored
            </summary>
            <param name="testSelection">The test selection.</param>
            <param name="fixtureType">Type of the fixture.</param>
            <param name="ignoreMessage">The ignore message.</param>
            <returns>
            	<c>true</c> if [is fixture ignored] [the specified test selection]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.IsTestIgnored(Microsoft.Pex.Engine.TestFrameworks.TestFrameworkTestSelection,Microsoft.ExtendedReflection.Metadata.MethodDefinition,System.String@)">
            <summary>
            Determines whether the test is ignored
            </summary>
            <param name="testSelection">The test selection.</param>
            <param name="method">The method.</param>
            <param name="ignoreMessage">The ignore message.</param>
            <returns>
            	<c>true</c> if test should be ignored; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.TryMarkHosted(Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder)">
            <summary>
            Tries to annotate the test method so that it runs hosted.
            </summary>
            <param name="testMethod">The test method.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.IsHosted(Microsoft.ExtendedReflection.Metadata.MethodDefinition)">
            <summary>
            Gets a value indicating if the unit test has to be run hosted
            </summary>
            <param name="methodDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.TryGetAssemblySetupTeardownMethods(Microsoft.ExtendedReflection.Metadata.AssemblyEx,Microsoft.ExtendedReflection.Metadata.Method@,Microsoft.ExtendedReflection.Metadata.Method@)">
            <summary>
            Tries to get the assembly set up tear down methods.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="setup">The setup.</param>
            <param name="teardown">The teardown.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.TryGetFixtureSetupTeardownMethods(Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.ExtendedReflection.Metadata.Method@,Microsoft.ExtendedReflection.Metadata.Method@,Microsoft.ExtendedReflection.Metadata.Method@,Microsoft.ExtendedReflection.Metadata.Method@)">
            <summary>
            Tries to query the fixture setup teardown methods.
            </summary>
            <param name="type">The type.</param>
            <param name="fixtureSetup">The fixture setup.</param>
            <param name="fixtureTeardown">The fixture teardown.</param>
            <param name="testSetup">The test setup.</param>
            <param name="testTeardown">The test teardown.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.TryGetStackFrameFilter(Microsoft.ExtendedReflection.Symbols.IStackFrameFilter@)">
            <summary>
            Tries to query the stack frame filter.
            </summary>
            <param name="filter">The filter.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.TryGetUninstrumentedMethodFilter(Microsoft.ExtendedReflection.Logging.IUninstrumentedMethodFilter@)">
            <summary>
            Tries to query the uninstrumented method filter.
            </summary>
            <param name="filter">The filter.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.TryGetTestProjectTemplate(Microsoft.ExtendedReflection.Emit.ILanguage,System.Boolean,System.String@,System.String@,System.String[]@)">
            <summary>
            Tries to provide the template name and language to create a new project in
            Visual Studio.
            </summary>
            <param name="language">The language.</param>
            <param name="silverlight">a value indicating if the project needs to be silverlight enabled</param>
            <param name="templateName">Name of the template.</param>
            <param name="languageName">Name of the language.</param>
            <param name="unwantedFiles">A list unwanted files that should be deleted once the template has run</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.SupportsProjectBitness(Microsoft.ExtendedReflection.Monitoring.Bitness)">
            <summary>
            Gets a value indicating if the framework supports the given bitness
            </summary>
            <param name="bitness"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.GetMethod(Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.ExtendedReflection.Metadata.MethodDefinition)">
            <summary>
            TODO: Review uses of this method.
            </summary>
            <param name="type">The type.</param>
            <param name="methodDefinition">The method definition.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.TryGetConvertToParameterizedTest(Microsoft.ExtendedReflection.Metadata.MethodDefinition,Microsoft.ExtendedReflection.Feedback.CodeUpdate@)">
            <summary>
            Tries to create a codeupdate to convert a unit test method into a 'pex' parameterized method.
            </summary>
            <param name="methodDefinition"></param>
            <param name="convertUpdate"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.TryEmitAssertAreEqual(Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder,Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Tries to emit an assertion that checks that to values are equal. Typically something like Assert.AreEqual&lt;T&gt;(expected, actual).
            Both values have been pushed on the stack.
            </summary>
            <param name="builder">The builder.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.TryEmitAssertIsTrue(Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder)">
            <summary>
            Tries to emit an assertion that checks whether a condition is true.
            Typically something like Assert.IsTrue&lt;T&gt;(condition).
            The condition has been pushed on the stack.
            </summary>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.TryEmitAssertIsNull(Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder)">
            <summary>
            Tries to emit an assertion that checks whether a reference is null.
            Typically something like Assert.IsNull&lt;T&gt;(object).
            The object has been pushed on the stack.
            </summary>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.TryEmitAssertIsNotNull(Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder)">
            <summary>
            Tries to emit an assertion that checks whether a reference is not null.
            Typically something like Assert.IsNotNull&lt;T&gt;(object).
            The object has been pushed on the stack.
            </summary>
            <param name="builder">The builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.TryEmitAssertAreNotEqual(Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder,Microsoft.ExtendedReflection.Metadata.Interfaces.IType)">
            <summary>
            Tries to emit an assertion that checks that to values are not equal. Typically something like Assert.AreNotEqual&lt;T&gt;(expected, actual).
            Both values have been pushed on the stack.
            </summary>
            <param name="builder">The builder.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.TryGetAssertAreEqual(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod@)">
            <summary>
            Tries to get the appropriate 'AreEqual' method for a particular type. 
            Implement this method to provide a customized assert method, otherwise Pex will use PexAssert.AreEqual.
            </summary>
            <param name="type"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.TryGetAssertAreNotEqual(Microsoft.ExtendedReflection.Metadata.Interfaces.IType,Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod@)">
            <summary>
            Tries to get the appropriate 'AreNotEqual' method for a particular type. 
            Implement this method to provide a customized assert method, otherwise Pex will use PexAssert.AreNotEqual.
            </summary>
            <param name="type"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.TryGetAssertIsTrue(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod@)">
            <summary>
            Tries to get the appropriate 'IsTrue' method.
            Implement this method to provide a customized assert method, otherwise Pex will use PexAssert.IsTrue.
            </summary>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.TryGetAssertIsNull(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod@)">
            <summary>
            Tries to get the appropriate 'IsNull' method.
            Implement this method to provide a customized assert method, otherwise Pex will use PexAssert.IsNull.
            </summary>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.TryGetAssertIsNotNull(Microsoft.ExtendedReflection.Metadata.Interfaces.IMethod@)">
            <summary>
            Tries to get the appropriate 'IsNotNull' method.
            Implement this method to provide a customized assert method, otherwise Pex will use PexAssert.IsNotNull.
            </summary>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.TryRunTests(System.String,Microsoft.ExtendedReflection.Collections.ICountable{Microsoft.Pex.Engine.PexGeneratedTestName},System.String,Microsoft.ExtendedReflection.Collections.IIndexable{System.String},Microsoft.ExtendedReflection.Collections.ICountable{Microsoft.Pex.Engine.TestFrameworks.PexUnitTestResult}@)">
            <summary>
            Tries to executes the list of unit tests in <paramref name="testMethods"/>
            and returns the execution result.
            </summary>
            <param name="assemblyLocation">The assembly location.</param>
            <param name="tests">The tests.</param>
            <param name="outputPath">The output path.</param>
            <param name="assembliesWithCodeCoverage">Assemblies for which code coverage should be collected</param>
            <param name="testResults">The test results.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.GetAssemblyRunner(Microsoft.ExtendedReflection.Metadata.AssemblyEx)">
            <summary>
            Gets assembly driver
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.TryGetRequiredRuntimeVersion(System.String@)">
            <summary>
            Gets the required .NET runtime version for this test framework if any
            </summary>
            <param name="requiredFrameworkVersion"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.AttributeBased">
            <summary>
            Gets a value indicating whether the test framework uses custom attributes.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.Name">
            <summary>
            identify of the test framework
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.PrettyName">
            <summary>
            Gets the name to be shown in user interfaces.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.References">
            <summary>
            Adds all the necessary references for the test framework
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.InstrumentedAssemblies">
            <summary>
            Gets the set of assemblies that should be instrumented
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.SupportsPartialClasses">
            <summary>
            Gets a value indicating whether
            partial test classes
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.SupportsDesktop">
            <summary>
            Gets a value indicating if this test framework supports the Desktop CLR
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.SupportsSilverlight">
            <summary>
            Gets a value indicating if this test framework supports Silverlight
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.SupportsStaticTestMethods">
            <summary>
            Gets a value indicating if this test framework supports static test methods
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.SupportsTestReflection">
            <summary>
            Gets a value indicating whether this test framework supports test reflection.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.AssertionExceptionType">
            <summary>
            Gets the type of the assertion exception.
            </summary>
            <value>The type of the assertion exception.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.InconclusiveExceptionType">
            <summary>
            Gets the type to specify inconclusive tests
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.AssertionExceptionStringCtor">
            <summary>
            Gets the assertion exception string ctor.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.AssumptionExceptionType">
            <summary>
            Gets the type of the assumption exception.
            </summary>
            <value>The type of the assumption exception.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.ProjectTypeGuids">
            <summary>
            Gets all the GUIDs associated with the test project type
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.AssertMethods">
            <summary>
            Gets the assert methods of this test framework.
            </summary>
            <value>The assert methods.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkBase.AssertMethodFilters">
            <summary>
            Gets the assert method filters of this test framework.
            </summary>
            <value>The assert methods filters.</value>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.AttributeBasedTestFrameworkBase.#ctor(Microsoft.ExtendedReflection.ComponentModel.IComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.TestFrameworks.AttributeBasedTestFrameworkBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.AttributeBasedTestFrameworkBase.GetReferencesUncached">
            <summary>
            Gets all the necessary references for the test framework (uncached)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.AttributeBasedTestFrameworkBase.TryGetAssemblyName(Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName@)">
            <summary>
            Tries to get the assembly name
            </summary>
            <param name="assemblyName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.AttributeBasedTestFrameworkBase.IsFixture(Microsoft.ExtendedReflection.Metadata.TypeDefinition)">
            <summary>
            Determines whether the specified target is fixture.
            </summary>
            <param name="target">The target.</param>
            <returns>
            	<c>true</c> if the specified target is fixture; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.AttributeBasedTestFrameworkBase.IsTest(Microsoft.ExtendedReflection.Metadata.TypeDefinition,Microsoft.ExtendedReflection.Metadata.MethodDefinition)">
            <summary>
            Determines whether the specified method is test.
            </summary>
            <param name="fixtureType">the fixture type</param>
            <param name="method">The method.</param>
            <returns>
            	<c>true</c> if the specified method is test; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.AttributeBasedTestFrameworkBase.MarkTestClass(Microsoft.ExtendedReflection.Metadata.Builders.TypeDefinitionBuilder)">
            <summary>
            Marks as test class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.AttributeBasedTestFrameworkBase.GetTestClassAttributes">
            <summary>
            Gets the set of custom attribute that are used to mark
            a test class
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.AttributeBasedTestFrameworkBase.MarkTestMethod(Microsoft.Pex.Engine.PexExplorationBase,Microsoft.Pex.Engine.IPexGeneratedTest,Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder)">
            <summary>
            Marks the test method.
            </summary>
            <param name="exploration">The current exploration.</param>
            <param name="test">The test.</param>
            <param name="method">The method.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.AttributeBasedTestFrameworkBase.GetTestMethodAttributes(Microsoft.Pex.Engine.IPexGeneratedTest)">
            <summary>
            Gets the set of custom attributes to specify that a method is a test
            </summary>
            <param name="test">The test.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.AttributeBasedTestFrameworkBase.MarkIgnored(Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder,System.String)">
            <summary>
            Marks the method as ignored.
            </summary>
            <param name="method">The method.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.AttributeBasedTestFrameworkBase.GetIgnoreAttributes(System.String)">
            <summary>
            Gets the set of custom attributes that are used to specify
            that a test is ignored
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.AttributeBasedTestFrameworkBase.TryMarkExpectedException(Microsoft.ExtendedReflection.Metadata.VisibilityContext,Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder,System.Exception)">
            <summary>
            Tries to marks a test method as expecting a particular exception type
            </summary>
            <param name="visibility">The visibility.</param>
            <param name="method">The method.</param>
            <param name="exception">The exception.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.AttributeBasedTestFrameworkBase.TryGetExpectedExceptionAttributes(Microsoft.ExtendedReflection.Metadata.VisibilityContext,Microsoft.ExtendedReflection.Metadata.TypeEx,System.Collections.Generic.IEnumerable{Microsoft.ExtendedReflection.Metadata.ICustomAttribute}@)">
            <summary>
            Tries to get the set of custom attributes that are used to specify
            that a test is expected to throw a particular exception
            </summary>
            <param name="visibility">The visibility.</param>
            <param name="exceptionType">Type of the exception.</param>
            <param name="attributes">The attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.AttributeBasedTestFrameworkBase.EmitInconclusive(Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder,System.String)">
            <summary>
            Emits code to make the test inconclusive
            </summary>
            <param name="body">The body.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.AttributeBasedTestFrameworkBase.TryGetInconclusiveMethod(Microsoft.ExtendedReflection.Metadata.Names.MethodName@)">
            <summary>
            Gets the method name that triggers an inconclusive exception
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.AttributeBasedTestFrameworkBase.GetSatelliteAttributeTypes">
            <summary>
            Gets a list of attribute that should be duplicated from the
            pex test to the parameterized test
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.AttributeBasedTestFrameworkBase.DuplicateSatelliteAttributeTypes(System.Collections.Generic.IEnumerable{Microsoft.ExtendedReflection.Metadata.ICustomAttribute},Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder)">
            <summary>
            Copies satellitate attributes over to generated test
            </summary>
            <param name="attributes">The attributes.</param>
            <param name="generatedTestMethod">The generated test method.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.AttributeBasedTestFrameworkBase.TryGetFixtureSetupTeardownMethods(Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.ExtendedReflection.Metadata.Method@,Microsoft.ExtendedReflection.Metadata.Method@,Microsoft.ExtendedReflection.Metadata.Method@,Microsoft.ExtendedReflection.Metadata.Method@)">
            <summary>
            Tries to query the fixture setup teardown methods.
            </summary>
            <param name="type">The type.</param>
            <param name="fixtureSetup">The fixture setup.</param>
            <param name="fixtureTeardown">The fixture teardown.</param>
            <param name="testSetup">The test setup.</param>
            <param name="testTeardown">The test teardown.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.AttributeBasedTestFrameworkBase.VerifyReflectSetUpTearDownMethod(System.String,Microsoft.ExtendedReflection.Metadata.Names.TypeName,System.Boolean,Microsoft.ExtendedReflection.Metadata.Method,Microsoft.ExtendedReflection.Metadata.MethodDefinition,System.Attribute)">
            <summary>
            Verifies the reflect set up tear down method.
            </summary>
            <param name="methodType">Type of the method.</param>
            <param name="_setUpTearDownAttribute">The set up tear down attribute.</param>
            <param name="instance"></param>
            <param name="_currentMethod">The current method.</param>
            <param name="methodDefinition">The method definition.</param>
            <param name="_attribute">The attribute.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.AttributeBasedTestFrameworkBase.TryReadExpectedException(Microsoft.ExtendedReflection.Metadata.ICustomAttributeProviderEx,Microsoft.ExtendedReflection.Metadata.TypeEx@)">
            <summary>
            Tries to read the expected exception.
            </summary>
            <param name="target">The method.</param>
            <param name="exceptionType">Type of the exception.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.AttributeBasedTestFrameworkBase.IsFixtureIgnored(Microsoft.Pex.Engine.TestFrameworks.TestFrameworkTestSelection,Microsoft.ExtendedReflection.Metadata.TypeEx,System.String@)">
            <summary>
            Determines whether the fixture is ignored
            </summary>
            <param name="testSelection">The test selection.</param>
            <param name="fixtureType">Type of the fixture.</param>
            <param name="message">The message.</param>
            <returns>
            	<c>true</c> if [is fixture ignored] [the specified test selection]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.AttributeBasedTestFrameworkBase.IsTestIgnored(Microsoft.Pex.Engine.TestFrameworks.TestFrameworkTestSelection,Microsoft.ExtendedReflection.Metadata.MethodDefinition,System.String@)">
            <summary>
            Determines whether the test is ignored
            </summary>
            <param name="testSelection">The test selection.</param>
            <param name="method">The method.</param>
            <param name="message">The message.</param>
            <returns>
            	<c>true</c> if test should be ignored; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.AttributeBasedTestFrameworkBase.TryGetCategories(Microsoft.ExtendedReflection.Metadata.ICustomAttributeProviderEx,System.Collections.Generic.IEnumerable{System.String}@)">
            <summary>
            Tries to query the categories.
            </summary>
            <param name="element">The element.</param>
            <param name="names">The names.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.AttributeBasedTestFrameworkBase.IsIgnored(Microsoft.Pex.Engine.TestFrameworks.TestFrameworkTestSelection,Microsoft.ExtendedReflection.Metadata.ICustomAttributeProviderEx,System.String@)">
            <summary>
            Determines whether the specified test selection is ignored.
            </summary>
            <param name="testSelection">The test selection.</param>
            <param name="element">The element.</param>
            <param name="message">The message.</param>
            <returns>
            	<c>true</c> if the specified test selection is ignored; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.AttributeBasedTestFrameworkBase.TryGetConvertToParameterizedTest(Microsoft.ExtendedReflection.Metadata.MethodDefinition,Microsoft.ExtendedReflection.Feedback.CodeUpdate@)">
            <summary>
            Creates a code update that removes the existing unit test attribute, and puts PexMethod instead
            </summary>
            <param name="methodDefinition"></param>
            <param name="convertUpdate"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.AttributeBasedTestFrameworkBase.References">
            <summary>
            Gets all the necessary references for the test framework
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.AttributeBasedTestFrameworkBase.AssemblyName">
            <summary>
            Gets the framework main assembly name
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.AttributeBasedTestFrameworkBase.AttributeBased">
            <summary>
            Gets a value indicating whether the test framework uses custom attributes.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.AttributeBasedTestFrameworkBase.SupportsTestReflection">
            <summary>
            Gets a value indicating whether this test framework supports test reflection.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.AttributeBasedTestFrameworkBase.HasIgnoreAttributeMessage">
            <summary>
            Whether the ignore attribute constructor takes a message as its first argument.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.AttributeBasedTestFrameworkBase.FixtureSetUpTearDownInstance">
            <summary>
            Gets a value indicating whether fixture set up tear down are instance methods.
            </summary>
            <value>
            	<c>true</c> if [fixture set up tear down instance]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.AttributeBasedTestFrameworkBase.FixtureAttribute">
            <summary>
            Gets the name of the fixture attribute
            </summary>
            <value>The fixture attribute.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.AttributeBasedTestFrameworkBase.FixtureSetUpAttribute">
            <summary>
            Gets the name of the fixture setup attribute
            </summary>
            <value>The fixture set up attribute.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.AttributeBasedTestFrameworkBase.FixtureTearDownAttribute">
            <summary>
            Gets the name of the fixture teardown attribute
            </summary>
            <value>The fixture tear down attribute.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.AttributeBasedTestFrameworkBase.SetUpAttribute">
            <summary>
            Gets the name of the test setup attribute.
            </summary>
            <value>The set up attribute.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.AttributeBasedTestFrameworkBase.TestAttribute">
            <summary>
            Gets the test attribute.
            </summary>
            <value>The test attribute.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.AttributeBasedTestFrameworkBase.TearDownAttribute">
            <summary>
            Gets the name of the test teardown attribute.
            </summary>
            <value>The tear down attribute.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.AttributeBasedTestFrameworkBase.IgnoreAttribute">
            <summary>
            Gets the ignore attribute.
            </summary>
            <value>The ignore attribute.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.AttributeBasedTestFrameworkBase.ExpectedExceptionAttribute">
            <summary>
            Gets the ExpectedException attribute.
            </summary>
            <value>The expected exception attribute.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.AttributeBasedTestFrameworkBase.IgnoreMessageProperty">
            <summary>
            Gets the ignore message property name.
            </summary>
            <value>The ignore message property.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.AttributeBasedTestFrameworkBase.ExpectedExceptionProperty">
            <summary>
            Gets the expected exception property name.
            </summary>
            <value>The expected exception property.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.AttributeBasedTestFrameworkBase.RootNamespace">
            <summary>
            Gets the root namespace.
            </summary>
            <value>The root namespace.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.TestFrameworks.PexUnitTestResult">
            <summary>
            The result of a unit test execution
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.TestFrameworks.PexUnitTestResult.Test">
            <summary>
            The test to execute
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.TestFrameworks.PexUnitTestResult.State">
            <summary>
            Execution result
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.PexUnitTestResult.#ctor(Microsoft.Pex.Engine.PexGeneratedTestName,Microsoft.Pex.Engine.PexResultState)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.TestFrameworks.PexUnitTestResult"/> struct.
            </summary>
            <param name="test">The test.</param>
            <param name="state">The state.</param>
        </member>
        <member name="T:Microsoft.Pex.Engine.TestFrameworks.ProxyAttributeBasedTestFrameworkBase">
            <summary>
            A proxy around an attribute test framework. Useful to bridge non-unit test frameworks
            with Pex.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.ProxyAttributeBasedTestFrameworkBase.#ctor(Microsoft.Pex.Engine.TestFrameworks.AttributeBasedTestFrameworkBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.TestFrameworks.ProxyAttributeBasedTestFrameworkBase"/> class.
            </summary>
            <param name="underlyingTestFramework">The underlying test framework.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.ProxyAttributeBasedTestFrameworkBase.TryGetCategories(Microsoft.ExtendedReflection.Metadata.ICustomAttributeProviderEx,System.Collections.Generic.IEnumerable{System.String}@)">
            <summary>
            Tries to query the categories.
            </summary>
            <param name="element">The element.</param>
            <param name="names">The names.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.ProxyAttributeBasedTestFrameworkBase.TryGetAssemblySetupTeardownMethods(Microsoft.ExtendedReflection.Metadata.AssemblyEx,Microsoft.ExtendedReflection.Metadata.Method@,Microsoft.ExtendedReflection.Metadata.Method@)">
            <summary>
            Tries to get the assembly set up tear down methods.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="setup">The setup.</param>
            <param name="teardown">The teardown.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.ProxyAttributeBasedTestFrameworkBase.UnderlyingTestFramework">
            <summary>
            Gets the underlying test framework.
            </summary>
            <value>The underlying test framework.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.ProxyAttributeBasedTestFrameworkBase.References">
            <summary>
            Adds all the necessary references for the test framework
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.ProxyAttributeBasedTestFrameworkBase.AssemblyName">
            <summary>
            Gets the assembly name of the framework main's assembly. This name is used
            to automatically discover test frameworks, based the assembly references
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.ProxyAttributeBasedTestFrameworkBase.AssertionExceptionType">
            <summary>
            Gets the type of the assertion exception.
            </summary>
            <value>The type of the assertion exception.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.ProxyAttributeBasedTestFrameworkBase.FixtureSetUpTearDownInstance">
            <summary>
            Gets a value indicating whether fixture set up tear down are instance methods.
            </summary>
            <value>
            	<c>true</c> if [fixture set up tear down instance]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.ProxyAttributeBasedTestFrameworkBase.FixtureAttribute">
            <summary>
            Gets the name of the fixture attribute
            </summary>
            <value>The fixture attribute.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.ProxyAttributeBasedTestFrameworkBase.FixtureSetUpAttribute">
            <summary>
            Gets the name of the fixture setup attribute
            </summary>
            <value>The fixture set up attribute.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.ProxyAttributeBasedTestFrameworkBase.FixtureTearDownAttribute">
            <summary>
            Gets the name of the fixture teardown attribute
            </summary>
            <value>The fixture tear down attribute.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.ProxyAttributeBasedTestFrameworkBase.SetUpAttribute">
            <summary>
            Gets the name of the test setup attribute.
            </summary>
            <value>The set up attribute.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.ProxyAttributeBasedTestFrameworkBase.TestAttribute">
            <summary>
            Gets the test attribute.
            </summary>
            <value>The test attribute.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.ProxyAttributeBasedTestFrameworkBase.TearDownAttribute">
            <summary>
            Gets the name of the test teardown attribute.
            </summary>
            <value>The tear down attribute.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.ProxyAttributeBasedTestFrameworkBase.IgnoreAttribute">
            <summary>
            Gets the ignore attribute.
            </summary>
            <value>The ignore attribute.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.ProxyAttributeBasedTestFrameworkBase.ExpectedExceptionAttribute">
            <summary>
            Gets the ExpectedException attribute.
            </summary>
            <value>The expected exception attribute.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.ProxyAttributeBasedTestFrameworkBase.IgnoreMessageProperty">
            <summary>
            Gets the ignore message property name.
            </summary>
            <value>The ignore message property.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.ProxyAttributeBasedTestFrameworkBase.ExpectedExceptionProperty">
            <summary>
            Gets the expected exception property name.
            </summary>
            <value>The expected exception property.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.ProxyAttributeBasedTestFrameworkBase.HasIgnoreAttributeMessage">
            <summary>
            Whether the ignore attribute constructor takes a message as its first argument.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.ProxyAttributeBasedTestFrameworkBase.RootNamespace">
            <summary>
            Gets the root namespace.
            </summary>
            <value>The root namespace.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.ProxyAttributeBasedTestFrameworkBase.SupportsPartialClasses">
            <summary>
            Gets a value indicating whether
            partial test classes
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Pex.Engine.TestFrameworks.StandAloneTestFrameworkBase">
            <summary>
            Abstract base class for test framework that do not use any attribute
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.StandAloneTestFrameworkBase.#ctor(Microsoft.ExtendedReflection.ComponentModel.IComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.TestFrameworks.StandAloneTestFrameworkBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.StandAloneTestFrameworkBase.SupportsProjectBitness(Microsoft.ExtendedReflection.Monitoring.Bitness)">
            <summary>
            Returns true
            </summary>
            <param name="bitness"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.StandAloneTestFrameworkBase.IsFixture(Microsoft.ExtendedReflection.Metadata.TypeDefinition)">
            <summary>
            Determines whether the specified target is fixture.
            </summary>
            <param name="target">The target.</param>
            <returns>
            	<c>true</c> if the specified target is fixture; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.StandAloneTestFrameworkBase.IsTest(Microsoft.ExtendedReflection.Metadata.TypeDefinition,Microsoft.ExtendedReflection.Metadata.MethodDefinition)">
            <summary>
            Determines whether the specified method is test.
            </summary>
            <param name="fixtureType">the fixture type</param>
            <param name="method">The method.</param>
            <returns>
            	<c>true</c> if the specified method is test; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.StandAloneTestFrameworkBase.BeforeGeneration(Microsoft.ExtendedReflection.Metadata.Builders.AssemblyDefinitionBuilder)">
            <summary>
            Test generation is about to start
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.StandAloneTestFrameworkBase.AfterGeneration(Microsoft.ExtendedReflection.Metadata.Builders.AssemblyDefinitionBuilder@)">
            <summary>
            Afters the generation.
            </summary>
            <param name="embeddedCode"></param>
            <returns>true if anything has to be serialized</returns>
            <remarks>
            This code is serialized at the end of the test generation process
            </remarks>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.StandAloneTestFrameworkBase.MarkTestClass(Microsoft.ExtendedReflection.Metadata.Builders.TypeDefinitionBuilder)">
            <summary>
            Marks as test class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.StandAloneTestFrameworkBase.MarkTestMethod(Microsoft.Pex.Engine.PexExplorationBase,Microsoft.Pex.Engine.IPexGeneratedTest,Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder)">
            <summary>
            Marks the test method.
            </summary>
            <param name="exploration"></param>
            <param name="test">The test.</param>
            <param name="method">The method.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.StandAloneTestFrameworkBase.MarkIgnored(Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder,System.String)">
            <summary>
            Marks the method as ignored.
            </summary>
            <param name="method">The method.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.StandAloneTestFrameworkBase.EmitInconclusive(Microsoft.ExtendedReflection.Metadata.Builders.MethodBodyBuilder,System.String)">
            <summary>
            Emits code to make the test inconclusive
            </summary>
            <param name="body">The body.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.StandAloneTestFrameworkBase.TryReadExpectedException(Microsoft.ExtendedReflection.Metadata.ICustomAttributeProviderEx,Microsoft.ExtendedReflection.Metadata.TypeEx@)">
            <summary>
            Tries to read the expected exception.
            </summary>
            <param name="target">The target.</param>
            <param name="exceptionType">Type of the exception.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.StandAloneTestFrameworkBase.TryGetAssemblySetupTeardownMethods(Microsoft.ExtendedReflection.Metadata.AssemblyEx,Microsoft.ExtendedReflection.Metadata.Method@,Microsoft.ExtendedReflection.Metadata.Method@)">
            <summary>
            Tries to query the assembly setup teardown methods.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="setUp">The set up.</param>
            <param name="tearDown">The tear down.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.StandAloneTestFrameworkBase.IsFixtureIgnored(Microsoft.Pex.Engine.TestFrameworks.TestFrameworkTestSelection,Microsoft.ExtendedReflection.Metadata.TypeEx,System.String@)">
            <summary>
            Determines whether the fixture is ignored
            </summary>
            <param name="testSelection">The test selection.</param>
            <param name="fixtureType">Type of the fixture.</param>
            <param name="ignoreMessage">The ignore message.</param>
            <returns>
            	<c>true</c> if [is fixture ignored] [the specified test selection]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.StandAloneTestFrameworkBase.IsTestIgnored(Microsoft.Pex.Engine.TestFrameworks.TestFrameworkTestSelection,Microsoft.ExtendedReflection.Metadata.MethodDefinition,System.String@)">
            <summary>
            Determines whether the test is ignored
            </summary>
            <param name="testSelection">The test selection.</param>
            <param name="method">The method.</param>
            <param name="ignoreMessage">The ignore message.</param>
            <returns>
            	<c>true</c> if test should be ignored; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.StandAloneTestFrameworkBase.TryGetFixtureSetupTeardownMethods(Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.ExtendedReflection.Metadata.Method@,Microsoft.ExtendedReflection.Metadata.Method@,Microsoft.ExtendedReflection.Metadata.Method@,Microsoft.ExtendedReflection.Metadata.Method@)">
            <summary>
            Tries to query the fixture setup teardown methods.
            </summary>
            <param name="type">The type.</param>
            <param name="fixtureSetup">The fixture setup.</param>
            <param name="fixtureTeardown">The fixture teardown.</param>
            <param name="testSetup">The test setup.</param>
            <param name="testTeardown">The test teardown.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.StandAloneTestFrameworkBase.EmbeddedAssembly">
            <summary>
            Gets the embedded assembly.
            </summary>
            <value>The embedded assembly.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.StandAloneTestFrameworkBase.EmbeddedModule">
            <summary>
            Gets the embedded module.
            </summary>
            <value>The embedded module.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.StandAloneTestFrameworkBase.AttributeBased">
            <summary>
            Gets a value indicating whether the test framework uses custom attributes.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.StandAloneTestFrameworkBase.SupportsTestReflection">
            <summary>
            Gets a value indicating whether this test framework supports test reflection.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.StandAloneTestFrameworkBase.References">
            <summary>
            Adds all the necessary references for the test framework
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.StandAloneTestFrameworkBase.SupportsPartialClasses">
            <summary>
            Gets a value indicating whether
            partial test classes
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.StandAloneTestFrameworkBase.AssertionExceptionType">
            <summary>
            Gets the type of the assertion exception.
            </summary>
            <value>The type of the assertion exception.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.StandAloneTestFrameworkBase.SupportsStaticTestMethods">
            <summary>
            Supported by default
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkTestSelection">
            <summary>
            A filter for test frameworks
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkTestSelection.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkTestSelection"/> class.
            </summary>
            <param name="includedCategories">The included categories.</param>
            <param name="excludedCategories">The excluded categories.</param>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkTestSelection.HasCategories">
            <summary>
            Gets a value indicating whether this instance has any non-null categories.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkTestSelection.IncludedCategories">
            <summary>
            Gets the optional included categories.
            </summary>
            <value>The included categories.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.TestFrameworkTestSelection.ExcludedCategories">
            <summary>
            Gets the optional excluded categories.
            </summary>
            <value>The excluded categories.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.TestGeneration.IPexTestManager">
            <summary>
            Test (generated and existing) manager
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestGeneration.IPexTestManager.TryGetExistingTestsClass(Microsoft.ExtendedReflection.Metadata.TypeDefinition,Microsoft.ExtendedReflection.Metadata.TypeDefinition@)">
            <summary>
            Tries to get the type that holds the generated tests of an exploration.
            </summary>
            <param name="fixtureType"></param>
            <param name="existingTestsClassType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestGeneration.IPexTestManager.GetExistingTestsExplorationMethods(Microsoft.ExtendedReflection.Metadata.AssemblyEx)">
            <summary>
            Gets the exploration methods for which there are existing tests.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestGeneration.IPexTestManager.GetExistingTests(Microsoft.ExtendedReflection.Metadata.MethodDefinition)">
            <summary>
            Gets the existing tests of a particular exploration method.
            </summary>
            <param name="explorationMethod">The exploration method.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestGeneration.IPexTestManager.DuplicateExistingTest(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Notifies that one of the existing tests for the exploration is a duplicate
            </summary>
            <param name="testMethodName"></param>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestGeneration.IPexTestManager.AddExistingTestAssembly(Microsoft.ExtendedReflection.Metadata.AssemblyEx)">
            <summary>
            Adds an assembly that contains existing test. The test manager will reflect existing tests from this assembly
            when initializing.
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestGeneration.IPexTestManager.GetVisibilityContextOfFixtureTests(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Gets the visibility context of the fixture members.
            </summary>
            <param name="fixtureType">Type of the fixture.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestGeneration.IPexTestManager.GetVisibilityContextOfFixtures(Microsoft.ExtendedReflection.Metadata.AssemblyEx)">
            <summary>
            Gets the visibility context of the fixtures
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestGeneration.IPexTestManager.PrepareOrganizer">
            <summary>
            Prepares the organizer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestGeneration.IPexTestManager.Reflect">
            <summary>
            Reflects this instance.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestGeneration.IPexTestManager.ReflectExistingTests">
            <summary>
            Reflects existing tests from this instance. Requires explorations already reflected
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestGeneration.IPexTestManager.UpdateExistingTestGenerators">
            <summary>
            Updates the existing test generators.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestGeneration.IPexTestManager.FinishTestGeneration">
            <summary>
            Finishes the test generation.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestGeneration.IPexTestManager.OpenExploration(Microsoft.Pex.Engine.PexExplorationBase)">
            <summary>
            Opens the exploration.
            </summary>
            <param name="exploration">The exploration.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestGeneration.IPexTestManager.CreateTestMethod(System.Boolean)">
            <summary>
            Creates the test method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestGeneration.IPexTestManager.RemoveTestMethod(Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder)">
            <summary>
            Removes the test method.
            </summary>
            <param name="method">The method.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestGeneration.IPexTestManager.PublishTest(Microsoft.Pex.Engine.IPexGeneratedTest)">
            <summary>
            Publishes the test.
            </summary>
            <param name="test">The test.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestGeneration.IPexTestManager.CompileAndExecuteProject(Microsoft.ExtendedReflection.Emit.VisualStudioProject)">
            <summary>
            Compiles and executes project if options allow it.
            </summary>
            <param name="project"></param>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestGeneration.IPexTestManager.ExistingTestAssemblies">
            <summary>
            Gets the list of assemblies from which the existing tests are loaded
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestGeneration.IPexTestManager.TestFramework">
            <summary>
            Gets the test framework.
            </summary>
            <value>The test framework.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestGeneration.IPexTestManager.TestSelection">
            <summary>
            Gets the test selection.
            </summary>
            <value>The test selection.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestGeneration.IPexTestManager.Organizer">
            <summary>
            Gets the organizer.
            </summary>
            <value>The organizer.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestGeneration.IPexTestManager.SourceEncoding">
            <summary>
            Gets the source encoding.
            </summary>
            <value>The source encoding.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestGeneration.IPexTestManager.Language">
            <summary>
            Gets the code emission language
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestGeneration.IPexTestManager.GeneratedTests">
            <summary>
            Gets the generated tests.
            </summary>
            <value>The generated tests.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.FixIt.PexGeneratedFailureFixSuggestion">
            <summary>
            A fix suggestion
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.FixIt.PexGeneratedFailureFixSuggestion.#ctor(System.String,Microsoft.ExtendedReflection.Metadata.Names.MethodName,Microsoft.Pex.Engine.FixIt.PexGeneratedFailureFixSuggestionKind,System.String,System.String[],Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.FixIt.PexGeneratedFailureFixSuggestion"/> class.
            </summary>
            <param name="testid">The testid.</param>
            <param name="fixMethod">The fix method.</param>
            <param name="kind">The kind.</param>
            <param name="suggestedPrecondition">The suggested precondition.</param>
            <param name="imports">The imports.</param>
            <param name="referencedAssemblies">The referenced assemblies.</param>
            <param name="rank">The rank.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.FixIt.PexGeneratedFailureFixSuggestion.FromLoggedXml(System.Xml.XPath.XPathNavigator)">
            <summary>
            Creates a suggestion from previously logged xml.
            </summary>
            <param name="navigator">The navigator.</param>
            <exception cref="T:System.InvalidOperationException">when an error occurrs</exception>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.FixIt.PexGeneratedFailureFixSuggestion.TryGetTargetName(Microsoft.ExtendedReflection.Metadata.Names.Name@)">
            <summary>
            Gets the name of the target.
            </summary>
            <param name="targetName">Name of the target.</param>
            <returns></returns>
            <value>The name of the target.</value>
        </member>
        <member name="M:Microsoft.Pex.Engine.FixIt.PexGeneratedFailureFixSuggestion.TryGetCodeUpdate(Microsoft.ExtendedReflection.Feedback.CodeUpdate@)">
            <summary>
            Tries to get the code update.
            </summary>
            <param name="update">The update.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.FixIt.PexGeneratedFailureFixSuggestion.Internalize">
            <summary>
            Internalizes this instance
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.FixIt.PexGeneratedFailureFixSuggestion.Kind">
            <summary>
            Gets the suggestion kind.
            </summary>
            <value>The kind.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.FixIt.PexGeneratedFailureFixSuggestion.FixMethod">
            <summary>
            Gets the method that gets fixed.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.FixIt.PexGeneratedFailureFixSuggestion.SuggestedPrecondition">
            <summary>
            Gets the suggested precondition string.
            </summary>
            <value>The suggested precondition.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.FixIt.PexGeneratedFailureFixSuggestion.Imports">
            <summary>
            Gets the imports.
            </summary>
            <value>The imports.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.FixIt.PexGeneratedFailureFixSuggestion.ReferencedAssemblies">
            <summary>
            Gets the referenced assemblies.
            </summary>
            <value>The referenced assemblies.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.FixIt.PexGeneratedFailureFixSuggestion.Rank">
            <summary>
            Gets the rank.
            </summary>
            <value>The rank.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.FixIt.PexGeneratedFailureFixSuggestion.Fix">
            <summary>
            Gets the fix.
            </summary>
            <value>The fix.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.FixIt.PexGeneratedFailureFixSuggestion.DeepComparer">
            <summary>
            Deep comparer of suggestions
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.FixIt.PexGeneratedFailureFixSuggestion.DeepComparer.Instance">
            <summary>
            The singleton instance.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.FixIt.PexGeneratedFailureFixSuggestion.DeepComparer.Compare(Microsoft.Pex.Engine.FixIt.PexGeneratedFailureFixSuggestion,Microsoft.Pex.Engine.FixIt.PexGeneratedFailureFixSuggestion)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value Condition Less than zero<paramref name="x"/> is less than <paramref name="y"/>.Zero<paramref name="x"/> equals <paramref name="y"/>.Greater than zero<paramref name="x"/> is greater than <paramref name="y"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.FixIt.PexGeneratedFailureFixSuggestion.DeepComparer.Equals(Microsoft.Pex.Engine.FixIt.PexGeneratedFailureFixSuggestion,Microsoft.Pex.Engine.FixIt.PexGeneratedFailureFixSuggestion)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type <paramref name="T"/> to compare.</param>
            <param name="y">The second object of type <paramref name="T"/> to compare.</param>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.FixIt.PexGeneratedFailureFixSuggestion.DeepComparer.GetHashCode(Microsoft.Pex.Engine.FixIt.PexGeneratedFailureFixSuggestion)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
            <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is null.</exception>
        </member>
        <member name="T:Microsoft.Pex.Engine.Injection.PexGeneratedInjectedException">
            <summary>
            Generated injected exception
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Injection.PexGeneratedInjectedException.#ctor(System.String,System.String,System.Object,Microsoft.ExtendedReflection.Logging.RemoteException)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.Injection.PexGeneratedInjectedException"/> class.
            </summary>
            <param name="reason">The reason.</param>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="exception">The exception.</param>
            <param name="remoteException">The remote exception.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Injection.PexGeneratedInjectedException.Internalize">
            <summary>
            Internalizes this instance
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.Injection.PexGeneratedInjectedException.Reason">
            <summary>
            Gets the reason.
            </summary>
            <value>The reason.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Injection.PexGeneratedInjectedException.WikiTopic">
            <summary>
            Gets the help topic.
            </summary>
            <value>The help topic.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Injection.PexGeneratedInjectedException.Exception">
            <summary>
            Gets the exception.
            </summary>
            <value>The exception.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Injection.PexGeneratedInjectedException.RemoteException">
            <summary>
            Gets the remote exception.
            </summary>
            <value>The remote exception.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.PexProgress">
            <summary>
            Progress information
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexProgress.CurrentExploration">
            <summary>
            Gets the pretty name of the current exploration
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexProgress.TotalExplorationCount">
            <summary>
            Gets the total number of explorations
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexProgress.ExplorationCount">
            <summary>
            Gets the current exploration count
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexProgress.ExecutionDuration">
            <summary>
            Gets the current execution duration
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexProgress.CurrentExplorationDuration">
            <summary>
            Gets the current exploration duration
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexProgress.GeneratedTestCount">
            <summary>
            Gets the generated test count
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexProgress.GeneratedFailureTestCount">
            <summary>
            Gets the generated failing test count
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexProgress.GeneratedDuplicateTestCount">
            <summary>
            Gets the generated duplicate test count
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexProgress.GeneratedNewTestCount">
            <summary>
            Gets the generated new test count
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexProgress.ExplorationCoverage">
            <summary>
            Gets the exploration coverage
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexProgress.AssemblyCoverage">
            <summary>
            Gets the assembly coverage
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexProgress.#ctor(System.String,System.Int32,System.Int32,System.TimeSpan,System.TimeSpan,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.ExtendedReflection.Coverage.CoverageEntry,Microsoft.ExtendedReflection.Coverage.CoverageEntry)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.PexProgress"/> class.
            </summary>
            <param name="exploration">The exploration.</param>
            <param name="totalExplorationCount">The total exploration count.</param>
            <param name="explorationCount">The exploration count.</param>
            <param name="executionDuration">Duration of the execution.</param>
            <param name="currentExplorationDuration">Duration of the current exploration.</param>
            <param name="generatedTestCount">The generated test count.</param>
            <param name="generatedFailureTestCount">The generated failure test count.</param>
            <param name="generatedDuplicateTestCount">The generated duplicate test count.</param>
            <param name="generatedNewTestCount">The generated new test count.</param>
            <param name="explorationCoverage">The exploration coverage.</param>
            <param name="assemblyCoverage">The assembly coverage.</param>
        </member>
        <member name="T:Microsoft.Pex.Engine.Domains.PexDomainChain">
            <summary>
            Chain of domains
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Domains.PexDomainChain.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Pex.Engine.Domains.IPexDomain})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.Domains.PexDomainChain"/> class.
            </summary>
            <param name="domains">The domains.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Domains.PexDomainChain.TryGetInvariant(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,Microsoft.ExtendedReflection.Metadata.Layout,System.Converter{Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term}@)">
            <summary>
            Tries to get an invariant.
            </summary>
            <param name="host">The host.</param>
            <param name="layout">The layout.</param>
            <param name="invariantBuilder">The invariant builder.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.Focus.IPexFocus">
            <summary>
            Defines where Pex should aim for coverage and bugs
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Focus.IPexFocus.TryGetFocusedAssemblies(Microsoft.Pex.Engine.Logging.IPexLog,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.AssemblyEx}@)">
            <summary>
            Tries to get the focused assemblies.
            </summary>
            <param name="log">The log.</param>
            <param name="assemblies">The assemblies.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Focus.IPexFocus.TryGetFocusedTypes(Microsoft.Pex.Engine.Logging.IPexLog,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.TypeDefinition}@)">
            <summary>
            Tries to get the focused types.
            </summary>
            <param name="log">The log.</param>
            <param name="types">The types.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Focus.IPexFocus.TryGetFocusedMethods(Microsoft.Pex.Engine.Logging.IPexLog,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.MethodDefinition}@)">
            <summary>
            Tries to get the focused methods.
            </summary>
            <param name="log">The log.</param>
            <param name="methods">The methods.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.Focus.IPexFocus.SearchPriority">
            <summary>
            Gets the priority.
            </summary>
            <value>The priority.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Focus.IPexFocus.DoNotReportCoverage">
            <summary>
            Gets a value indicating whether it should not report coverage.
            </summary>
            <value>
            	<c>true</c> do not report coverage; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Microsoft.Pex.Engine.Filters.IPexFixtureFilter">
            <summary>
            Fixture filter
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Filters.IPexFixtureFilter.Match(Microsoft.Pex.Engine.ComponentModel.IPexComponent,Microsoft.ExtendedReflection.Metadata.TypeDefinition,Microsoft.Pex.Framework.PexClassAttribute)">
            <summary>
            Filters the specified filter.
            </summary>
            <param name="host">The host.</param>
            <param name="value">The value.</param>
            <param name="attribute">The attribute.</param>
            <returns>true if the value is in the filter</returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.Logging.PexStackFrameTag">
            <summary>
            The Pex exception tag
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.PexStackFrameTag.#ctor(Microsoft.Pex.Engine.IPexGeneratedTest)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.Logging.PexStackFrameTag"/> struct.
            </summary>
            <param name="test">The test.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.PexStackFrameTag.Merge(Microsoft.Pex.Engine.Logging.PexStackFrameTag)">
            <summary>
            Merges the tag from another tag
            </summary>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.PexStackFrameTag.WriteXml(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter)">
            <summary>
            Writes the tag to xml
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.PexStackFrameTag.FromLoggedXml(System.Xml.XPath.XPathNavigator)">
            <summary>
            Reads the tag from xml
            </summary>
            <param name="navigator"></param>
        </member>
        <member name="P:Microsoft.Pex.Engine.Logging.PexStackFrameTag.ExceptionState">
            <summary>
            Gets the state of the exception.
            </summary>
            <value>The state of the exception.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Logging.PexStackFrameTag.Tests">
            <summary>
            Gets the tests.
            </summary>
            <value>The tests.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.Logging.PexAssemblyEventArgs">
            <summary>
            Assembly event args
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.PexAssemblyEventArgs.#ctor(Microsoft.Pex.Engine.PexAssembly)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.Logging.PexAssemblyEventArgs"/> class.
            </summary>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="P:Microsoft.Pex.Engine.Logging.PexAssemblyEventArgs.FileHeader">
            <summary>
            Gets the file header.
            </summary>
            <value>The file header.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Logging.PexAssemblyEventArgs.AssemblyName">
            <summary>
            Gets the name of the assembly.
            </summary>
            <value>The name of the assembly.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Logging.PexAssemblyEventArgs.Assembly">
            <summary>
            Gets the assembly (not serialized)
            </summary>
            <value>The assembly.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.Logging.AssemblyExEventArgs">
            <summary>
            Assembly event args
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.AssemblyExEventArgs.#ctor(Microsoft.ExtendedReflection.Metadata.AssemblyEx)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.Logging.AssemblyExEventArgs"/> class.
            </summary>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="P:Microsoft.Pex.Engine.Logging.AssemblyExEventArgs.FileHeader">
            <summary>
            Gets the file header.
            </summary>
            <value>The file header.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Logging.AssemblyExEventArgs.AssemblyName">
            <summary>
            Gets the name of the assembly.
            </summary>
            <value>The name of the assembly.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Logging.AssemblyExEventArgs.Assembly">
            <summary>
            Gets the assembly (not serialized)
            </summary>
            <value>The assembly.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.Logging.AssemblyNameEventArgs">
            <summary>
            Assembly Name Event Args
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.AssemblyNameEventArgs.#ctor(Microsoft.ExtendedReflection.Metadata.Names.ShortAssemblyName)">
            <summary>
            Constructor for assembly event arguments
            </summary>
            <param name="assemblyName"></param>
        </member>
        <member name="P:Microsoft.Pex.Engine.Logging.AssemblyNameEventArgs.ShortAssemblyName">
            <summary>
            Gets the short assembly name
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Logging.PexFixtureEventArgs">
            <summary>
            Fixture event args
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.PexFixtureEventArgs.#ctor(Microsoft.Pex.Engine.PexFixture)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.Logging.PexFixtureEventArgs"/> class.
            </summary>
            <param name="fixture">The fixture.</param>
        </member>
        <member name="P:Microsoft.Pex.Engine.Logging.PexFixtureEventArgs.Fixture">
            <summary>
            Gets the fixture.
            </summary>
            <value>The fixture.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.Logging.TypeExEventArgs">
            <summary>
            Fixture event args
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.TypeExEventArgs.#ctor(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.Logging.TypeExEventArgs"/> class.
            </summary>
            <param name="fixture">The fixture.</param>
        </member>
        <member name="P:Microsoft.Pex.Engine.Logging.TypeExEventArgs.Fixture">
            <summary>
            Gets the fixture.
            </summary>
            <value>The fixture.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.Logging.PexExplorationEventArgs">
            <summary>
            Exploration event args
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.PexExplorationEventArgs.#ctor(Microsoft.Pex.Engine.PexExplorationName,System.Boolean,Microsoft.ExtendedReflection.Metadata.Names.Name)">
            <summary>
            Only used for de-serialization of log files
            </summary>
            <param name="explorationName">Name of the exploration.</param>
            <param name="isDynamicCode">if set to <c>true</c> [is dynamic code].</param>
            <param name="target">The target, may be null.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.PexExplorationEventArgs.#ctor(Microsoft.Pex.Engine.PexExplorationBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.Logging.PexExplorationEventArgs"/> class.
            </summary>
            <param name="exploration">The exploration.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.PexExplorationEventArgs.TryGetTarget(Microsoft.ExtendedReflection.Metadata.Names.Name@)">
            <summary>
            Tries to get the target name.
            </summary>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.Logging.PexExplorationEventArgs.Exploration">
            <summary>
            Gets the exploration.
            </summary>
            <value>The exploration.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Logging.PexExplorationEventArgs.ExplorationName">
            <summary>
            Gets the method.
            </summary>
            <value>The method.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Logging.PexExplorationEventArgs.IsDynamicCode">
            <summary>
            Gets a value indicating whether the exploration was generated dynamically.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Logging.MethodEventArgs">
            <summary>
            Exploration event args
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.MethodEventArgs.#ctor(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Constructor
            </summary>
            <param name="exploration">Name of the exploration.</param>        
        </member>
        <member name="P:Microsoft.Pex.Engine.Logging.MethodEventArgs.Exploration">
            <summary>
            Gets the exploration.
            </summary>
            <value>The exploration.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.Logging.ExplorationResultEventArgs">
            <summary>
            Exploration result event args.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.ExplorationResultEventArgs.#ctor(Microsoft.Pex.Engine.PexExplorationResultObserver)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.Logging.ExplorationResultEventArgs"/> class.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="P:Microsoft.Pex.Engine.Logging.ExplorationResultEventArgs.Result">
            <summary>
            Gets the result.
            </summary>
            <value>The result.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.Logging.ResultEventArgs">
            <summary>
            Result event args.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.ResultEventArgs.#ctor(Microsoft.Pex.Engine.PexResultObserver)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.Logging.ResultEventArgs"/> class.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="P:Microsoft.Pex.Engine.Logging.ResultEventArgs.Result">
            <summary>
            Gets the result.
            </summary>
            <value>The result.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.Logging.PexExistingTestEventArgs">
            <summary>
            Existing test event args
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.PexExistingTestEventArgs.#ctor(Microsoft.Pex.Engine.PexExistingTest)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.Logging.PexExistingTestEventArgs"/> class.
            </summary>
            <param name="existingTest">The existing test.</param>
        </member>
        <member name="P:Microsoft.Pex.Engine.Logging.PexExistingTestEventArgs.ExistingTest">
            <summary>
            Gets the existing test.
            </summary>
            <value>The existing test.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.Logging.GeneratedTestEventArgs">
            <summary>
            Generated test event args
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.GeneratedTestEventArgs.#ctor(Microsoft.Pex.Engine.IPexGeneratedTest)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.Logging.GeneratedTestEventArgs"/> class.
            </summary>
            <param name="generatedTest">The generated test.</param>
        </member>
        <member name="P:Microsoft.Pex.Engine.Logging.GeneratedTestEventArgs.GeneratedTest">
            <summary>
            Gets the generated test.
            </summary>
            <value>The generated test.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.Logging.AfterReflectionEventArgs">
            <summary>
            Reflection event event args
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.AfterReflectionEventArgs.#ctor(Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.Pex.Engine.PexExplorationName})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ExtendedReflection.Logging.ReflectionEventEventArgs"/> class.
            </summary>
            <param name="explorationNames">the list of exploration method names if any</param>
        </member>
        <member name="P:Microsoft.Pex.Engine.Logging.AfterReflectionEventArgs.ExplorationNames">
            <summary>
            Gets the reflection event.
            </summary>
            <value>The reflection event.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.Logging.GeneratedFixtureEventArgs">
            <summary>
            Generated fixture event args
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.GeneratedFixtureEventArgs.#ctor(Microsoft.Pex.Engine.PexGeneratedFixture)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.Logging.GeneratedFixtureEventArgs"/> class.
            </summary>
            <param name="generatedFixture">The generated fixture.</param>
        </member>
        <member name="P:Microsoft.Pex.Engine.Logging.GeneratedFixtureEventArgs.GeneratedFixture">
            <summary>
            Gets the generated fixture.
            </summary>
            <value>The generated fixture.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.Logging.PexGeneratedFileKind">
            <summary>
            Pex generated file kind
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Logging.PexGeneratedFileKind.XmlReport">
            <summary>
            XML report
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Logging.PexGeneratedFileKind.HtmlReport">
            <summary>
            HTML report
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Logging.PexGeneratedFileKind.TestFixture">
            <summary>
            test fixture
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Logging.PexGeneratedFileKind.TestProject">
            <summary>
            test project
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Logging.PexGeneratedFileKind.Coverage">
            <summary>
            coverage
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Logging.PexGeneratedFileKind.XmlCoverage">
            <summary>
            xml coverage data
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Logging.GeneratedFileEventArgs">
            <summary>
            Generated file event args
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.GeneratedFileEventArgs.#ctor(Microsoft.Pex.Engine.Logging.PexGeneratedFileKind,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.Logging.GeneratedFileEventArgs"/> class.
            </summary>
            <param name="kind">The kind.</param>
            <param name="itemName">Name of the item.</param>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="P:Microsoft.Pex.Engine.Logging.GeneratedFileEventArgs.Kind">
            <summary>
            Gets the file kind.
            </summary>
            <value>The kind.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Logging.GeneratedFileEventArgs.ItemName">
            <summary>
            Gets the name of the item.
            </summary>
            <value>The name of the item.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Logging.GeneratedFileEventArgs.FileName">
            <summary>
            Gets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.Logging.ProgressEventArgs">
            <summary>
            Progress event args
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.ProgressEventArgs.#ctor(Microsoft.Pex.Engine.PexProgress)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.Logging.ProgressEventArgs"/> class.
            </summary>
            <param name="progress">The progress.</param>
        </member>
        <member name="P:Microsoft.Pex.Engine.Logging.ProgressEventArgs.Progress">
            <summary>
            Gets the progress information.
            </summary>
            <value>The progress.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.PexAssembly">
            <summary>
            Pex assembly
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.PexDecoratedComponentElementBase">
            <summary>
            Base class of decorated component elements
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexDecoratedComponentElementBase.#ctor(Microsoft.Pex.Engine.ComponentModel.IPexComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.PexDecoratedComponentElementBase"/> class.
            </summary>
            <param name="host">The host.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexDecoratedComponentElementBase.GetReproCommandLines">
            <summary>
            Returns a list of pairs of name and command line.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexDecoratedComponentElementBase.AddExplorationPackage(Microsoft.ExtendedReflection.Metadata.Names.Name,Microsoft.Pex.Engine.Packages.IPexExplorationPackage)">
            <summary>
            Adds the exploration package.
            </summary>
            <param name="location">The location.</param>
            <param name="explorationPackage">The exploration package.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexDecoratedComponentElementBase.AddPathPackage(Microsoft.ExtendedReflection.Metadata.Names.Name,Microsoft.Pex.Engine.Packages.IPexPathPackage)">
            <summary>
            Adds the path package.
            </summary>
            <param name="location">The location.</param>
            <param name="pathPackage">The path package.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexDecoratedComponentElementBase.AddCoverageFilter(Microsoft.ExtendedReflection.Coverage.ICoverageFilter)">
            <summary>
            Adds the coverage filter.
            </summary>
            <param name="coverageFilter">The coverage filter.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexDecoratedComponentElementBase.AddFocus(Microsoft.Pex.Engine.Focus.IPexFocus)">
            <summary>
            Adds a focus.
            </summary>
            <param name="focus">The focus.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexDecoratedComponentElementBase.ClearCache">
            <summary>
            Clears the cached data.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexDecoratedComponentElementBase.ReflectDecoration(Microsoft.ExtendedReflection.Metadata.ICustomAttributeProviderEx)">
            <summary>
            Reflects the decoration.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexDecoratedComponentElementBase.MergeCoverageFilters">
            <summary>
            Merges the coverage filters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexDecoratedComponentElementBase.MergeFocuses">
            <summary>
            Merges the focuses.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexDecoratedComponentElementBase.DumpPackages(Microsoft.ExtendedReflection.Logging.DumpTreeWriter)">
            <summary>
            Dumps the packages.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexDecoratedComponentElementBase.ExplorationPackages">
            <summary>
            Gets the exploration packages.
            </summary>
            <value>The exploration packages.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexDecoratedComponentElementBase.PathPackages">
            <summary>
            Gets the path packages.
            </summary>
            <value>The path packages.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexDecoratedComponentElementBase.CoverageFilters">
            <summary>
            Gets the coverage filters.
            </summary>
            <value>The coverage filters.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexDecoratedComponentElementBase.Focuses">
            <summary>
            Gets the focuses.
            </summary>
            <value>The focuses.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexDecoratedComponentElementBase.GeneratedTestsVisibilityContext">
            <summary>
            Gets or sets the generated tests visibility context.
            </summary>
            <value>The generated tests visibility context.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexDecoratedComponentElementBase.CoverageFilter">
            <summary>
            Gets the coverage filter from the coverage manager
            </summary>
            <value>The coverage filter.</value>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexAssembly.GetReproCommandLines">
            <summary>
            Returns a list of pairs of name and command line.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexAssembly.TryGetSettingsAssembly(Microsoft.ExtendedReflection.Metadata.AssemblyEx@)">
            <summary>
            Tries to get the additional settings assembly (might be null).
            </summary>
            <param name="settingsAssembly">The settings assembly.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexAssembly.TryGetGeneratedTestAssembly(Microsoft.ExtendedReflection.Metadata.AssemblyEx@)">
            <summary>
            Tries to get the generated test assembly
            </summary>
            <param name="generatedTestAssembly"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexAssembly.#ctor(Microsoft.Pex.Engine.ComponentModel.IPexComponent,Microsoft.ExtendedReflection.Metadata.AssemblyEx,Microsoft.ExtendedReflection.Metadata.AssemblyEx,Microsoft.ExtendedReflection.Metadata.AssemblyEx,Microsoft.Pex.Framework.Settings.PexAssemblySettingsAttribute)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.PexAssembly"/> class.
            </summary>
            <param name="host">The host.</param>
            <param name="assembly">The assembly.</param>
            <param name="settingsAssembly">The additional settings assembly (might be null).</param>
            <param name="generatedTestAssembly">the generated test assembly (might be null).</param>
            <param name="settings">The default settings.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexAssembly.ReflectDecoration">
            <summary>
            Reflects the decoration.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexAssembly.LockSettings">
            <summary>
            Locks the settings.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexAssembly.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexAssembly.MergeSettings">
            <summary>
            Merges the settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexAssembly.MergeCoverageFilters">
            <summary>
            Merges the coverage filters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexAssembly.MergeFocuses">
            <summary>
            Merges the coverage domains.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexAssembly.TryFindFixture(Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.Pex.Engine.PexFixture@)">
            <summary>
            Tries to find the fixture.
            </summary>
            <param name="fixtureType">Type of the fixture.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexAssembly.TryFindExploration(Microsoft.ExtendedReflection.Metadata.Method,Microsoft.Pex.Engine.PexExplorationBase@)">
            <summary>
            Tries to find the exploration corresponding to the <paramref name="explorationMethod"/>
            </summary>
            <param name="explorationMethod">The exploration method.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexAssembly.GetExplorationNames">
            <summary>
            Gets the list of explorations
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexAssembly.Assembly">
            <summary>
            Gets the assembly containing the pex classes
            </summary>
            <value>The assembly.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexAssembly.AssemblyName">
            <summary>
            Gets the name of the assembly.
            </summary>
            <value>The name of the assembly.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexAssembly.AssemblySetUp">
            <summary>
            Gets or sets the assembly setup method if any
            </summary>
            <value>The assembly set up.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexAssembly.AssemblyTearDown">
            <summary>
            Gets or sets the assembly teardown if any
            </summary>
            <value>The assembly tear down.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexAssembly.Settings">
            <summary>
            Gets the settings
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexAssembly.Fixtures">
            <summary>
            Gets the fixtures.
            </summary>
            <value>The fixtures.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexAssembly.RequiresX86">
            <summary>
            Whether reflection of this assembly requires an x86-environment
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.PexExplorationBase">
            <summary>
            Abstract base class of explorations.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexExplorationBase.#ctor(Microsoft.Pex.Engine.PexFixture,Microsoft.ExtendedReflection.Metadata.Method,Microsoft.Pex.Framework.PexExplorationAttributeBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.PexExplorationBase"/> class.
            </summary>
            <param name="fixture">The fixture.</param>
            <param name="method">The method.</param>
            <param name="attribute">The attribute.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexExplorationBase.TryGetMembersUnderTest(Microsoft.ExtendedReflection.Collections.IFiniteSet{Microsoft.ExtendedReflection.Metadata.MetadataDefinition}@)">
            <summary>
            Tries to get the method under test.
            </summary>
            <param name="members">The members.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexExplorationBase.DecodeMembersUnderTest">
            <summary>
            tries to infer the method under test.
            </summary>
            <remarks>
            If the PUT was generated by the wizard, there should be only 1 call in the method.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexExplorationBase.TryGetTarget(Microsoft.ExtendedReflection.Metadata.Names.Name@)">
            <summary>
            Gets the target member for this exploration.
            </summary>
            <value>The target.</value>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexExplorationBase.GetTarget">
            <summary>
            Gets the target member for this exploration if any.
            </summary>
            <remarks>
            Name supported: <see cref="T:Microsoft.ExtendedReflection.Metadata.Names.MethodName"/>, <see cref="T:Microsoft.ExtendedReflection.Metadata.Names.MethodDefinitionName"/>,
            <see cref="T:Microsoft.ExtendedReflection.Metadata.Names.PropertyName"/>, <see cref="T:Microsoft.ExtendedReflection.Metadata.Names.PropertyDefinitionName"/>
            </remarks>
            <returns>may return null</returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexExplorationBase.CreateExplorationEngine">
            <summary>
            Creates an exploration engine, and returns the driver component.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexExplorationBase.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexExplorationBase.ReflectDecoration">
            <summary>
            Reflects the decoration.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexExplorationBase.MergeSettings">
            <summary>
            Merges the settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexExplorationBase.MergeExplorationPackages">
            <summary>
            Merges the exploration packages.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexExplorationBase.MergePathPackages">
            <summary>
            Merges the path packages.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexExplorationBase.MergeCoverageFilters">
            <summary>
            Merges the coverage filters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexExplorationBase.MergeFocuses">
            <summary>
            Merges the focuses.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexExplorationBase.Fixture">
            <summary>
            Gets the fixture.
            </summary>
            <value>The fixture.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexExplorationBase.Method">
            <summary>
            Gets the method.
            </summary>
            <value>The method.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexExplorationBase.SerializableName">
            <summary>
            Gets the exploration key
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexExplorationBase.Settings">
            <summary>
            Gets the settings.
            </summary>
            <value>The settings.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexExplorationBase.ShortName">
            <summary>
            Gets the short name.
            </summary>
            <value>The short name.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexExplorationBase.ShortTypedName">
            <summary>
            Gets the short typed name.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexExplorationBase.FullName">
            <summary>
            Gets the full name.
            </summary>
            <value>The full name.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexExplorationBase.CreateUpdate">
            <summary>
            Gets a CodeUpdate that would generate the source of the exploration method,
            might be null.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.PexExplorationCollection">
            <summary>
            Collection of explorations
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.PexExplorationResultObserver">
            <summary>
            Exploration result observer
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.PexResultObserver">
            <summary>
            Pex result observer
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexResultObserver.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.PexResultObserver"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="diagnostic">if set to <c>true</c> [diagnostic].</param>
            <param name="id">The id.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexResultObserver.Start(System.String,System.Boolean,System.Boolean)">
            <summary>
            Starts the result observation.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexResultObserver.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexResultObserver.Finished(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Indicates that the observation is finished.
            </summary>
            <param name="errorCount">The error count.</param>
            <param name="warningCount">The warning count.</param>
            <param name="traceTouched">indicates whether the Trace API was touched.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexResultObserver.Failed">
            <summary>
            Indicates that the observed path failed.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexResultObserver.ToResult">
            <summary>
            Converts this instance to <see cref="T:Microsoft.Pex.Engine.PexResult"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexResultObserver.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexResultObserver.Duration">
            <summary>
            Gets the duration.
            </summary>
            <value>The duration.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexResultObserver.State">
            <summary>
            Gets the result state.
            </summary>
            <value>The state.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexResultObserver.StateDescription">
            <summary>
            Gets the state description.
            </summary>
            <value>The state description.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexResultObserver.ConsoleOut">
            <summary>
            Gets the console out.
            </summary>
            <value>The console out.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexResultObserver.ConsoleError">
            <summary>
            Gets the console error.
            </summary>
            <value>The console error.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexResultObserver.Trace">
            <summary>
            Gets the trace output stream
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexResultObserver.ErrorCount">
            <summary>
            Gets the error count.
            </summary>
            <value>The error count.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexResultObserver.WarningCount">
            <summary>
            Gets the warning count.
            </summary>
            <value>The warning count.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexResultObserver.TraceTouched">
            <summary>
            Gets a value indicating whether the Trace API was touched
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.PexResultObserver.ResultWriter">
            <summary>
            Result writer
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexExplorationResultObserver.#ctor(Microsoft.Pex.Engine.PexExplorationBase,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.PexExplorationResultObserver"/> class.
            </summary>
            <param name="exploration">The exploration.</param>
            <param name="diagnostic">if set to <c>true</c> [diagnostic].</param>
            <param name="id">The id.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexExplorationResultObserver.AddCoverage(Microsoft.ExtendedReflection.Coverage.CoverageEntry)">
            <summary>
            Adds a coverage entry.
            </summary>
            <param name="entry">The entry.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexExplorationResultObserver.TryFindFirstCoverage(Microsoft.ExtendedReflection.Coverage.CoverageDomain,System.String,Microsoft.ExtendedReflection.Coverage.CoverageEntry@)">
            <summary>
            Tries to find the first coverage entry matching
            the domain and unit
            </summary>
            <param name="domain">The domain.</param>
            <param name="unit">The unit.</param>
            <param name="entry">The entry.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexExplorationResultObserver.Exploration">
            <summary>
            Gets the exploration.
            </summary>
            <value>The exploration.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexExplorationResultObserver.Coverages">
            <summary>
            Gets a list of available coverage entries.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.PexFixture">
            <summary>
            Pex fixture
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexFixture.#ctor(Microsoft.Pex.Engine.ComponentModel.IPexComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.PexFixture"/> class.
            </summary>
            <param name="host">The host.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexFixture.GetReproCommandLines">
            <summary>
            Returns a list of pairs of name and command line.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexFixture.#ctor(Microsoft.Pex.Engine.PexAssembly,Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.Pex.Framework.PexClassAttribute)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.PexFixture"/> class.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="fixtureType">Type of the fixture.</param>
            <param name="attribute">The attribute.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexFixture.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexFixture.TryCreateInstance(System.Object@)">
            <summary>
            Creates an instance of the fixture type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexFixture.DisposeInstance(System.Object)">
            <summary>
            Disposes an instance of the fixture type
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexFixture.ReflectDecoration">
            <summary>
            Reflects the decoration.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexFixture.LockSettings">
            <summary>
            Locks the settings.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexFixture.MergeSettings">
            <summary>
            Merges the settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexFixture.MergeCoverageFilters">
            <summary>
            Merges the coverage filters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexFixture.MergeFocuses">
            <summary>
            Merges the coverage domains.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexFixture.Assembly">
            <summary>
            Gets the assembly.
            </summary>
            <value>The assembly.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexFixture.FixtureType">
            <summary>
            Gets the type of the fixture.
            </summary>
            <value>The type of the fixture.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexFixture.Settings">
            <summary>
            Gets the settings.
            </summary>
            <value>The settings.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexFixture.FixtureSetUp">
            <summary>
            Gets or sets the fixture setup method if any
            </summary>
            <value>The fixture set up.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexFixture.FixtureTearDown">
            <summary>
            Gets or sets the fixture teardown method if any
            </summary>
            <value>The fixture tear down.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexFixture.SetUp">
            <summary>
            Gets or sets the test setup method if any
            </summary>
            <value>The set up.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexFixture.TearDown">
            <summary>
            Gets or sets the test teardown method if any
            </summary>
            <value>The tear down.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexFixture.Explorations">
            <summary>
            Gets the explorations.
            </summary>
            <value>The explorations.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexFixture.ShortName">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexFixture.FullName">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.PexFixtureCollection">
            <summary>
            A collection of <see cref="T:Microsoft.Pex.Engine.PexFixture"/>
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexFixtureCollection.ExplorationCount">
            <summary>
            Gets the exploration count.
            </summary>
            <value>The exploration count.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.PexGeneratedFixture">
            <summary>
            Generated fixture
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexGeneratedFixture.#ctor(Microsoft.Pex.Engine.PexFixture,Microsoft.ExtendedReflection.Metadata.Names.TypeDefinitionName,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.PexGeneratedFixture"/> class.
            </summary>
            <param name="fixture">The fixture.</param>
            <param name="generatedTypeName">Name of the generated type.</param>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexGeneratedFixture.PrepareForSerialization(Microsoft.ExtendedReflection.ComponentModel.IComponent)">
            <summary>
            Prepares for serialization.
            </summary>
            <param name="host">The host.</param>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexGeneratedFixture.Fixture">
            <summary>
            Gets the fixture.
            </summary>
            <value>The fixture.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexGeneratedFixture.RemoteFixtureType">
            <summary>
            Gets the type of the remote fixture.
            </summary>
            <value>The type of the remote fixture.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexGeneratedFixture.GeneratedTypeName">
            <summary>
            Gets the name of the generated type.
            </summary>
            <value>The name of the generated type.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexGeneratedFixture.FileName">
            <summary>
            Gets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.PexGeneratedTestFlags">
            <summary>
            Flags describing generated test
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexGeneratedTestFlags.Default">
            <summary>
            No flags set
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexGeneratedTestFlags.Failure">
            <summary>
            The test was a failure
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexGeneratedTestFlags.CustomInput">
            <summary>
            The test was a custom input not under 
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexGeneratedTestFlags.Compilable">
            <summary>
            The test is not compilable
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexGeneratedTestFlags.Reproducible">
            <summary>
            The test is not reproducible
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexGeneratedTestFlags.LazyStorage">
            <summary>
            The test should be stored lazily
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexGeneratedTestFlags.Duplicate">
            <summary>
            The test is a duplicate
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexGeneratedTestFlags.Inconclusive">
            <summary>
            The test is inconclusive
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexGeneratedTestFlags.Ignored">
            <summary>
            The test is ignored
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexGeneratedTestFlags.Hosted">
            <summary>
            The test is hosted
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.PexGeneratedTestName">
            <summary>
            A thin serializable name of a generated test
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexGeneratedTestName.#ctor(Microsoft.Pex.Engine.IPexGeneratedTest)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.PexGeneratedTestName"/> class.
            </summary>
            <param name="test">The test.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexGeneratedTestName.GetFlags(Microsoft.Pex.Engine.IPexGeneratedTest)">
            <summary>
            Gets the generated test flags
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexGeneratedTestName.Equals(Microsoft.Pex.Engine.PexGeneratedTestName)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexGeneratedTestName.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexGeneratedTestName.Internalize">
            <summary>
            Internalizes this instance
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexGeneratedTestName.ID">
            <summary>
            Gets the ID.
            </summary>
            <value>The ID.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexGeneratedTestName.TestMethodName">
            <summary>
            Gets the name of the test method.
            </summary>
            <value>The name of the test method.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexGeneratedTestName.Flags">
            <summary>
            Gets the flags.
            </summary>
            <value>The flags.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexGeneratedTestName.IsFailure">
            <summary>
            Gets a value indicating whether this instance is failure.
            </summary>
            <value>
            	<c>true</c> if this instance is failure; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexGeneratedTestName.IsIgnored">
            <summary>
            Gets a value indicating whether this instance is failure.
            </summary>
            <value>
            	<c>true</c> if this instance is ignored; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexGeneratedTestName.IsInconclusive">
            <summary>
            Gets a value indicating whether this instance is inconclusive.
            </summary>
            <value>
            	<c>true</c> if this instance is inconclusive; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexGeneratedTestName.IsHosted">
            <summary>
            Gets a value indicating whether this instance is hosted.
            </summary>
            <value>
            	<c>true</c> if this instance is hosted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexGeneratedTestName.IsDuplicate">
            <summary>
            Gets a value indicating whether this instance is duplicate.
            </summary>
            <value>
            	<c>true</c> if this instance is duplicate; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Microsoft.Pex.Engine.PexGeneratedTest">
            <summary>
            A type representing a genenerated test
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.IPexGeneratedTest">
            <summary>
            A generated test
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.IPexGeneratedTest.SetDuplicate(Microsoft.Pex.Engine.PexExistingTest)">
            <summary>
            Sets the test duplicate
            </summary>
            <param name="duplicate"></param>
        </member>
        <member name="M:Microsoft.Pex.Engine.IPexGeneratedTest.TryGetCustomInputMethodDefinition(Microsoft.ExtendedReflection.Metadata.Names.MethodName@)">
            <summary>
            Tries to get the method from which the test was mined
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.IPexGeneratedTest.WriteXml(Microsoft.Pex.Engine.ComponentModel.IPexComponent,Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter)">
            <summary>
            Writes the test to xml
            </summary>
            <param name="host"></param>
            <param name="writer"></param>
        </member>
        <member name="P:Microsoft.Pex.Engine.IPexGeneratedTest.Index">
            <summary>
            Gets the test index
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.IPexGeneratedTest.Run">
            <summary>
            Gets the run index
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.IPexGeneratedTest.RemoteFixtureType">
            <summary>
            Gets the fixture type name
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.IPexGeneratedTest.RemoteExplorationMethod">
            <summary>
            Gets the exploration method
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.IPexGeneratedTest.ExplorationName">
            <summary>
            Gets the exploration name
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.IPexGeneratedTest.TestMethodName">
            <summary>
            Gets the test method name
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.IPexGeneratedTest.ExceptionState">
            <summary>
            Gets the exception state if any
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.IPexGeneratedTest.Status">
            <summary>
            Gets the status of the test
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.IPexGeneratedTest.IsInconclusive">
            <summary>
            Gets a value indicating if the test is inconclusive
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.IPexGeneratedTest.IsIgnored">
            <summary>
            Gets or sets a value indicating if the test is ignored.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.IPexGeneratedTest.IsFailure">
            <summary>
            Gets a value whether the test is a failure
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.IPexGeneratedTest.IsDuplicate">
            <summary>
            Gets a value indicating if the test is a duplicate
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.IPexGeneratedTest.IsReproducible">
            <summary>
            Gets a value indicating whether the test can be reproduced
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.IPexGeneratedTest.IsHosted">
            <summary>
            Gets a value indicating if the test has to run hosted
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.IPexGeneratedTest.IsNew">
            <summary>
            Gets a value indicating if the test is new
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.IPexGeneratedTest.MethodCode">
            <summary>
            Gets the method code, including signature and attributes
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.IPexGeneratedTest.BodyCode">
            <summary>
            Gets the method body code
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.IPexGeneratedTest.IsCustomInput">
            <summary>
            Gets a value indicating if the test was mined from inputs
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.IPexGeneratedTest.IsGenerated">
            <summary>
            Gets a value indicating if the test was generated by Pex
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.IPexGeneratedTest.IsCompilable">
            <summary>
            Gets a value indicating if the test is compilable
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.IPexGeneratedTest.ID">
            <summary>
            Gets an unique identifier of the test
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.IPexGeneratedTest.LazyStorage">
            <summary>
            Gets a value indicating wheter the test should be stored lazily
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.IPexGeneratedTest.SerializableName">
            <summary>
            Gets a lightweight serializable name of the test
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.IPexGeneratedTest.MethodImports">
            <summary>
            Returns the list of method imports
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.IPexGeneratedTest.MethodReferences">
            <summary>
            Returns list of method references
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Injection.IPexExceptionInjector">
            <summary>
            A component that may inject exceptions
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Injection.IPexExceptionInjector.TryGetInjectedExceptions(Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.Pex.Engine.Injection.PexGeneratedInjectedException}@)">
            <summary>
            Gets the collection of injected exceptions
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexGeneratedTest.ImageKeyName">
            <summary>
            Image key name
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexGeneratedTest.#ctor(Microsoft.Pex.Engine.PexExplorationBase,System.Int32,System.Int32,System.Exception,System.Boolean,System.Boolean,System.Boolean,Microsoft.ExtendedReflection.Metadata.Names.MethodName,System.Boolean,System.String,System.String,Microsoft.Pex.Engine.PexGeneratedTestResult,Microsoft.Pex.Engine.Exceptions.PexExceptionState,Microsoft.Pex.Engine.PexGeneratedTestResultStatus,Microsoft.ExtendedReflection.Feedback.NamedValue[],Microsoft.Pex.Engine.FixIt.PexGeneratedFailureFixSuggestion[],Microsoft.Pex.Engine.Injection.PexGeneratedInjectedException[],Microsoft.Pex.Engine.Injection.PexGeneratedInjectedValue[],System.String,System.String,System.Boolean,System.Boolean,System.Boolean,Microsoft.ExtendedReflection.Feedback.CodeUpdate,System.String,Microsoft.ExtendedReflection.Coverage.RunningCoverageEntry[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.PexGeneratedTest"/> class.
            </summary>
            <param name="exploration">The exploration.</param>
            <param name="index">The index.</param>
            <param name="run">The run.</param>
            <param name="exception">The exception.</param>
            <param name="isFailure">Whether the existing test represents a failure.</param>
            <param name="isHosted">whether the test should be hosted</param>
            <param name="isCustomInput">Whether the test was mined from existing inputs</param>
            <param name="isGenerated">Whether the test was generated by Pex</param>
            <param name="_customInputMethod"></param>
            <param name="failureText">The failure text.</param>
            <param name="failureWikiTopic">The failure wiki topic.</param>
            <param name="result">The result.</param>
            <param name="exceptionState">State of the exception.</param>
            <param name="status">The status.</param>
            <param name="generatedValues">The generated values.</param>
            <param name="failureFixSuggestions">Suggestions to fix failures, if any</param>
            <param name="injectedExceptions">The injected exceptions.</param>
            <param name="injectedValues">The injected values.</param>
            <param name="pathAssumption">The path assumption.</param>
            <param name="pathCondition">path condition</param>
            <param name="notCompilable">Whether the method body cannot be compiled.</param>
            <param name="notReproducible">Whether the generated can be reproduced</param>
            <param name="hasExtendedMethodBody">Whether the test method body involves more that simply passing parameters. For example, object creation or oracle choices.</param>
            <param name="boundaryCodeUpdate">The boundary code update, if any.</param>
            <param name="boundaryDetails">The boundary details, if any.</param>
            <param name="_runningCoverages">The running coverages if any.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexGeneratedTest.TryGetTooltip(System.String@)">
            <summary>
            Converts to tooltip style information
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexGeneratedTest.TryGetCustomInputMethodDefinition(Microsoft.ExtendedReflection.Metadata.Names.MethodName@)">
            <summary>
            Tries to get the method from which the test was mined, if any
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexGeneratedTest.TryGetDuplicate(Microsoft.Pex.Engine.PexExistingTest@)">
            <summary>
            Tries to get duplicate test.
            </summary>
            <param name="duplicate">The duplicate.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexGeneratedTest.TryGetInjectedExceptions(Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.Pex.Engine.Injection.PexGeneratedInjectedException}@)">
            <summary>
            Gets the injected exceptions.
            </summary>
            <value>The injected exceptions.</value>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexGeneratedTest.TryGetInjectedValues(Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.Pex.Engine.Injection.PexGeneratedInjectedValue}@)">
            <summary>
            Gets the injected values.
            </summary>
            <value>The injected values.</value>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexGeneratedTest.SetDuplicate(Microsoft.Pex.Engine.PexExistingTest)">
            <summary>
            Indicates that this test is a duplicate test.
            </summary>
            <param name="duplicate">The duplicate.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexGeneratedTest.TryGetBoundaryCodeUpdate(Microsoft.ExtendedReflection.Feedback.CodeUpdate@)">
            <summary>
            Tries to get the boundary code update.
            </summary>
            <param name="codeUpdate">The code update.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexGeneratedTest.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexGeneratedTest.PrepareForSerialization(Microsoft.ExtendedReflection.ComponentModel.IComponent)">
            <summary>
            Prepares for serialization.
            </summary>
            <param name="host">The host.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexGeneratedTest.FromXml(Microsoft.ExtendedReflection.Metadata.Names.TypeName,Microsoft.ExtendedReflection.Metadata.Names.MethodName,System.Xml.XPath.XPathNavigator)">
            <summary>
            Creates a test from previously logged xml.
            </summary>
            <param name="fixtureType">The fixture type.</param>
            <param name="explorationMethod">The exploration method.</param>
            <param name="navigator">The navigator.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">when an error occurrs</exception>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexGeneratedTest.WriteXml(Microsoft.Pex.Engine.ComponentModel.IPexComponent,Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter)">
            <summary>
            Writes the test to xml
            </summary>
            <param name="host"></param>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexGeneratedTest.TryGetStackTrace(Microsoft.ExtendedReflection.Symbols.StackTraceName@)">
            <summary>
            Gets the stack trace (might be null)
            </summary>
            <param name="trace">The trace.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexGeneratedTest.TryGetCodeUpdate(Microsoft.ExtendedReflection.Feedback.CodeUpdate@)">
            <summary>
            Tries to get the code update.
            </summary>
            <param name="update">The update.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexGeneratedTest.TryGetAuthorizationCodeUpdate(Microsoft.ExtendedReflection.Feedback.CodeUpdate@)">
            <summary>
            Tries to get the authorization code update.
            </summary>
            <param name="update">The update.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexGeneratedTest.TryGetStorageCodeUpdate(Microsoft.ExtendedReflection.Feedback.CodeUpdate@)">
            <summary>
            Tries to get an update to save this event
            </summary>
            <param name="update"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexGeneratedTest.TryGetNamedValues(Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Feedback.NamedValue}@)">
            <summary>
            Gets the values from the generated test
            </summary>
            <param name="namedValues"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexGeneratedTest.BakeMethod(Microsoft.ExtendedReflection.Emit.IAssemblyTextWriter,Microsoft.ExtendedReflection.Metadata.VisibilityContext,Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder)">
            <summary>
            Bakes the test method.
            </summary>
            <param name="assemblyTextWriter">The assembly text writer.</param>
            <param name="visibility">The visibility.</param>
            <param name="testMethod">The test method.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexGeneratedTest.Internalize">
            <summary>
            Internalizes this instance
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexGeneratedTest.HasExtendedMethodBody">
            <summary>
            Gets a value indicating if the test method body
            involves more that simply passing parameters. For example,
            object creation or oracle choices.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexGeneratedTest.ID">
            <summary>
            Gets the ID.
            </summary>
            <value>The ID.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexGeneratedTest.Index">
            <summary>
            Gets the index of the test in the current exploration
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexGeneratedTest.Exploration">
            <summary>
            Gets the exploration that generated the test
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexGeneratedTest.Run">
            <summary>
            Gets the index of the run that generated the test
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexGeneratedTest.RemoteFixtureType">
            <summary>
            Gets the type of the remote fixture.
            </summary>
            <value>The type of the remote fixture.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexGeneratedTest.ExplorationName">
            <summary>
            Gets the exploration name
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexGeneratedTest.RemoteExplorationMethod">
            <summary>
            Gets the remote exploration method.
            </summary>
            <value>The remote exploration method.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexGeneratedTest.TestMethodName">
            <summary>
            Gets or sets the name of the test method.
            </summary>
            <value>The name of the test method.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexGeneratedTest.BodyCode">
            <summary>
            Gets the code.
            </summary>
            <value>The code.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexGeneratedTest.IsInconclusive">
            <summary>
            Gets a value indicating whether this test is inconclusive.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexGeneratedTest.IsIgnored">
            <summary>
            Gets or sets a value indicating if the test is ignored.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexGeneratedTest.Result">
            <summary>
            Gets the generated test result.
            </summary>
            <value>The result.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexGeneratedTest.MethodCode">
            <summary>
            Gets the method code.
            </summary>
            <value>The method code.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexGeneratedTest.MethodReferences">
            <summary>
            Gets the method references
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexGeneratedTest.ExplorationIsDynamicCode">
            <summary>
            Gets a value indicating whether the exploration was generated dynamically.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexGeneratedTest.LazyStorage">
            <summary>
            Gets a value indicating if the test should be stored lazily
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexGeneratedTest.MethodImports">
            <summary>
            Gets the method imports.
            </summary>
            <value>The method imports.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexGeneratedTest.Exception">
            <summary>
            Gets the exception, if any.
            </summary>
            <value>The exception.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexGeneratedTest.ExceptionType">
            <summary>
            Gets the type of the exception, if any.
            </summary>
            <value>The type of the exception.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexGeneratedTest.RemoteException">
            <summary>
            Gets the remote exception, if any.
            </summary>
            <value>The remote exception.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexGeneratedTest.IsFailure">
            <summary>
            Gets a value indicating whether this test is a failure.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexGeneratedTest.IsCustomInput">
            <summary>
            Gets a value indicating if the test was mined
            from an input enumeration
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexGeneratedTest.IsGenerated">
            <summary>
            Gets a value whether the test was generated by Pex
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexGeneratedTest.FailureText">
            <summary>
            Gets the failure text, if any.
            </summary>
            <value>The failure text.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexGeneratedTest.FailureWikiTopic">
            <summary>
            Gets the failure wiki topic, if any.
            </summary>
            <value>The failure wiki topic.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexGeneratedTest.IsReproducible">
            <summary>
            Gets a value indicating whether this test is not reproducible.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexGeneratedTest.Status">
            <summary>
            Gets the test status.
            </summary>
            <value>The status.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexGeneratedTest.ExceptionState">
            <summary>
            Gets the state of the exception.
            </summary>
            <value>The state of the exception.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexGeneratedTest.IsNew">
            <summary>
            Gets a value indicating whether this test is new.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexGeneratedTest.IsDuplicate">
            <summary>
            Gets a value indicating whether this test is duplicate.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexGeneratedTest.HasGeneratedValues">
            <summary>
            Gets a value indicating whether this test has generated values.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexGeneratedTest.GeneratedValues">
            <summary>
            Gets the generated values.
            </summary>
            <value>The generated values.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexGeneratedTest.HasFailureFixSuggestions">
            <summary>
            Gets a value indicating whether this test has fix suggestions.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexGeneratedTest.FailureFixSuggestions">
            <summary>
            Gets the failure fix suggestions.
            </summary>
            <value>The failure fix suggestions.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexGeneratedTest.PathAssumption">
            <summary>
            Gets the path assumption as a string.
            </summary>
            <value>The path assumption.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexGeneratedTest.PathCondition">
            <summary>
            Gets the path condition as a string.
            </summary>
            <value>The path condition.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexGeneratedTest.IsCompilable">
            <summary>
            Gets a value indicating if the test is compilable
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexGeneratedTest.IsHosted">
            <summary>
            Gets a value indicating if the test is hosted
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexGeneratedTest.Title">
            <summary>
            Gets the (short) title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexGeneratedTest.SerializableName">
            <summary>
            Gets the serializable name (lightweight).
            </summary>
            <value>The name of the serializable.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.PexLogCategories">
            <summary>
            Place holder for logging categories
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexLogCategories.Internal">
            <summary>
            Internal
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexLogCategories.Tests">
            <summary>
            Tests
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexLogCategories.Settings">
            <summary>
            Settings
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexLogCategories.Execution">
            <summary>
            Execution
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexLogCategories.Reports">
            <summary>
            Reports
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexLogCategories.Mixes">
            <summary>
            Mixes
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexLogCategories.Moles">
            <summary>
            Moles
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexLogCategories.Stubs">
            <summary>
            Stubs
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexLogCategories.Graphs">
            <summary>
            Graphs
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexLogCategories.Creatables">
            <summary>
            Creatables
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexLogCategories.Explorables">
            <summary>
            Explorables
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexLogCategories.Preparables">
            <summary>
            Preparables
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexLogCategories.Domains">
            <summary>
            Domains
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexLogCategories.FixIt">
            <summary>
            FixIt
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexLogCategories.Summaries">
            <summary>
            Summaries
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexLogCategories.Goals">
            <summary>
            Goals
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexLogCategories.Remoting">
            <summary>
            Remoting
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.PexResultState">
            <summary>
            Exploration result state enumeration
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexResultState.Success">
            <summary>
            Successful result
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PexResultState.Failed">
            <summary>
            Failure occurred
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.PexExistingTest">
            <summary>
            An existing test 
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexExistingTest.#ctor(System.Boolean,System.Boolean,Microsoft.ExtendedReflection.Metadata.Method,Microsoft.ExtendedReflection.Metadata.MethodDefinition,System.String,System.Boolean,System.Boolean,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.PexExistingTest"/> class.
            </summary>
            <param name="isGenerated">whether this test was generated (as opposed to hand-written).</param>
            <param name="isCustomInput">whether this test was a custom input to Pex</param>
            <param name="explorationMethod">The exploration method.</param>
            <param name="method">The method.</param>
            <param name="exceptionType">Type of the exception.</param>
            <param name="isFailure">Whether the existing test represents a failure.</param>
            <param name="isHosted"></param>
            <param name="hash">The hash.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexExistingTest.TryDecodeExplorationMethod(Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.ExtendedReflection.Metadata.MethodDefinition,Microsoft.Pex.Engine.ComponentModel.IPexComponentServices,Microsoft.ExtendedReflection.Metadata.Method@)">
            <summary>
            Tries to decode an exploration method.
            </summary>
            <param name="fixtureType">Type of the fixture.</param>
            <param name="methodDefinition">The method definition.</param>
            <param name="services">Services.</param>
            <param name="explorationMethod">The exploration method.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexExistingTest.TryGetHash(System.Guid@)">
            <summary>
            Tries to get the test hash.
            </summary>
            <value>The hash.</value>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexExistingTest.WriteXml(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter)">
            <summary>
            Writes to XML.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexExistingTest.IsGenerated">
            <summary>
            Gets a value indicating whether this test was generated (as opposed to hand-written).
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexExistingTest.IsCustomInput">
            <summary>
            Gets a value indicating whether this test was a custom input to Pex
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexExistingTest.IsHosted">
            <summary>
            Gets a value indicating if the test is hosted
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexExistingTest.Method">
            <summary>
            Gets the method.
            </summary>
            <value>The method.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexExistingTest.RemoteMethod">
            <summary>
            Gets the remote method.
            </summary>
            <value>The remote method.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexExistingTest.ExceptionType">
            <summary>
            Gets the type of the exception.
            </summary>
            <value>The type of the exception.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexExistingTest.IsFailure">
            <summary>
            Gets a value indicating whether this instance is failure.
            </summary>
            <value>
            	<c>true</c> if this instance is failure; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexExistingTest.IsTouched">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Microsoft.Pex.Engine.PexExistingTest"/> is touched.
            </summary>
            <value><c>true</c> if touched; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexExistingTest.IsRegenerated">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Microsoft.Pex.Engine.PexExistingTest"/> is touched.
            </summary>
            <value><c>true</c> if touched; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexExistingTest.IsMined">
            <summary>
            Gets or sets a value indicating whether 
            this test was mined to build a model.
            </summary>
            <value><c>true</c> if mined; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexExistingTest.Duplicate">
            <summary>
            Gets or sets the duplicate. When a test does not increase coverage, Duplicate may point to itself!
            </summary>
            <value>The duplicate.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexExistingTest.ExplorationMethod">
            <summary>
            Gets the exploration (non-serialized)
            </summary>
            <value>The generator.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexExistingTest.Generator">
            <summary>
            Gets the generator.
            </summary>
            <value>The generator.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.PexWikiTopics">
            <summary>
            Wiki Topics repository
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Comprehensions.Producer`1">
            <summary>
            A delegate that produces a value.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.Comprehensions.PexComprehension">
            <summary>
            Static helper class to compute comprehensions by exploration
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Comprehensions.PexComprehension.Summarize``1(System.String,Microsoft.Pex.Framework.Comprehensions.Producer{``0})">
            <summary>
            Summarize the behavior of a pure computation given by a value producer
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">name of computation</param>
            <param name="producer">value producer</param>
            <returns>summarized result</returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.Comprehensions.PexComprehension.Internal">
            <summary>
            Internal class
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Comprehensions.PexComprehension.Internal.Initialize(Microsoft.Pex.Engine.ComponentModel.IPexPathComponent)">
            <summary>
            Internal method.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Comprehensions.PexComprehension.Internal.Cleanup">
            <summary>
            Internal method.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Coverage.PexCoverageDomain">
            <summary>
            Code coverage domain
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Coverage.PexCoverageDomain.UserCodeUnderTest">
            <summary>
            Included in reports and statistics
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Coverage.PexCoverageDomain.UserOrTestCode">
            <summary>
            Include in the reports but excluded from statistics
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Coverage.PexCoverageDomain.SystemCode">
            <summary>
            Totally ignored
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Coverage.PexCoverageFilterAssemblyAttribute">
            <summary>
            Attributes that define an assembly to include/exclude/ignore in the
            coverage reports
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Coverage.PexCoverageFilterAssemblyAttribute.#ctor(Microsoft.Pex.Framework.Coverage.PexCoverageDomain,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Coverage.PexCoverageFilterAssemblyAttribute"/> class.
            </summary>
            <param name="coverageDomain">The coverage domain.</param>
            <param name="typeOfAssembly">The type from the assembly to exclude.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Coverage.PexCoverageFilterAssemblyAttribute.#ctor(Microsoft.Pex.Framework.Coverage.PexCoverageDomain,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Coverage.PexCoverageFilterAssemblyAttribute"/> class.
            </summary>
            <param name="coverageDomain">The coverage domain.</param>
            <param name="assemblyName">Name of the assembly.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Coverage.PexCoverageFilterAssemblyAttribute.CreateFilter(Microsoft.Pex.Engine.ComponentModel.IPexDecoratedComponentElement)">
            <summary>
            Creates the filter
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.Coverage.PexCoverageFilterAssemblyAttribute.TargetAssemblyName">
            <summary>
            Gets the name of the target assembly.
            </summary>
            <value>The name of the target assembly.</value>
        </member>
        <member name="M:Microsoft.Pex.Framework.Coverage.PexCoverageFilterAssemblyAttribute.CoverageFilter.IsIgnored(Microsoft.ExtendedReflection.Metadata.ModuleEx)">
            <summary>
            Gets a value indicating wheter the assembly is ignored.
            </summary>
            <param name="module">The module.</param>
            <returns>
            	<c>true</c> if the specified module is ignored; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Coverage.PexCoverageFilterAssemblyAttribute.CoverageFilter.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.Coverage.PexCoverageFilterMarkedByAttribute">
            <summary>
            Attributes that define a custom attribute that marks types to 
            include/exclude/ignore in the
            coverage reports
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Coverage.PexCoverageFilterMarkedByAttribute.#ctor(Microsoft.Pex.Framework.Coverage.PexCoverageDomain,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Coverage.PexCoverageFilterMarkedByAttribute"/> class.
            </summary>
            <param name="coverageDomain">The coverage domain.</param>
            <param name="attributeType">Type of the attribute.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Coverage.PexCoverageFilterMarkedByAttribute.CreateFilter(Microsoft.Pex.Engine.ComponentModel.IPexDecoratedComponentElement)">
            <summary>
            Creates the filter
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.Coverage.PexCoverageFilterMarkedByAttribute.AttributeType">
            <summary>
            Gets the type of the attribute.
            </summary>
            <value>The type of the attribute.</value>
        </member>
        <member name="M:Microsoft.Pex.Framework.Coverage.PexCoverageFilterMarkedByAttribute.CoverageFilter.ToString">
            <summary>
            Gets a string representation of the attribute
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.Coverage.PexCoverageFilterMethodAttribute">
            <summary>
            Attributes that define a method name to include/exclude/ignore in the
            coverage reports
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Coverage.PexCoverageFilterMethodAttribute.#ctor(Microsoft.Pex.Framework.Coverage.PexCoverageDomain,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Coverage.PexCoverageFilterMethodAttribute"/> class.
            </summary>
            <param name="coverageDomain">The coverage domain.</param>
            <param name="methodName">Name of the method.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Coverage.PexCoverageFilterMethodAttribute.CreateFilter(Microsoft.Pex.Engine.ComponentModel.IPexDecoratedComponentElement)">
            <summary>
            Creates the filter
            </summary>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Coverage.PexCoverageFilterMethodAttribute.CoverageFilter.IsSelected(Microsoft.ExtendedReflection.Metadata.MethodDefinition)">
            <summary>
            Determines whether the specified method is selected.
            </summary>
            <param name="method">The method.</param>
            <returns>
            	<c>true</c> if the specified method is selected; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Coverage.PexCoverageFilterMethodAttribute.CoverageFilter.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.Coverage.PexCoverageFilterNamespaceAttribute">
            <summary>
            Attributes that define an assembly to include/exclude/ignore in the
            coverage reports
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Coverage.PexCoverageFilterNamespaceAttribute.#ctor(Microsoft.Pex.Framework.Coverage.PexCoverageDomain,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Coverage.PexCoverageFilterNamespaceAttribute"/> class.
            </summary>
            <param name="coverageDomain">The coverage domain.</param>
            <param name="namespaceSuffix">The namespace suffix.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Coverage.PexCoverageFilterNamespaceAttribute.CreateFilter(Microsoft.Pex.Engine.ComponentModel.IPexDecoratedComponentElement)">
            <summary>
            Creates the filter
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.Coverage.PexCoverageFilterNamespaceAttribute.NamespaceSuffix">
            <summary>
            Gets the namespace suffix
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Coverage.PexCoverageFilterNamespaceAttribute.CoverageFilter.ToString">
            <summary>
            Gets a string representation of the attribute
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.Coverage.PexCoverageFilterTypeAttribute">
            <summary>
            Attributes that define a <see cref="T:System.Type"/> to include/exclude/ignore in the
            coverage reports
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Coverage.PexCoverageFilterTypeAttribute.#ctor(Microsoft.Pex.Framework.Coverage.PexCoverageDomain,System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Coverage.PexCoverageFilterTypeAttribute"/> class.
            </summary>
            <param name="coverageDomain">The coverage domain.</param>
            <param name="targetTypes">The target types.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Coverage.PexCoverageFilterTypeAttribute.#ctor(Microsoft.Pex.Framework.Coverage.PexCoverageDomain,Microsoft.ExtendedReflection.Metadata.TypeDefinition[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Coverage.PexCoverageFilterTypeAttribute"/> class.
            </summary>
            <param name="coverageDomain">The coverage domain.</param>
            <param name="targetTypes">The target types.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Coverage.PexCoverageFilterTypeAttribute.CreateFilter(Microsoft.Pex.Engine.ComponentModel.IPexDecoratedComponentElement)">
            <summary>
            Creates the filter
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Coverage.PexCoverageFilterTypeAttribute.CoverageFilter.ToString">
            <summary>
            Gets a string representation of the attribute
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.Creatable.PexCreatableAsSingletonAttribute">
            <summary>
            Attribute indicating that only one instance exists which is named by a 
            public field, property getter, or getter method.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.PexCreatableAsSingletonAttribute.#ctor(System.Type,System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Creatable.PexCreatableAsSingletonAttribute"/> class.
            </summary>
            <param name="singletonType">Type of the singleton.</param>
            <param name="fieldOrPropertyOrGetter">The field or property or getter.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.PexCreatableAsSingletonAttribute.#ctor(System.Type,System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Creatable.PexCreatableAsSingletonAttribute"/> class.
            </summary>
            <param name="singletonType">Type of the singleton.</param>
            <param name="fieldOrPropertyOrGetterType">Type of the field or property or getter.</param>
            <param name="fieldOrPropertyOrGetterName">Name of the field or property or getter.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.PexCreatableAsSingletonAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Creatable.PexCreatableAsSingletonAttribute"/> class.
            </summary>
            <param name="singletonType">Type of the singleton.</param>
            <param name="fieldOrPropertyOrGetterName">Name of the field or property or getter.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.PexCreatableAsSingletonAttribute.#ctor(System.Type,System.String,System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Creatable.PexCreatableAsSingletonAttribute"/> class.
            </summary>
            <param name="singletonTypeAssembly">The singleton type assembly.</param>
            <param name="singletonTypeFullName">Full name of the singleton type.</param>
            <param name="fieldOrPropertyOrGetterType">Type of the field or property or getter.</param>
            <param name="fieldOrPropertyOrGetterName">Name of the field or property or getter.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.PexCreatableAsSingletonAttribute.TryInstantiate(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,Microsoft.ExtendedReflection.Metadata.TypeEx[],Microsoft.Pex.Engine.Creatable.IPexCreatable@)">
            <summary>
            Tries to instantiate this definition with the specified arguments.
            </summary>
            <param name="host">The host.</param>
            <param name="genericTypeArguments">The type arguments.</param>
            <param name="creatable">The creatable.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.PexCreatableAsSingletonAttribute.Validate(Microsoft.Pex.Engine.Logging.IPexLog,Microsoft.ExtendedReflection.Metadata.ICustomAttributeProviderEx,Microsoft.ExtendedReflection.Metadata.VisibilityContext)">
            <summary>
            Validates the attribute in a particular visibility context.
            </summary>
            <param name="log">The log.</param>
            <param name="target">The target.</param>
            <param name="visibilityContextOfGeneratedTests">The visibility context of generated tests.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.Creatable.PexCreatableAsXmlAttribute">
            <summary>
            Attribute that tells Pex that a type represents
            a data and was generated by wsdl.exe.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Creatable.PexCreatableByConstructorAndSettersAttribute">
            <summary>
            Attribute to define that an instances of a type can be created
            by calling one of its constructors, and then 
            using property setters and setter methods to set field values, 
            matching up fields and property/method names using a regular expression.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Creatable.PexCreatableByMethodAndSettersAttribute">
            <summary>
            Attribute to define how instances of a particular type can be created
            by using property setters and setter methods to set field values, 
            matching up fields and property/method names using a regular expression.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Creatable.PexCreatableByMethodAndSettersAttributeBase">
            <summary>
            Attribute to define how instances of a particular type can be created
            by using property setters and setter methods to set field values
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.PexCreatableByMethodAndSettersAttributeBase.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Creatable.PexCreatableByMethodAndSettersAttributeBase"/> class.
            </summary>
            <param name="creatableType">Type of the creatable.</param>
        </member>
        <member name="P:Microsoft.Pex.Framework.Creatable.PexCreatableByMethodAndSettersAttributeBase.MaySetRemainingFieldsByReflection">
            <summary>
            Whether fields which are not handled explicitly by this attribute may be set by reflection. 
            Use with care.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.PexCreatableByMethodAndSettersAttribute.#ctor(System.Type,System.String,System.Boolean,System.Type,System.String,System.String[])">
            <summary>
            Creates an instance of this type.
            </summary>
            <param name="creatableType">Type of the creatable.</param>
            <param name="nameFormat">The format string to build further non-public field names. For example, <code>{0}Field</code></param>
            <param name="ignoreCase">if set to <c>true</c> case is ignored both in the regular expression matching as well as in the property lookup.</param>
            <param name="creationMethodDeclaringType">Type which contains a creation method. May be <code>null</code> for a value type.</param>
            <param name="creationMethodName">Name of the creation method. May be <code>null</code> for the constructor.</param>
            <param name="creationMethodArgumentFieldNames">List of field names which are set by the creation method which takes their values as arguments.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.PexCreatableByMethodAndSettersAttribute.#ctor(System.Type,System.String,System.String,System.Boolean,System.Type,System.String,System.String[])">
            <summary>
            Creates an instance of this type.
            </summary>
            <param name="creatableTypeAssembly">The creatable type assembly.</param>
            <param name="creatableTypeFullName">Full name of the creatable type.</param>
            <param name="nameFormat">The format string to build further non-public field names. For example, <code>{0}Field</code></param>
            <param name="ignoreCase">if set to <c>true</c> case is ignored both in the regular expression matching as well as in the property lookup.</param>
            <param name="creationMethodDeclaringType">Type which contains a creation method. May be <code>null</code> for a value type.</param>
            <param name="creationMethodName">Name of the creation method. May be <code>null</code> for the constructor.</param>
            <param name="creationMethodArgumentFieldNames">List of field names which are set by the creation method which takes their values as arguments.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.PexCreatableByMethodAndSettersAttribute.TryInstantiate(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,Microsoft.ExtendedReflection.Metadata.TypeEx[],Microsoft.Pex.Engine.Creatable.IPexCreatable@)">
            <summary>
            Tries to instantiate this definition with the specified arguments.
            </summary>
            <param name="host">The host.</param>
            <param name="genericTypeArguments">The type arguments.</param>
            <param name="creatable">The creatable.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.PexCreatableByMethodAndSettersAttribute.Validate(Microsoft.Pex.Engine.Logging.IPexLog,Microsoft.ExtendedReflection.Metadata.ICustomAttributeProviderEx,Microsoft.ExtendedReflection.Metadata.VisibilityContext)">
            <summary>
            Validates the attribute in a particular visibility context.
            </summary>
            <param name="log">The log.</param>
            <param name="target">The target.</param>
            <param name="visibilityContextOfGeneratedTests">The visibility context of generated tests.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.Creatable.PexCreatableByMethodAndSettersAttribute.CreatableByMethodAndSetters">
            <summary>
            Creatable
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.PexCreatableByMethodAndSettersAttribute.CreatableByMethodAndSetters.#ctor(Microsoft.Pex.Framework.Creatable.PexCreatableByMethodAndSettersAttribute,Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,Microsoft.ExtendedReflection.Metadata.TypeEx[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Creatable.PexCreatableByMethodAndSettersAttribute.CreatableByMethodAndSetters"/> class.
            </summary>
            <param name="attribute">The attribute.</param>
            <param name="host">The host.</param>
            <param name="genericTypeArguments">The generic type arguments.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.PexCreatableByMethodAndSettersAttribute.CreatableByMethodAndSetters.GetFactoryArgumentTypeForField(System.Reflection.FieldInfo)">
            <summary>
            Gets the factory method argument type for a field.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.PexCreatableByMethodAndSettersAttribute.CreatableByMethodAndSetters.TryGetFactory(System.Reflection.MethodBase@,Microsoft.ExtendedReflection.Metadata.Field@,Microsoft.ExtendedReflection.Metadata.Field[]@,Microsoft.ExtendedReflection.Metadata.Field[]@)">
            <summary>
            Tries to get the factory method.
            </summary>
            <param name="factory">The factory.</param>
            <param name="factoryReceiver">The factory receiver.</param>
            <param name="factoryArguments">The factory arguments.</param>
            <param name="remainingFields">The remaining fields.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.PexCreatableByMethodAndSettersAttribute.CreatableByMethodAndSetters.TryGetBackingSetter(Microsoft.ExtendedReflection.Metadata.Field,System.Reflection.MethodInfo@)">
            <summary>
            Tries to get a backing setter.
            </summary>
            <param name="field">The field.</param>
            <param name="setter">The setter.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.PexCreatableByConstructorAndSettersAttribute.#ctor(System.Type)">
            <summary>
            Defines a creatable containing automatic properties only (C# 3.0 backing fields)
            </summary>
            <param name="creatableType">Type of the creatable.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.PexCreatableByConstructorAndSettersAttribute.#ctor(System.Type,System.String,System.Boolean,System.String[])">
            <summary>
            Creates an instance of this type.
            </summary>
            <param name="creatableType">Type of the creatable.</param>
            <param name="nameFormat">The format string to build further non-public field names. For example, <code>{0}Field</code></param>
            <param name="ignoreCase">if set to <c>true</c> case is ignored both in the regular expression matching as well as in the property lookup.</param>
            <param name="constructorArguments">List of field names which are set by the constructor which takes their values as arguments.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.PexCreatableAsXmlAttribute.#ctor(System.Type)">
            <summary>
            Creates an instance of this type.
            </summary>
            <param name="creatableType">Data type.</param>
        </member>
        <member name="T:Microsoft.Pex.Framework.Creatable.IPexClassFactory`1">
            <summary>
            Interfaces that defines factory for classes
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.IPexClassFactory`1.Create">
            <summary>
            Creates this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.Creatable.PexFieldBindingAttribute">
            <summary>
            Attribute to specify a place holder for a binding
            field value.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.PexFieldBindingAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Creatable.PexFieldBindingAttribute"/> class.
            </summary>
            <param name="fieldName">Name of the field.</param>
        </member>
        <member name="P:Microsoft.Pex.Framework.Creatable.PexFieldBindingAttribute.FieldName">
            <summary>
            Gets the name of the field to be bound.
            </summary>
            <value>The name of the field.</value>
        </member>
        <member name="T:Microsoft.Pex.Framework.Creatable.PexCreatableByClassFactoryAttribute">
            <summary>
            Attribute indicating that a class can be created by a class factory
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.PexCreatableByClassFactoryAttribute.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Creatable.PexCreatableByClassFactoryAttribute"/> class.
            </summary>
            <param name="creatableType">Type of the creatable.</param>
            <param name="factoryType">Type of the factory.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.PexCreatableByClassFactoryAttribute.TryInstantiate(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,Microsoft.ExtendedReflection.Metadata.TypeEx[],Microsoft.Pex.Engine.Creatable.IPexCreatable@)">
            <summary>
            Tries to instantiate this definition with the specified arguments.
            </summary>
            <param name="host">The host.</param>
            <param name="genericTypeArguments">The type arguments.</param>
            <param name="creatable">The creatable.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.PexCreatableByClassFactoryAttribute.Validate(Microsoft.Pex.Engine.Logging.IPexLog,Microsoft.ExtendedReflection.Metadata.ICustomAttributeProviderEx,Microsoft.ExtendedReflection.Metadata.VisibilityContext)">
            <summary>
            Validates the attribute in a particular visibility context.
            </summary>
            <param name="log">The log.</param>
            <param name="target">The target.</param>
            <param name="visibilityContextOfGeneratedTests">The visibility context of generated tests.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.Creatable.PexCreatableByClassFactoryAttribute.FactoryType">
            <summary>
            Gets the type of the binding.
            </summary>
            <value>The type of the binding.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Creatable.PexCreatableByClassFactoryAttribute.CreatableType">
            <summary>
            Gets the creatable type.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Pex.Framework.Creatable.PexCreatableByConstructorAttribute">
            <summary>
            Attribute to define that an instance of a type can be created by calling
            its constructor.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Creatable.PexCreatableByMethodAttribute">
            <summary>
            Attribute to define that an instances of a type
            can be created by calling a creation method.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.PexCreatableByMethodAttribute.#ctor(System.Type,System.Type,System.String,System.String[])">
            <summary>
            Creates an instance of this type.
            </summary>
            <param name="creatableType">Type of the creatable.</param>
            <param name="creationMethodDeclaringType">Type which contains a creation method. May be <code>null</code> for a value type.</param>
            <param name="creationMethodName">Name of the creation method. May be <code>null</code> for the constructor.</param>
            <param name="creationMethodArgumentFieldNames">List of field names which are set by the creation method which takes their values as arguments.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.PexCreatableByMethodAttribute.#ctor(System.Type,System.String,System.Type,System.String,System.String[])">
            <summary>
            Creates an instance of this type.
            </summary>
            <param name="creatableTypeAssembly">The creatable type assembly.</param>
            <param name="creatableTypeFullName">Full name of the creatable type.</param>
            <param name="creationMethodDeclaringType">Type which contains a creation method. May be <code>null</code> for a value type.</param>
            <param name="creationMethodName">Name of the creation method. May be <code>null</code> for the constructor.</param>
            <param name="creationMethodArgumentFieldNames">List of field names which are set by the creation method which takes their values as arguments.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.PexCreatableByConstructorAttribute.#ctor(System.Type,System.String[])">
            <summary>
            Creates an instance of this type.
            </summary>
            <param name="creatableType">Type of the creatable.</param>
            <param name="constructorArguments">List of field names which are set by the constructor which takes their values as arguments.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.PexCreatableByConstructorAttribute.Validate(Microsoft.Pex.Engine.Logging.IPexLog,Microsoft.ExtendedReflection.Metadata.ICustomAttributeProviderEx,Microsoft.ExtendedReflection.Metadata.VisibilityContext)">
            <summary>
            Validates the attribute in a particular visibility context.
            </summary>
            <param name="log">The log.</param>
            <param name="target">The target.</param>
            <param name="visibilityContextOfGeneratedTests">The visibility context of generated tests.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.Creatable.PexCreatableSetAttributeBase">
            <summary>
            Attribute to define a factory of <see cref="T:Microsoft.Pex.Engine.Creatable.IPexCreatable"/>
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.PexCreatableSetAttributeBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Creatable.PexCreatableFactoryAttributeBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.PexCreatableSetAttributeBase.GetCachedCreatables(Microsoft.ExtendedReflection.Collections.SafeList{Microsoft.Pex.Engine.Creatable.IPexCreatableDefinition})">
            <summary>
            Gets the cached creatables.
            </summary>
            <param name="list">The list.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.PexCreatableSetAttributeBase.Validate(Microsoft.Pex.Engine.Logging.IPexLog,Microsoft.ExtendedReflection.Metadata.ICustomAttributeProviderEx,Microsoft.ExtendedReflection.Metadata.VisibilityContext)">
            <summary>
            Validates the attribute in a particular visibility context.
            </summary>
            <param name="log">The log.</param>
            <param name="target">The target.</param>
            <param name="visibilityContextOfGeneratedTests">The visibility context of generated tests.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.PexCreatableSetAttributeBase.BeforeExploration(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent)">
            <summary>
            Callback that is executed before the exploration starts.
            </summary>
            <param name="host">The host.</param>
            <returns>some data</returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.Creatable.PexCreatablesAsXmlFromAssemblyAttribute">
            <summary>
            Attribute that populates the creatable table for 
            any webdata object.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.PexCreatablesAsXmlFromAssemblyAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Creatable.PexCreatablesAsXmlFromAssemblyAttribute"/> class.
            </summary>
            <param name="typeOfAssembly">The type of assembly.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.PexCreatablesAsXmlFromAssemblyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Creatable.PexCreatablesAsXmlFromAssemblyAttribute"/> class.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.PexCreatablesAsXmlFromAssemblyAttribute.GetCachedCreatables(Microsoft.ExtendedReflection.Collections.SafeList{Microsoft.Pex.Engine.Creatable.IPexCreatableDefinition})">
            <summary>
            Gets the cached creatables.
            </summary>
            <param name="list">The list.</param>
        </member>
        <member name="P:Microsoft.Pex.Framework.Creatable.PexCreatablesAsXmlFromAssemblyAttribute.XmlNamespace">
            <summary>
            Gets or sets the XML namespace of the web data objects.
            </summary>
            <value>The XML namespace.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Creatable.PexCreatablesAsXmlFromAssemblyAttribute.Namespace">
            <summary>
            Gets or sets the namespace.
            </summary>
            <value>The namespace.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Creatable.PexCreatablesAsXmlFromAssemblyAttribute.GeneratedCode">
            <summary>
            Gets or sets a value indicating whether the code was automatically generated
            (and tagged with [GeneratedCodeAttribute])
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Framework.Creatable.PexCreatablesAsXmlFromAssemblyAttribute.Tool">
            <summary>
            Gets or sets the tool that generated the classes (xsd, System.Xml, etc...)
            </summary>
            <value>The tool.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Creatable.PexCreatablesAsXmlFromAssemblyAttribute.Attributed">
            <summary>
            Gets or sets a value indicating whether types should 
            be tagged with <see cref="T:System.Xml.Serialization.XmlTypeAttribute"/> or <see cref="T:System.Xml.Serialization.XmlRootAttribute"/>
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Domains.PexDomainTarget">
            <summary>
            Gets the target of a domain.
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Domains.PexDomainTarget.Unknown">
            <summary>
            Unknown target
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Domains.PexDomainTarget.Field">
            <summary>
            Field 
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Domains.PexDomainTarget.ArrayElement">
            <summary>
            Array element
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Domains.PexDomainTarget.MdArrayLowerBound">
            <summary>
            Multi-dimensional array lower bound
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Domains.PexDomainTarget.MdArrayLength">
            <summary>
            Multi-dimensional array length
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Domains.PexDomainTarget.SzArrayLength">
            <summary>
            Zero-dimensional array length
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Domains.PexDomainTarget.StringLength">
            <summary>
            String length
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Domains.PexDomainTarget.Parameter">
            <summary>
            Parameter
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Domains.PexDomainTarget.OracleChoice">
            <summary>
            Oracle choice
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Domains.PexDomainTarget.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">
            <summary>
            Exception representing a failed test case.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException.#ctor">
            <summary>
            Creates an instance of this class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException.#ctor(System.String)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">
            <summary>
            Internal exception representing a violated assumption.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException.#ctor">
            <summary>
            Creates an instance of this class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException.#ctor(System.String)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Microsoft.Pex.Framework.Exceptions.PexAssumptionFailedExceptionAttribute">
            <summary>
            Registers a custom exception type as an assumption exception
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Exceptions.PexAssumptionFailedExceptionAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumptionFailedExceptionAttribute"/> class.
            </summary>
            <param name="exceptionType">Type of the exception.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Exceptions.PexAssumptionFailedExceptionAttribute.BeforeExploration(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent)">
            <summary>
            Callback that is executed before the exploration starts.
            </summary>
            <param name="host">The host.</param>
            <returns>some data</returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.Exceptions.PexAssumptionFailedExceptionAttribute.ExceptionType">
            <summary>
            Gets the type of the exception.
            </summary>
            <value>The type of the exception.</value>
        </member>
        <member name="T:Microsoft.Pex.Framework.Exceptions.PexRetryException">
            <summary>
            Retry exception; thrown when new invariants were found, and new test inputs must be computed before the path is re-executed
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Exceptions.PexRetryException.Fail(System.Object,System.String,System.Exception)">
            <summary>
            Lets Pex retry the current test case
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Exceptions.PexRetryException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Exceptions.PexRetryException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Exceptions.PexRetryException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Exceptions.PexRetryException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Exceptions.PexRetryException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Exceptions.PexRetryException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Exceptions.PexRetryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Exceptions.PexRetryException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="P:Microsoft.Pex.Framework.Exceptions.PexRetryException.RetryId">
            <summary>
            Identifier of the point of retry.
            May be used to detect if we get stuck in a loop. (Each retryid may only be used once in each path.)
            </summary>
            <value>The retry id.</value>
        </member>
        <member name="T:Microsoft.Pex.Framework.Exceptions.PexUnverifiableUnsafeMemoryAccessException">
            <summary>
            Pex unverifiable unsafe memory access exception
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Exceptions.PexUnverifiableUnsafeMemoryAccessException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Exceptions.PexUnverifiableUnsafeMemoryAccessException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Exceptions.PexUnverifiableUnsafeMemoryAccessException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Exceptions.PexUnverifiableUnsafeMemoryAccessException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Exceptions.PexUnverifiableUnsafeMemoryAccessException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Exceptions.PexUnverifiableUnsafeMemoryAccessException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Exceptions.PexUnverifiableUnsafeMemoryAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Exceptions.PexUnverifiableUnsafeMemoryAccessException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Microsoft.Pex.Framework.Exceptions.TraceAssertionException">
            <summary>
            Exception thrown by the Trace methods
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Exceptions.TraceAssertionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Exceptions.TraceAssertionException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Exceptions.TraceAssertionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Exceptions.TraceAssertionException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Exceptions.TraceAssertionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Exceptions.TraceAssertionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Exceptions.TraceAssertionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Exceptions.TraceAssertionException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Microsoft.Pex.Framework.Explorable.PexCrossProductExplorableStrategyAttribute">
            <summary>
            Generates a sequence of test from a systematic cross-product
            of api calls. This is the default strategy.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Explorable.PexExplorableStrategyAttributeBase">
            <summary>
            Abstract base class for attributes implementing the 
            <see cref="T:Microsoft.Pex.Engine.Explorable.IPexExplorableStrategy"/>
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexExplorableStrategyAttributeBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Explorable.PexExplorableStrategyAttributeBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexExplorableStrategyAttributeBase.BeforeExploration(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent)">
            <summary>
            Callback that is executed before the exploration starts.
            </summary>
            <param name="host">The host.</param>
            <returns>some data</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexExplorableStrategyAttributeBase.CanCreateSession(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Determines whether this instance can create a session of the specified type.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexExplorableStrategyAttributeBase.CreateSession(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Creates a new session.
            </summary>
            <param name="host">The host.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexCrossProductExplorableStrategyAttribute.#ctor">
            <summary>
            Creates a product explorable strategy that applies to all types.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexCrossProductExplorableStrategyAttribute.#ctor(System.Type[])">
            <summary>
            Creates a product explorable strategy that applies to a set of (possibly generic) types.
            </summary>
            <param name="types">The types.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexCrossProductExplorableStrategyAttribute.#ctor(System.Type,System.String[])">
            <summary>
            Creates a product explorable strategy that applies to a set of (possibly generic) types.
            </summary>
            <param name="typeOfAssembly">The type of assembly.</param>
            <param name="fullyQualifiedTypeNames">The fully qualified type names.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexCrossProductExplorableStrategyAttribute.CanCreateSession(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Determines whether this instance can create a session of the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexCrossProductExplorableStrategyAttribute.CreateSession(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Creates a new session.
            </summary>
            <param name="host">The host.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.Explorable.PexCrossProductExplorableStrategyAttribute.MaxLength">
            <summary>
            Gets or sets the maximum sequence length.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Explorable.PexEffectiveExplorableMutatorsAttribute">
            <summary>
            Attribute to define that information about previously learned effects should be used to mutate objects
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexEffectiveExplorableMutatorsAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Explorable.PexEffectiveExplorableMutatorsAttribute"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexEffectiveExplorableMutatorsAttribute.GetMutatorProvider(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Gets the explorable mutators.
            </summary>
            <param name="host">The host.</param>
            <param name="explorableType">Type of the explorable.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexEffectiveExplorableMutatorsAttribute.BeforeExploration(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent)">
            <summary>
            Callback that is executed before the exploration starts.
            </summary>
            <param name="host">The host.</param>
            <returns>some data</returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.Explorable.PexExplorableFromConstructorAttribute">
            <summary>
            Attribute to define how instances of a particular type can be created
            by using property setters and setter methods to set field values
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexExplorableFromConstructorAttribute.#ctor(System.Type,System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Explorable.PexExplorableFromConstructorAttribute"/> class.
            </summary>
            <param name="explorableType">Type which can be constructed by exploring one of its constructors.</param>
            <param name="constructorParameterTypes">The constructor parameter types.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexExplorableFromConstructorAttribute.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexExplorableFromConstructorAttribute.TryCreateExplorable(Microsoft.Pex.Engine.ComponentModel.IPexComponent,Microsoft.Pex.Engine.Explorable.IPexExplorable@)">
            <summary>
            Creates the explorable instance
            </summary>
            <param name="host">The host.</param>
            <param name="explorable">The explorable.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.Explorable.PexExplorableFromFactoriesFromTypeAttribute">
            <summary>
            Attribute that scans an assembly for
            methods marked by <see cref="T:Microsoft.Pex.Framework.PexFactoryMethodAttribute"/> 
            located in a static types.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Explorable.PexExplorableFromFactoriesAttributeBase">
            <summary>
            Attribute that scans an assembly for
            methods marked by <see cref="T:Microsoft.Pex.Framework.PexFactoryMethodAttribute"/> 
            located in static types.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexExplorableFromFactoriesAttributeBase.#ctor">
            <summary>
            Initializes a new instance
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexExplorableFromFactoriesAttributeBase.BeforeExploration(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent)">
            <summary>
            Callback that is executed before the exploration starts.
            </summary>
            <param name="host">The host.</param>
            <returns>some data</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexExplorableFromFactoriesAttributeBase.TryCreateExplorableFactory(Microsoft.Pex.Engine.ComponentModel.IPexComponent,Microsoft.ExtendedReflection.Metadata.VisibilityContext,Microsoft.ExtendedReflection.Metadata.TypeDefinition,Microsoft.ExtendedReflection.Metadata.MethodDefinition,Microsoft.Pex.Framework.PexFactoryMethodAttribute,Microsoft.Pex.Engine.Explorable.PexExplorableFromMethod@)">
            <summary>
            Tries to create an explorable factory method
            </summary>
            <param name="host"></param>
            <param name="visibility"></param>
            <param name="typeDefinition"></param>
            <param name="methodDefinition"></param>
            <param name="attribute"></param>
            <param name="explorable"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexExplorableFromFactoriesAttributeBase.TryValidateType(Microsoft.Pex.Engine.ComponentModel.IPexComponent,Microsoft.ExtendedReflection.Metadata.VisibilityContext,Microsoft.ExtendedReflection.Metadata.TypeDefinition)">
            <summary>
            Tries to validate the factory type.
            </summary>
            <param name="host"></param>
            <param name="visibility"></param>
            <param name="typeDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexExplorableFromFactoriesAttributeBase.GetUncachedExplorables(Microsoft.Pex.Engine.ComponentModel.IPexComponent,Microsoft.ExtendedReflection.Collections.SafeList{Microsoft.Pex.Engine.Explorable.IPexExplorable})">
            <summary>
            Gets the list of explorable methods
            </summary>
            <param name="host"></param>
            <param name="explorables"></param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexExplorableFromFactoriesAttributeBase.GetUncachedExplorableMethods(Microsoft.Pex.Engine.ComponentModel.IPexComponent,Microsoft.ExtendedReflection.Collections.SafeList{Microsoft.Pex.Engine.Explorable.IPexExplorable},Microsoft.ExtendedReflection.Metadata.VisibilityContext,Microsoft.ExtendedReflection.Metadata.TypeDefinition)">
            <summary>
            Gets the list of explorable methods from a type
            </summary>
            <param name="host"></param>
            <param name="explorables"></param>
            <param name="visibility"></param>
            <param name="typeDefinition"></param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexExplorableFromFactoriesFromTypeAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Explorable.PexExplorableFromFactoriesFromTypeAttribute"/> class.
            </summary>
            <param name="type">The type containing the factories.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexExplorableFromFactoriesFromTypeAttribute.GetUncachedExplorables(Microsoft.Pex.Engine.ComponentModel.IPexComponent,Microsoft.ExtendedReflection.Collections.SafeList{Microsoft.Pex.Engine.Explorable.IPexExplorable})">
            <summary>
            Gets the list of explorable methods
            </summary>
            <param name="host"></param>
            <param name="explorables"></param>
        </member>
        <member name="T:Microsoft.Pex.Framework.Explorable.PexExplorableMutatorAttribute">
            <summary>
            Attribute to define how instances of a particular type can be mutated by exploring a (parameterized) instance method
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexExplorableMutatorAttribute.#ctor(System.Type,System.Reflection.MethodBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Explorable.PexExplorableAttributeBase"/> class.
            </summary>
            <param name="explorableType">Explorable type which contains instance method</param>
            <param name="instanceMethod">The instance method.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexExplorableMutatorAttribute.#ctor(System.Type,System.String,System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Explorable.PexExplorableMutatorAttribute"/> class.
            </summary>
            <param name="explorableType">Explorable type which contains instance method</param>
            <param name="methodName">Name of the mutator method.</param>
            <param name="parameterTypes">The parameter types; or null for any types.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexExplorableMutatorAttribute.#ctor(System.Type,System.String,System.String,System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Explorable.PexExplorableMutatorAttribute"/> class.
            </summary>
            <param name="typeOfExplorableTypeAssembly">The type of explorable type assembly.</param>
            <param name="explorableTypeFullName">Full name of the explorable type.</param>
            <param name="methodName">Name of the mutator method.</param>
            <param name="parameterTypes">The parameter types; or null for any types.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexExplorableMutatorAttribute.ValidateInstanceMethod(Microsoft.Pex.Engine.Logging.IPexLog,Microsoft.ExtendedReflection.Metadata.ICustomAttributeProviderEx,Microsoft.ExtendedReflection.Metadata.VisibilityContext)">
            <summary>
            Validates the instance method.
            </summary>
            <param name="log">The log.</param>
            <param name="target">The target.</param>
            <param name="visibilityContextOfGeneratedTests">The visibility context of generated tests.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexExplorableMutatorAttribute.Validate(Microsoft.Pex.Engine.Logging.IPexLog,Microsoft.ExtendedReflection.Metadata.ICustomAttributeProviderEx,Microsoft.ExtendedReflection.Metadata.VisibilityContext)">
            <summary>
            Validates the attribute in a particular visibility context.
            </summary>
            <param name="log">The log.</param>
            <param name="target">The target.</param>
            <param name="visibilityContextOfGeneratedTests">The visibility context of generated tests.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexExplorableMutatorAttribute.GetMutatorProvider(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Gets the explorable mutators.
            </summary>
            <param name="host">The host.</param>
            <param name="explorableType">Type of the explorable.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexExplorableMutatorAttribute.GetExplorableMutators(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Gets the explorable mutators.
            </summary>
            <param name="targetMethod">The target method.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexExplorableMutatorAttribute.BeforeExploration(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent)">
            <summary>
            Callback that is executed before the exploration starts.
            </summary>
            <param name="host">The host.</param>
            <returns>some data</returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.Explorable.PexExplorableMutatorAttribute.ExplorableType">
            <summary>
            Gets the type to be created by exploration.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Framework.Explorable.PexExplorableMutatorAttribute.InstanceMethod">
            <summary>
            Gets the method which mutates an instance of the desired type.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Explorable.PexRandomExplorableStrategyAttribute">
            <summary>
            Generates random sequences of mutators within bounds.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexRandomExplorableStrategyAttribute.#ctor">
            <summary>
            Creates a random explorable strategy that applies to all types.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexRandomExplorableStrategyAttribute.#ctor(System.Type[])">
            <summary>
            Creates a random explorable strategy that applies to a set of (possibly generic) types.
            </summary>
            <param name="types">The types.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexRandomExplorableStrategyAttribute.#ctor(System.Type,System.String[])">
            <summary>
            Creates a random explorable strategy that applies to a set of (possibly generic) types.
            </summary>
            <param name="typeOfAssembly">The type of assembly.</param>
            <param name="fullyQualifiedTypeNames">The fully qualified type names.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexRandomExplorableStrategyAttribute.CanCreateSession(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Determines whether this instance can create a session of the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexRandomExplorableStrategyAttribute.CreateSession(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Creates a new session.
            </summary>
            <param name="host">The host.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.Explorable.PexRandomExplorableStrategyAttribute.MaxLength">
            <summary>
            Gets or sets the maximum sequence length.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Framework.Explorable.PexRandomExplorableStrategyAttribute.Count">
            <summary>
            Gets or sets the maximum sequence length.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.FixIt.FixItSuggestionPattern">
            <summary>
            Patterns supports by the fixit emitter
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.FixIt.FixItSuggestionPattern.IsTrue">
            <summary>
            Should translate to Debug.Assert(condition);
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.FixIt.FixItSuggestionPattern.IsNotNull">
            <summary>
            Should translate to Debug.AssertNotNull(value);
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Focus.PexFocusOnAssemblyAttribute">
            <summary>
            Includes an <see cref="T:System.Reflection.Assembly"/> in the coverage
            reports
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Focus.PexFocusOnAttributeBase">
            <summary>
            Abstract base <see cref="T:System.Attribute"/> class where Pex should 
            focus its search
            </summary>
            <seealso cref="T:Microsoft.Pex.Engine.Focus.IPexFocus"/>
        </member>
        <member name="M:Microsoft.Pex.Framework.Focus.PexFocusOnAttributeBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Focus.PexFocusOnAttributeBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Focus.PexFocusOnAttributeBase.#ctor(Microsoft.Pex.Framework.Focus.PexSearchPriority)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Focus.PexFocusOnAttributeBase"/> class.
            </summary>
            <param name="searchPriority">The search priority.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Focus.PexFocusOnAttributeBase.GetUncachedIncludedAssemblies(Microsoft.Pex.Engine.Logging.IPexLog)">
            <summary>
            Gets the uncached included assemblies.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Focus.PexFocusOnAttributeBase.TryGetFocusedAssemblies(Microsoft.Pex.Engine.Logging.IPexLog,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.AssemblyEx}@)">
            <summary>
            Tries to get the focused assemblies.
            </summary>
            <param name="log">The log.</param>
            <param name="assemblies">The assemblies.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Focus.PexFocusOnAttributeBase.GetUncachedIncludedTypes(Microsoft.Pex.Engine.Logging.IPexLog)">
            <summary>
            Gets the uncached included types.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Focus.PexFocusOnAttributeBase.TryGetFocusedTypes(Microsoft.Pex.Engine.Logging.IPexLog,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.TypeDefinition}@)">
            <summary>
            Gets the included types.
            </summary>
            <value>The included types.</value>
        </member>
        <member name="M:Microsoft.Pex.Framework.Focus.PexFocusOnAttributeBase.GetUncachedIncludedMethods(Microsoft.Pex.Engine.Logging.IPexLog)">
            <summary>
            Gets the uncached included methods.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Focus.PexFocusOnAttributeBase.TryGetFocusedMethods(Microsoft.Pex.Engine.Logging.IPexLog,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.MethodDefinition}@)">
            <summary>
            Tries to get the focused methods.
            </summary>
            <param name="log">The log.</param>
            <param name="methods">The methods.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Focus.PexFocusOnAttributeBase.Decorate(Microsoft.ExtendedReflection.Metadata.Names.Name,Microsoft.Pex.Engine.ComponentModel.IPexDecoratedComponentElement)">
            <summary>
            Decorates component with custom decorators
            </summary>
            <param name="location">The location of the decorator.</param>
            <param name="host">The host.</param>
        </member>
        <member name="P:Microsoft.Pex.Framework.Focus.PexFocusOnAttributeBase.SearchPriority">
            <summary>
            Gets or sets the priority
            </summary>
            <value>The priority.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Focus.PexFocusOnAttributeBase.DoNotReportCoverage">
            <summary>
            Gets a value indicating whether it should not report coverage.
            </summary>
            <value><c>true</c> do not report coverage; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Microsoft.Pex.Framework.Focus.PexFocusOnAssemblyAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Focus.PexFocusOnAssemblyAttribute"/> class.
            </summary>
            <param name="typeOfAssembly">The type of assembly.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Focus.PexFocusOnAssemblyAttribute.#ctor(System.Type,Microsoft.Pex.Framework.Focus.PexSearchPriority)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Focus.PexFocusOnAssemblyAttribute"/> class.
            </summary>
            <param name="typeOfAssembly">The type of assembly.</param>
            <param name="searchPriority">The search priority.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Focus.PexFocusOnAssemblyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Focus.PexFocusOnAssemblyAttribute"/> class.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Focus.PexFocusOnAssemblyAttribute.#ctor(System.String,Microsoft.Pex.Framework.Focus.PexSearchPriority)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Focus.PexFocusOnAssemblyAttribute"/> class.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="searchPriority">The search priority.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Focus.PexFocusOnAssemblyAttribute.GetUncachedIncludedAssemblies(Microsoft.Pex.Engine.Logging.IPexLog)">
            <summary>
            Gets the uncached included assemblies.
            </summary>
            <param name="log"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Focus.PexFocusOnAssemblyAttribute.GetUncachedIncludedTypes(Microsoft.Pex.Engine.Logging.IPexLog)">
            <summary>
            Gets the uncached included types.
            </summary>
            <param name="log"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Focus.PexFocusOnAssemblyAttribute.GetUncachedIncludedMethods(Microsoft.Pex.Engine.Logging.IPexLog)">
            <summary>
            Gets the uncached included methods.
            </summary>
            <param name="log"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.Focus.PexFocusOnAssemblyAttribute.Optional">
            <summary>
            Gets or sets a value indicating whether the types or 
            assemblies by this attribute might not be present
            on the system
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Framework.Focus.PexFocusOnAssemblyAttribute.TargetAssemblyName">
            <summary>
            Gets the name of the target assembly.
            </summary>
            <value>The name of the target assembly.</value>
        </member>
        <member name="T:Microsoft.Pex.Framework.Focus.PexFocusOnNamespaceAttribute">
            <summary>
            Includes types from a namespace
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Focus.PexFocusOnNamespaceAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Focus.PexFocusOnNamespaceAttribute"/> class.
            </summary>
            <param name="typeOfAssembly">The type of assembly.</param>
            <param name="namespacePrefix">The namespace prefix.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Focus.PexFocusOnNamespaceAttribute.GetUncachedIncludedTypes(Microsoft.Pex.Engine.Logging.IPexLog)">
            <summary>
            Gets the uncached included types.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.Focus.PexFocusOnNamespaceAttribute.NamespacePrefix">
            <summary>
            Gets the namespace prefix.
            </summary>
            <value>The namespace prefix.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Focus.PexFocusOnNamespaceAttribute.Strict">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Microsoft.Pex.Framework.Focus.PexFocusOnNamespaceAttribute"/> is strict.
            </summary>
            <value><c>true</c> if strict; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Microsoft.Pex.Framework.Focus.PexFocusOnTypeAttribute">
            <summary>
            Attribute to focus on a type
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Focus.PexFocusOnTypeAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Focus.PexFocusOnTypeAttribute"/> class.
            </summary>
            <param name="targetType">Type of the target.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Focus.PexFocusOnTypeAttribute.#ctor(Microsoft.ExtendedReflection.Metadata.TypeDefinition)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Focus.PexFocusOnTypeAttribute"/> class.
            </summary>
            <param name="targetTypeDefinition">The target type definition.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Focus.PexFocusOnTypeAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Focus.PexFocusOnTypeAttribute"/> class.
            </summary>
            <param name="typeOfAssembly">The type of assembly.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Focus.PexFocusOnTypeAttribute.AddTypeAndNestedType(Microsoft.ExtendedReflection.Collections.SafeSet{Microsoft.ExtendedReflection.Metadata.TypeDefinition},Microsoft.ExtendedReflection.Metadata.TypeDefinition)">
            <summary>
            Recursively adds type, 
            </summary>
            <param name="types"></param>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Focus.PexFocusOnTypeAttribute.GetUncachedIncludedTypes(Microsoft.Pex.Engine.Logging.IPexLog)">
            <summary>
            Gets the uncached included types.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Focus.PexFocusOnTypeAttribute.GetUncachedIncludedAssemblies(Microsoft.Pex.Engine.Logging.IPexLog)">
            <summary>
            Gets the uncached included assemblies.
            </summary>
            <param name="log"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Focus.PexFocusOnTypeAttribute.GetUncachedIncludedMethods(Microsoft.Pex.Engine.Logging.IPexLog)">
            <summary>
            Gets the uncached included methods.
            </summary>
            <param name="log"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.Focus.PexFocusOnTypeAttribute.TargetTypeDefinition">
            <summary>
            Gets the type of the target.
            </summary>
            <value>The type of the target.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Focus.PexFocusOnTypeAttribute.NoNestedTypes">
            <summary>
            Gets or sets a value indicating whether nested types 
            should be instrumented as well
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Focus.PexSearchPriority">
            <summary>
            Used by <see cref="T:Microsoft.Pex.Engine.Focus.IPexFocus"/>, specifies the priority
            of the target in the test search algorithm
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Focus.PexSearchPriority.Default">
            <summary>
            The default priority
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Focus.PexSearchPriority.Lowest">
            <summary>
            The lowest priority
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Focus.PexSearchPriority.Low">
            <summary>
            A low priority
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Focus.PexSearchPriority.Medium">
            <summary>
            The normal medium priority
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Focus.PexSearchPriority.High">
            <summary>
            A high priority
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Focus.PexSearchPriority.Highest">
            <summary>
            The highest priority
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Generated.IPexValueInjectionChoiceSessionBuilder">
            <summary>
            This interface is used to define the behavior of mock objects
            at the beginning of a test.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.IPexValueInjectionChoiceSessionBuilder.Injects(System.Boolean)">
            <summary>
            Sets whether the method should inject a value
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.Generated.PexGeneratedByAttribute">
            <summary>
            Attribute that describes the parameterized test that generated
            the method.
            </summary>
            <remarks>
            This attribute is not intended to be used by customer. Pex will 
            use this attribute to mark generated tests.
            </remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.PexGeneratedByAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Generated.PexGeneratedByAttribute"/> class.
            </summary>
            <param name="fixtureType">Type of the fixture.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.PexGeneratedByAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Generated.PexGeneratedByAttribute"/> class
            and assumes that it is defined in the fixture type.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.PexGeneratedByAttribute.TryGetFixtureType(Microsoft.ExtendedReflection.Metadata.TypeEx@)">
            <summary>
            Tries to get the type of the fixture if specified
            </summary>
            <value>The type of the fixture.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Generated.PexGeneratedByAttribute.IsCustomInput">
            <summary>
            Gets or sets a value that indicates whether Pex generated this test from user inputs
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Generated.PexInjectedExceptionAttribute">
            <summary>
            Attribute that specifies which exception was injected
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.PexInjectedExceptionAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Generated.PexInjectedExceptionAttribute"/> class.
            </summary>
            <param name="exceptionType">Type of the exception.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="P:Microsoft.Pex.Framework.Generated.PexInjectedExceptionAttribute.ExceptionType">
            <summary>
            Gets the type of the exception.
            </summary>
            <value>The type of the exception.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Generated.PexInjectedExceptionAttribute.Reason">
            <summary>
            Gets the reason.
            </summary>
            <value>The reason.</value>
        </member>
        <member name="T:Microsoft.Pex.Framework.Generated.PexPConsoleInContext">
            <summary>
            Swaps the Console.In <see cref="T:System.IO.TextReader"/> with 
            a Pex parameterized mock implementation (<see cref="T:Microsoft.Pex.Models.PTextReader"/>).
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.PexPConsoleInContext.Create">
            <summary>
            Creates a new instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.PexPConsoleInContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Generated.PexNotCompilableAttribute">
            <summary>
            Marks a generated test that might not be compilable
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Generated.PexNotReproducibleAttribute">
            <summary>
            An attribute that specifies that a test might not be reproducible
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Instrumentation.PexInstrumentAssemblyAttribute">
            <summary>
            Attribute to specify an <see cref="T:System.Reflection.Assembly"/> to providing a
            <see cref="T:System.Type"/> from this Assembly.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Instrumentation.PexInstrumentAssemblyAttributeBase">
            <summary>
            Abstract base class for attribute that specify assemblies to
            instrument
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Instrumentation.PexInstrumentAssemblyAttributeBase.GetTargetAssemblies(Microsoft.ExtendedReflection.ComponentModel.IComponent)">
            <summary>
            Gets a list of <see cref="T:System.Reflection.AssemblyName"/> to instrument
            </summary>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Instrumentation.PexInstrumentAssemblyAttributeBase.CreateInstrumentationProvider">
            <summary>
            Creates the instrumentation provider
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.Instrumentation.PexInstrumentAssemblyAttributeBase.InstrumentationLevel">
            <summary>
            Gets or sets the instrumentation level. The 'protected' level
            is not supported at the assembly level
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Instrumentation.PexInstrumentAssemblyAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Instrumentation.PexInstrumentAssemblyAttribute"/> class.
            </summary>
            <param name="typeOfAssembly">The type of assembly.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Instrumentation.PexInstrumentAssemblyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Instrumentation.PexInstrumentAssemblyAttribute"/> class.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Instrumentation.PexInstrumentAssemblyAttribute.GetTargetAssemblies(Microsoft.ExtendedReflection.ComponentModel.IComponent)">
            <summary>
            Gets a list of <see cref="T:System.Reflection.AssemblyName"/> to instrument
            </summary>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.Instrumentation.PexInstrumentAssemblyAttribute.TargetAssemblyName">
            <summary>
            Gets the name of the target assembly.
            </summary>
            <value>The name of the target assembly.</value>
        </member>
        <member name="T:Microsoft.Pex.Framework.Instrumentation.PexInstrumentationLevel">
            <summary>
            An enumeration describing different level of code instrumentation. The impact of the instrumentation
            grows with the value of the enum.
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Instrumentation.PexInstrumentationLevel.Excluded">
            <summary>
            Excluded from the instrumentation list
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Instrumentation.PexInstrumentationLevel.Protected">
            <summary>
            Protected instrumentation. Supported for classes or value types only.
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Instrumentation.PexInstrumentationLevel.Instrument">
            <summary>
            Default instrumentation for Pex exploration
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Instrumentation.PexInstrumentMarkedByAttribute">
            <summary>
            Instruments types from a given assembly that are marked with 
            a particular attribute
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Instrumentation.PexInstrumentTypeAttributeBase">
            <summary>
            Base class for instrumentation attributes
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Instrumentation.PexInstrumentTypeAttributeBase.AddTypeAndNestedType(Microsoft.ExtendedReflection.Collections.SafeSet{Microsoft.ExtendedReflection.Metadata.TypeDefinition},Microsoft.ExtendedReflection.Metadata.TypeDefinition)">
            <summary>
            Recursively adds type, 
            </summary>
            <param name="types"></param>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Instrumentation.PexInstrumentTypeAttributeBase.GetTargetTypes(Microsoft.ExtendedReflection.ComponentModel.IComponent)">
            <summary>
            Gets the list of <see cref="T:System.Type"/> to instrument
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Instrumentation.PexInstrumentTypeAttributeBase.CacheTargetTypes(Microsoft.ExtendedReflection.ComponentModel.IComponent)">
            <summary>
            Caches the target types.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Instrumentation.PexInstrumentTypeAttributeBase.CacheTargetTypes(Microsoft.ExtendedReflection.ComponentModel.IComponent,Microsoft.ExtendedReflection.Collections.SafeSet{Microsoft.ExtendedReflection.Metadata.TypeDefinition})">
            <summary>
            Caches the target types.
            </summary>
            <param name="host"></param>
            <param name="types">The types.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Instrumentation.PexInstrumentTypeAttributeBase.CreateInstrumentationProvider">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.Instrumentation.PexInstrumentTypeAttributeBase.InstrumentationLevel">
            <summary>
            Gets or sets the instrumentation level.
            </summary>
            <value>The instrumentation level.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Instrumentation.PexInstrumentTypeAttributeBase.NoNestedTypes">
            <summary>
            Gets or sets a value indicating whether nested types 
            should be instrumented as well
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Instrumentation.PexInstrumentMarkedByAttribute.#ctor(Microsoft.ExtendedReflection.Metadata.AssemblyEx,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Instrumentation.PexInstrumentMarkedByAttribute"/> class.
            </summary>
            <param name="targetAssembly">The target assembly.</param>
            <param name="attributeType">Type of the attribute.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Instrumentation.PexInstrumentMarkedByAttribute.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Instrumentation.PexInstrumentMarkedByAttribute"/> class.
            </summary>
            <param name="typeOfAssembly">The type of assembly.</param>
            <param name="attributeType">Type of the attribute.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Instrumentation.PexInstrumentMarkedByAttribute.CacheTargetTypes(Microsoft.ExtendedReflection.ComponentModel.IComponent,Microsoft.ExtendedReflection.Collections.SafeSet{Microsoft.ExtendedReflection.Metadata.TypeDefinition})">
            <summary>
            Gets the list of <see cref="T:System.Type"/> to instrument
            </summary>
            <param name="host"></param>
            <param name="types">The types.</param>
        </member>
        <member name="P:Microsoft.Pex.Framework.Instrumentation.PexInstrumentMarkedByAttribute.TargetAssembly">
            <summary>
            Gets the target assembly.
            </summary>
            <value>The target assembly.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Instrumentation.PexInstrumentMarkedByAttribute.AttributeType">
            <summary>
            Gets the type of the attribute.
            </summary>
            <value>The type of the attribute.</value>
        </member>
        <member name="T:Microsoft.Pex.Framework.Instrumentation.PexInstrumentNamespaceAttribute">
            <summary>
            Instruments all types in or under the specified namespace
            in the target assembly
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Instrumentation.PexInstrumentNamespaceAttributeBase">
            <summary>
            Abstract base class for assembly instrumentation options
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Instrumentation.PexInstrumentNamespaceAttributeBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Instrumentation.PexInstrumentNamespaceAttributeBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Instrumentation.PexInstrumentNamespaceAttributeBase.CreateInstrumentationProvider">
            <summary>
            Instantiates the instrumentation provider
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Instrumentation.PexInstrumentNamespaceAttributeBase.CacheTargetNamespaces(Microsoft.ExtendedReflection.Collections.SafeSet{System.String})">
            <summary>
            Queries the namespaces
            </summary>
            <param name="namepaces"></param>
        </member>
        <member name="P:Microsoft.Pex.Framework.Instrumentation.PexInstrumentNamespaceAttributeBase.InstrumentationLevel">
            <summary>
            Gets or sets the instrumentation level. The 'protected' level
            is not supported at the assembly level
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Instrumentation.PexInstrumentNamespaceAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Instrumentation.PexInstrumentNamespaceAttribute"/> class.
            </summary>
            <param name="typeOfNamespace">a type from the target namespace.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Instrumentation.PexInstrumentNamespaceAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Instrumentation.PexInstrumentNamespaceAttribute"/> class.
            </summary>
            <param name="typeOfAssembly">The type of assembly.</param>
            <param name="_namespace">The _namespace.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Instrumentation.PexInstrumentNamespaceAttribute.CacheTargetNamespaces(Microsoft.ExtendedReflection.Collections.SafeSet{System.String})">
            <summary>
            Queries the namespaces
            </summary>
            <param name="namepaces"></param>
        </member>
        <member name="P:Microsoft.Pex.Framework.Instrumentation.PexInstrumentNamespaceAttribute.TargetAssembly">
            <summary>
            Gets the target <see cref="T:System.Reflection.Assembly"/>
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Framework.Instrumentation.PexInstrumentNamespaceAttribute.Namespace">
            <summary>
            Gets the target namespace
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Instrumentation.PexInstrumentTypeAttribute">
            <summary>
            Instrument a given type; name of type may be given for non-exported types.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Instrumentation.PexInstrumentTypeAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Instrumentation.PexInstrumentTypeAttribute"/> class.
            </summary>
            <param name="targetType">Type of the target.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Instrumentation.PexInstrumentTypeAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Instrumentation.PexInstrumentTypeAttribute"/> class.
            </summary>
            <param name="typeOfAssembly">The type of assembly.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Instrumentation.PexInstrumentTypeAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Instrumentation.PexInstrumentTypeAttribute"/> class.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Instrumentation.PexInstrumentTypeAttribute.CacheTargetTypes(Microsoft.ExtendedReflection.ComponentModel.IComponent,Microsoft.ExtendedReflection.Collections.SafeSet{Microsoft.ExtendedReflection.Metadata.TypeDefinition})">
            <summary>
            Gets the list of <see cref="T:System.Type"/> to instrument
            </summary>
            <param name="host"></param>
            <param name="types">The types.</param>
        </member>
        <member name="P:Microsoft.Pex.Framework.Instrumentation.PexInstrumentTypeAttribute.TargetType">
            <summary>
            Gets the type of the target.
            </summary>
            <value>The type of the target.</value>
        </member>
        <member name="T:Microsoft.Pex.Framework.Instrumentation.PexInstrumentTypesByNameAttribute">
            <summary>
            Specifies a list of type names to instrument.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Instrumentation.PexInstrumentTypesByNameAttribute.#ctor(System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Instrumentation.PexInstrumentTypesByNameAttribute"/> class.
            </summary>
            <param name="types">The types.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Instrumentation.PexInstrumentTypesByNameAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Instrumentation.PexInstrumentTypesByNameAttribute"/> class.
            </summary>
            <param name="types">The types.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Instrumentation.PexInstrumentTypesByNameAttribute.CacheTargetTypes(Microsoft.ExtendedReflection.ComponentModel.IComponent)">
            <summary>
            Caches the target types.
            </summary>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Instrumentation.PexInstrumentTypesByNameAttribute.CacheTargetTypes(Microsoft.ExtendedReflection.ComponentModel.IComponent,Microsoft.ExtendedReflection.Collections.SafeSet{Microsoft.ExtendedReflection.Metadata.TypeDefinition})">
            <summary>
            Should never be called.
            </summary>
            <param name="host"></param>
            <param name="types">The types.</param>
        </member>
        <member name="T:Microsoft.Pex.Engine.Symbols.__LimitationsHelper">
            <summary>
            Internal class used by Pex
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Symbols.__LimitationsHelper.FloatingPointMultiplication">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Symbols.__LimitationsHelper.FloatingPointDivision">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Symbols.__LimitationsHelper.FloatingPointModulus">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Symbols.__LimitationsHelper.FloatingPointConversion">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Symbols.__LimitationsHelper.DecimalOperation">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Instrumentation.PexSubstitutionAssemblyAttribute">
            <summary>
            Attribute that specifies an assembly that contains
            additional substitutions
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Instrumentation.PexSubstitutionAssemblyAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Instrumentation.PexSubstitutionAssemblyAttribute"/> class.
            </summary>
            <param name="typeOfAssembly">The type of assembly.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Instrumentation.PexSubstitutionAssemblyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Instrumentation.PexSubstitutionAssemblyAttribute"/> class.
            </summary>
            <param name="assemblyLocation">The assembly location.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Instrumentation.PexSubstitutionAssemblyAttribute.CreateInstrumentationProvider">
            <summary>
            Creates the instrumentation settings
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.Instrumentation.PexSubstitutionAssemblyAttribute.AssemblyLocation">
            <summary>
            Gets the file name of the assembly containing the additional substitutions
            </summary>
            <value>The name of the assembly.</value>
        </member>
        <member name="T:Microsoft.Pex.Framework.Languages.PexLanguageAttributeBase">
            <summary>
            Abstract base class for registering custom languages
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Languages.PexLanguageAttributeBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Languages.PexLanguageAttributeBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Languages.PexLanguageAttributeBase.CreateLanguage(Microsoft.ExtendedReflection.Emit.ILanguageOptions)">
            <summary>
            Creates a new language instance
            </summary>
            <param name="options">The options.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Languages.PexLanguageAttributeBase.Initialize(Microsoft.ExtendedReflection.ComponentModel.IEngine)">
            <summary>
            this method provides the opportunity to query services and interact with them.
            </summary>
            <param name="engine">The engine.</param>
        </member>
        <member name="P:Microsoft.Pex.Framework.Languages.PexLanguageAttributeBase.SetAsDefault">
            <summary>
            Gets or sets a value indicating wheter this test framework
            should be set as the default
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Monitoring.PexMonitor">
            <summary>
            Static helper class that allows to execute code uninstrumented and unmonitored
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Monitoring.PexMonitor.ExecuteProtected(Microsoft.Pex.Framework.PexAction)">
            <summary>
            Executes code uninstrumented
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="T:Microsoft.Pex.Framework.Choices.IPexComprehensionChoiceSession">
            <summary>
            This interface is used to support comprehensions
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Choices.IPexMethodCallChoiceSession">
            <summary>
            This interface can be queried by a mock object to decide on the behavior
            of a method call.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Choices.IPexChoiceSession">
            <summary>
            This interface is used during a session with the <see cref="T:Microsoft.Pex.Framework.PexChoose"/>.
            Each test case may involve several sessions. 
            Seperate sessions help Pex to differentiate between different choices.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Choices.IPexChoiceSession.ChooseValue``1(System.String)">
            <summary>
            Returns a value compatible with the type parameter.
            </summary>
            <param name="description">The description of the choice.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Choices.IPexChoiceSession.ChooseEnumValue``1(System.String)">
            <summary>
            Returns a value compatible with the Enum definition
            </summary>
            <typeparam name="T">must be an enum type</typeparam>
            <param name="description">The description.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Choices.IPexChoiceSession.ChooseValueNotNull``1(System.String)">
            <summary>
            Returns a value compatible with the type parameter.
            </summary>
            <param name="description">The description of the choice.</param>
            <returns></returns>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.Pex.Framework.Choices.IPexChoiceSession.ChooseIndexValue``1(System.String,``0[])">
            <summary>
            Returns a integer in the array indexable length
            </summary>
            <typeparam name="T"></typeparam>
            <param name="description">The description.</param>
            <param name="array">The array.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Choices.IPexChoiceSession.ChooseValue``1(System.String,System.Boolean,System.Boolean,System.Type[])">
            <summary>
            Returns a value compatible with the type parameter.
            </summary>
            <param name="description">The description of the choice.</param>
            <param name="nonNull">Whether the returned reference must not be null.</param>
            <param name="allowSubtypes">Whether subtypes of the types may be considered</param>
            <param name="types">A list of types assignable to the type parameter</param>
            <returns></returns>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.Pex.Framework.Choices.IPexChoiceSession.ChooseValueFrom``1(System.String,``0[])">
            <summary>
            Returns a value of a set of possible values.
            </summary>
            <param name="description">The description of the choice.</param>
            <param name="values">The values to choose from.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Choices.IPexChoiceSession.ChooseValueFromRange(System.String,System.Int32,System.Int32)">
            <summary>
            Returns a value within a range.
            </summary>
            <param name="description">The description of the choice.</param>
            <param name="minInclusive">The minimum value (inclusive).</param>
            <param name="maxExclusive">The maximum value (exclusive.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Choices.IPexMethodCallChoiceSession.ChooseValueAtReturn``1(System.Int32)">
            <summary>
            Chooses the value of an out-parameter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Choices.IPexMethodCallChoiceSession.ChooseResult``1">
            <summary>
            Chooses the result value.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Choices.IPexMethodCallChoiceSession.ChooseResultNotNull``1">
            <summary>
            Chooses the result value, assuming it is not null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Choices.IPexMethodCallChoiceSession.ChooseHResult">
            <summary>
            Returns a choice of valid HRESULT value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Choices.IPexMethodCallChoiceSession.ChooseThrowException">
            <summary>
            Chooses whether the method should throw an exception.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Choices.IPexMethodCallChoiceSession.ChooseException">
            <summary>
            Returns an exception (not null)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Choices.IPexMethodCallChoiceSession.ChooseException(System.Boolean,System.Type[])">
            <summary>
            Returns an exception that has one of the specified types
            </summary>
            <param name="allowSubtypes">if set to <c>true</c> [allow subtypes].</param>
            <param name="exceptionTypes">The exception types.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Choices.IPexMethodCallChoiceSession.ChooseExceptionFromTypes(System.Type[])">
            <summary>
            Returns an exception that has one of the specified types
            </summary>
            <param name="exceptionTypes">The exception types.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Choices.IPexMethodCallChoiceSession.ChooseExceptionFromSubTypes(System.Type[])">
            <summary>
            Returns an exception that has one of the specified types
            </summary>
            <param name="exceptionTypes">The exception types.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Choices.IPexComprehensionChoiceSession.BoundVariableValue``1">
            <summary>
            Chooses the value of the bound variable
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.Choices.IPexComprehensionChoiceSession.IsComprehensionDone">
            <summary>
            Choose whether the comprehension body should no longer be explored
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.Choices.IPexValueInjectionChoiceSession">
            <summary>
            This interface is used to provide injected values
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Choices.IPexValueInjectionChoiceSession.ChooseInject">
            <summary>
            Choose whether an injection should be performed at the current 
            execution point
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.Choices.IPexValueInjectionChoiceSession.OriginalValue">
            <summary>
            Gets or sets the original value.
            </summary>
            <value>The original value.</value>
        </member>
        <member name="T:Microsoft.Pex.Framework.Packages.PexPackageAssemblyAttribute">
            <summary>
            An attribute that specifies an assembly containing additional packages
            </summary>    
        </member>
        <member name="M:Microsoft.Pex.Framework.Packages.PexPackageAssemblyAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Packages.PexPackageAssemblyAttribute"/> class.
            </summary>
            <param name="typeOfAssembly">The type of assembly.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Packages.PexPackageAssemblyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Packages.PexPackageAssemblyAttribute"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Packages.PexPackageAssemblyAttribute.GetService(System.Type)">
            <summary>
            Gets the service if available
            </summary>
            <param name="serviceType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Packages.PexPackageAssemblyAttribute.CreateInstrumentationProvider">
            <summary>
            Creates the instrumentation provider
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.Packages.PexPackageTypeAttribute">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Packages.PexPackageTypeAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Packages.PexPackageTypeAttribute"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Packages.PexPackageTypeAttribute.GetPackageTypes">
            <summary>
            Gets the package types.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.Pointers.PexPointerSpace">
            <summary>
            Helper class to properly initialize raw memory to run tests that take pointers.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Pointers.PexPointerSpace.Initialize(System.UIntPtr,System.UIntPtr)">
            <summary>
            Initializes the pointer space at the specified base address with the specified size.
            </summary>
            <param name="baseAddress">The base address.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Pointers.PexPointerSpace.Initialize(Microsoft.ExtendedReflection.Utilities.VirtualMemory)">
            <summary>
            Initializes the pointer space with a given virtual memory instance.
            </summary>
            <param name="newVirtualMemory">The new virtual memory.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Pointers.PexPointerSpace.IsValid(System.Void*,System.UInt32)">
            <summary>
            Determines whether the specified pointer is valid.
            </summary>
            <param name="pointer">The pointer.</param>
            <param name="size">The size.</param>
            <returns>
            	<c>true</c> if the specified pointer is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Pointers.PexPointerSpace.IsValid(System.Void*,System.UInt64)">
            <summary>
            Determines whether the specified pointer is valid.
            </summary>
            <param name="pointer">The pointer.</param>
            <param name="size">The size.</param>
            <returns>
            	<c>true</c> if the specified pointer is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Pointers.PexPointerSpace.Clear">
            <summary>
            Clears the values in the memory region
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Pointers.PexPointerSpace.Validate">
            <summary>
            Validates the content of the pointer space.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Framework.Pointers.PexPointerSpace.BaseAddress">
            <summary>
            Gets the length of the pointer space
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Pointers.PexPointerSpace.Length">
            <summary>
            Gets the length of the pointer space
            </summary>
            <value>The length.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.Reflection.IPexReflectorManager">
            <summary>
            A manager for reflector instance
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Reflection.IPexReflectorManager.AddReflectorFactory(Microsoft.Pex.Engine.Reflection.IPexReflectorFactory)">
            <summary>
            Adds the reflector factory.
            </summary>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Reflection.IPexReflectorManager.CreateDefaultReflector">
            <summary>
            Creates the default reflector
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Reflection.IPexReflectorManager.TryCreateReflector(System.String,Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework,Microsoft.Pex.Engine.Reflection.IPexReflector@)">
            <summary>
            Tries to create a reflector instance with the specified filters
            </summary>
            <param name="name">The name.</param>
            <param name="testFramework">The test framework.</param>
            <param name="reflector">The reflector.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.Reflection.IPexReflectorManager.ReflectorFactories">
            <summary>
            Gets the reflector factories.
            </summary>
            <value>The reflector factories.</value>
        </member>
        <member name="T:Microsoft.Pex.Framework.Pointers.PexUnsafeMemory">
            <summary>
            Static helper class to deal with unsafe memory
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Pointers.PexUnsafeMemory.TypedMalloc(System.Type)">
            <summary>
            Typed malloc.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Pointers.PexUnsafeMemory.TypedFree(System.Type,System.Void*)">
            <summary>
            Typed free.
            </summary>
            <param name="type">The type.</param>
            <param name="pointer">The pointer.</param>
        </member>
        <member name="T:Microsoft.Pex.Framework.Security.PexFullTrustAssemblyAttribute">
            <summary>
            Attribute used to specify an full trust assembly
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Security.PexFullTrustAssemblyAttributeBase">
            <summary>
            Abstract base attribute for full trust assembly implementations
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Security.PexFullTrustAssemblyAttributeBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Security.PexFullTrustAssemblyAttributeBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Security.PexFullTrustAssemblyAttributeBase.GetTargetAssemblies(Microsoft.ExtendedReflection.ComponentModel.IComponent)">
            <summary>
            Gets the assembly names that be considered full trust
            </summary>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Security.PexFullTrustAssemblyAttributeBase.CreateInstrumentationProvider">
            <summary>
            Returns the instrumentation provider
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Security.PexFullTrustAssemblyAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Security.PexFullTrustAssemblyAttribute"/> class.
            </summary>
            <param name="typeOfAssembly">type of the assembly.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Security.PexFullTrustAssemblyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Security.PexFullTrustAssemblyAttribute"/> class.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Security.PexFullTrustAssemblyAttribute.GetTargetAssemblies(Microsoft.ExtendedReflection.ComponentModel.IComponent)">
            <summary>
            Gets a list of assembly name to instrument
            </summary>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.Security.PexFullTrustAssemblyAttribute.TargetAssemblyName">
            <summary>
            Gets the name of the target assembly.
            </summary>
            <value>The name of the target assembly.</value>
        </member>
        <member name="T:Microsoft.Pex.Framework.Security.PexSandboxTrust">
            <summary>
            Defines different sandbox security levels
            </summary>
            <remarks>
            This enum should map to <see cref="T:Microsoft.ExtendedReflection.Monitoring.SandboxTrust"/>
            </remarks>
        </member>
        <member name="F:Microsoft.Pex.Framework.Security.PexSandboxTrust.FullTrust">
            <summary>
            Full access to all resources.
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Security.PexSandboxTrust.Test">
            <summary>
            Maximal set of access resources without destroying the machine.
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Security.PexSandboxTrust.LocalIntranet">
            <summary>
            The default policy permission set within an enterprise.
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Security.PexSandboxTrust.Internet">
            <summary>
            The default policy permission set suitable for content from unknown origin.
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Security.PexSandboxTrust.Execution">
            <summary>
            Permission to run (execute), but no permissions to use protected resources.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.SourceControl.PexProcessSourceControlAttributeBase">
            <summary>
            Source control using a command line tool
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.SourceControl.PexSourceControlAttributeBase">
            <summary>
            Abstract base class to register a source control 
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.SourceControl.PexSourceControlAttributeBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.SourceControl.PexSourceControlAttributeBase"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.SourceControl.PexSourceControlAttributeBase.CreateSourceControl(Microsoft.Pex.Engine.ComponentModel.IPexComponent)">
            <summary>
            Creates the source control that will be added to the manager
            </summary>
            <param name="host">The host.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.SourceControl.PexSourceControlAttributeBase.BeforeExecution(Microsoft.Pex.Engine.ComponentModel.IPexComponent)">
            <summary>
            Callback that is executed before the execution  starts.
            </summary>
            <param name="host">The host.</param>
            <returns>some data</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.SourceControl.PexSourceControlAttributeBase.AfterExecution(Microsoft.Pex.Engine.ComponentModel.IPexComponent,System.Object)">
            <summary>
            Callback that is executed after the execution ends.
            </summary>
            <param name="host">The host.</param>
            <param name="data">The data returned by <see cref="M:Microsoft.Pex.Framework.SourceControl.PexSourceControlAttributeBase.BeforeExecution(Microsoft.Pex.Engine.ComponentModel.IPexComponent)"/>.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.SourceControl.PexSourceControlAttributeBase.Load(Microsoft.ExtendedReflection.ComponentModel.IContainer)">
            <summary>
            This method provides the opportunity install or substitute services.
            </summary>
            <param name="engineContainer">The exploration container.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.SourceControl.PexSourceControlAttributeBase.Initialize(Microsoft.ExtendedReflection.ComponentModel.IEngine)">
            <summary>
            this method provides the opportunity to query services and interact with them.
            </summary>
            <param name="engine">The engine.</param>
        </member>
        <member name="P:Microsoft.Pex.Framework.SourceControl.PexSourceControlAttributeBase.Name">
            <summary>
            Gets the name of this package.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:Microsoft.Pex.Framework.SourceControl.PexProcessSourceControlAttributeBase.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.SourceControl.PexProcessSourceControlAttributeBase"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="toolPath">The tool path.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.SourceControl.PexProcessSourceControlAttributeBase.GetAddArguments(System.String)">
            <summary>
            Gets the arguments to add a file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.SourceControl.PexProcessSourceControlAttributeBase.GetCheckOutArguments(System.String)">
            <summary>
            Gets the arguments to check out a file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.SourceControl.PexProcessSourceControlAttributeBase.CreateSourceControl(Microsoft.Pex.Engine.ComponentModel.IPexComponent)">
            <summary>
            Creates the source control that will be added to the manager
            </summary>
            <param name="host">The host.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.SourceControl.PexProcessSourceControlAttributeBase.ToolPath">
            <summary>
            Gets the name of the tool.
            </summary>
            <value>The name of the tool.</value>
        </member>
        <member name="T:Microsoft.Pex.Framework.Strategies.PexArithmeticSolverAttributeBase">
            <summary>
            Base class of custom arithmetic solvers
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Strategies.PexArithmeticSolverAttributeBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Strategies.PexArithmeticSolverAttributeBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Strategies.PexArithmeticSolverAttributeBase.Load(Microsoft.ExtendedReflection.ComponentModel.IContainer)">
            <summary>
            This method provides the opportunity install or substitute services.
            </summary>
            <param name="explorationContainer">The exploration container.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Strategies.PexArithmeticSolverAttributeBase.BeforeExploration(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent)">
            <summary>
            Callback that is executed before the exploration starts.
            </summary>
            <param name="host">The host.</param>
            <returns>some data</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Strategies.PexArithmeticSolverAttributeBase.AfterExploration(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,System.Object)">
            <summary>
            Callback that is executed after the exploration ends.
            </summary>
            <param name="host">The host.</param>
            <param name="data">The data returned by BeforeExploration.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Strategies.PexArithmeticSolverAttributeBase.TryCreateArithmeticSolver(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,Microsoft.ExtendedReflection.Reasoning.ArithmeticSolving.IArithmeticSolver@)">
            <summary>
            Tries to creates an arithmetic solver.
            </summary>
            <param name="host">The host.</param>
            <param name="solver">The solver.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.Strategies.PexSearchFrontierAttributeBase">
            <summary>
            Base class of search frontiers
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Strategies.PexSearchFrontierAttributeBase.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Strategies.PexSearchFrontierAttributeBase"/> class.
            </summary>
            <param name="isRoundRobin">Indicates whether the search strategy should be combined with existing search strategies in a round-robin style; if false, it will be the only strategy.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Strategies.PexSearchFrontierAttributeBase.Initialize(Microsoft.Pex.Engine.ComponentModel.IPexExplorationEngine)">
            <summary>
            Initializes the specified exploration package. May interact with services.
            </summary>
            <param name="host">The host.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Strategies.PexSearchFrontierAttributeBase.Load(Microsoft.ExtendedReflection.ComponentModel.IContainer)">
            <summary>
            This method provides the opportunity install or substitute services.
            </summary>
            <param name="explorationContainer">The exploration container.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Strategies.PexSearchFrontierAttributeBase.BeforeExploration(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent)">
            <summary>
            Callback that is executed before the exploration starts.
            </summary>
            <param name="host">The host.</param>
            <returns>some data</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Strategies.PexSearchFrontierAttributeBase.AfterExploration(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,System.Object)">
            <summary>
            Callback that is executed after the exploration ends.
            </summary>
            <param name="host">The host.</param>
            <param name="data">The data returned by BeforeExploration.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Strategies.PexSearchFrontierAttributeBase.CreateFrontier(Microsoft.Pex.Engine.ComponentModel.IPexExplorationEngine,Microsoft.Pex.Engine.SearchFrontiers.IPexBuiltinSearchFrontiers)">
            <summary>
            Creates the frontier.
            </summary>
            <param name="host">The host.</param>
            <param name="builtinSearchFrontiers">The builtin search frontiers.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.Strategies.PexSearchFrontierIterativeDeepeningAttribute">
            <summary>
            Iterative deepening search frontier
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Strategies.PexSearchFrontierIterativeDeepeningAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Strategies.PexSearchFrontierIterativeDeepeningAttribute"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Strategies.PexSearchFrontierIterativeDeepeningAttribute.CreateFrontier(Microsoft.Pex.Engine.ComponentModel.IPexExplorationEngine,Microsoft.Pex.Engine.SearchFrontiers.IPexBuiltinSearchFrontiers)">
            <summary>
            Creates the frontier.
            </summary>
            <param name="host">The host.</param>
            <param name="builtinSearchFrontiers">The builtin search frontiers.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.Strategies.PexSearchFrontierBreadthFirstAttribute">
            <summary>
            Breadth first search strategy
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Strategies.PexSearchFrontierBreadthFirstAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Strategies.PexSearchFrontierBreadthFirstAttribute"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Strategies.PexSearchFrontierBreadthFirstAttribute.CreateFrontier(Microsoft.Pex.Engine.ComponentModel.IPexExplorationEngine,Microsoft.Pex.Engine.SearchFrontiers.IPexBuiltinSearchFrontiers)">
            <summary>
            Creates the frontier.
            </summary>
            <param name="host">The host.</param>
            <param name="builtinSearchFrontiers">The builtin search frontiers.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.Strategies.PexSearchFrontierRandomAttribute">
            <summary>
            Random search frontier
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Strategies.PexSearchFrontierRandomAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Strategies.PexSearchFrontierRandomAttribute"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Strategies.PexSearchFrontierRandomAttribute.CreateFrontier(Microsoft.Pex.Engine.ComponentModel.IPexExplorationEngine,Microsoft.Pex.Engine.SearchFrontiers.IPexBuiltinSearchFrontiers)">
            <summary>
            Creates the frontier.
            </summary>
            <param name="host">The host.</param>
            <param name="builtinSearchFrontiers">The builtin search frontiers.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.Strategies.PexSearchFrontierDepthFirstAttribute">
            <summary>
            Depth first search strategy
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Strategies.PexSearchFrontierDepthFirstAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Strategies.PexSearchFrontierDepthFirstAttribute"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Strategies.PexSearchFrontierDepthFirstAttribute.CreateFrontier(Microsoft.Pex.Engine.ComponentModel.IPexExplorationEngine,Microsoft.Pex.Engine.SearchFrontiers.IPexBuiltinSearchFrontiers)">
            <summary>
            Creates the frontier.
            </summary>
            <param name="host">The host.</param>
            <param name="builtinSearchFrontiers">The builtin search frontiers.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.Strategies.PexStringStrategyMode">
            <summary>
            Different modes of string handling solver
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Strategies.PexStringStrategyMode.Default">
            <summary>
            Default mode (details unknown)
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Strategies.PexStringStrategyMode.Unfold">
            <summary>
            Unfold and explore all definitions
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Strategies.PexStringStrategyMode.PartialAbstraction">
            <summary>
            Abstract string functions that only move around characters
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Strategies.PexStringStrategyMode.FullAbstraction">
            <summary>
            Abstract most string functions
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Strategies.PexStringStrategyAttribute">
            <summary>
            Attribute to configure Pex' strategy to handle string functions
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Strategies.PexStringStrategyAttribute.BeforeExploration(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent)">
            <summary>
            Callback that is executed before the exploration starts.
            </summary>
            <param name="host">The host.</param>
            <returns>some data</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Strategies.PexStringStrategyAttribute.AfterExploration(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,System.Object)">
            <summary>
            Callback that is executed after the exploration ends.
            </summary>
            <param name="host">The host.</param>
            <param name="data">The data returned by BeforeExploration.</param>
        </member>
        <member name="P:Microsoft.Pex.Framework.Strategies.PexStringStrategyAttribute.Mode">
            <summary>
            Which mode to use to handle string functions
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Suppression.PexSuppressStackFrameFromAssemblyAttribute">
            <summary>
            Suppresses stack frames from an assembly
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Suppression.PexSuppressStackFrameFromAssemblyAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Suppression.PexSuppressStackFrameFromAssemblyAttribute"/> class.
            </summary>
            <param name="typeOfAssembly">The type of assembly.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Suppression.PexSuppressStackFrameFromAssemblyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Suppression.PexSuppressStackFrameFromAssemblyAttribute"/> class.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Suppression.PexSuppressStackFrameFromAssemblyAttribute.CreateFilter">
            <summary>
            Creates the filter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Suppression.PexSuppressStackFrameFromAssemblyAttribute.CreateFilter(Microsoft.Pex.Engine.ComponentModel.IPexComponent)">
            <summary>
            Creates a stack frame filter
            </summary>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.Suppression.PexSuppressStackFrameFromAssemblyAttribute.AssemblyName">
            <summary>
            Gets the name of the assembly.
            </summary>
            <value>The name of the assembly.</value>
        </member>
        <member name="T:Microsoft.Pex.Framework.Suppression.PexSuppressStackFrameFromNamespaceAttribute">
            <summary>
            Suppresses stack frames from a namespace
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Suppression.PexSuppressStackFrameFromNamespaceAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Suppression.PexSuppressStackFrameFromNamespaceAttribute"/> class.
            </summary>
            <param name="namespace">The namespace.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Suppression.PexSuppressStackFrameFromNamespaceAttribute.CreateFilter">
            <summary>
            Creates the filter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Suppression.PexSuppressStackFrameFromNamespaceAttribute.CreateFilter(Microsoft.Pex.Engine.ComponentModel.IPexComponent)">
            <summary>
            Creates a stack frame filter
            </summary>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.Suppression.PexSuppressStackFrameFromNamespaceAttribute.Namespace">
            <summary>
            Gets the namespace.
            </summary>
            <value>The namespace.</value>
        </member>
        <member name="T:Microsoft.Pex.Framework.Suppression.PexSuppressStaticFieldStoreAttribute">
            <summary>
            Abstract base class for uninstrumented call filters
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Suppression.PexSuppressStaticFieldStoreAttribute.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of this type.
            </summary>
            <param name="declaringTypeName"></param>
            <param name="fieldName"></param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Suppression.PexSuppressStaticFieldStoreAttribute.#ctor(System.Type,System.String)">
            <summary>
            Creates an instance of this type.
            </summary>
            <param name="declaringType"></param>
            <param name="fieldName"></param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Suppression.PexSuppressStaticFieldStoreAttribute.BeforeExploration(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent)">
            <summary>
            Callback that is executed before the exploration starts.
            </summary>
            <param name="host">The host.</param>
            <returns>some data</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Suppression.PexSuppressStaticFieldStoreAttribute.Filter.Ignore(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Gets a value indicating whether the static-field-store
            should be ignored.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.TestGeneration.PexTestNamerAttributeBase">
            <summary>
            Abstract base attribute to define and register
            new <see cref="T:Microsoft.Pex.Engine.TestGeneration.IPexTestNamer"/> implementations
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.TestGeneration.PexTestNamerAttributeBase.CreateTestNamer(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent)">
            <summary>
            Creates a new test namer.
            </summary>
            <param name="host">The host.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.TestGeneration.PexTestNamerAttributeBase.BeforeExploration(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent)">
            <summary>
            Callback that is executed before the exploration starts.
            </summary>
            <param name="host">The host.</param>
            <returns>some data</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.TestGeneration.PexTestNamerAttributeBase.Initialize(Microsoft.Pex.Engine.ComponentModel.IPexExplorationEngine)">
            <summary>
            Initializes the specified exploration package. May interact with services.
            </summary>
            <param name="host">The host.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.TestGeneration.PexTestNamerAttributeBase.Load(Microsoft.ExtendedReflection.ComponentModel.IContainer)">
            <summary>
            This method provides the opportunity install or substitute services.
            </summary>
            <param name="explorationContainer">The exploration container.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.TestGeneration.PexTestNamerAttributeBase.AfterExploration(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,System.Object)">
            <summary>
            Callback that is executed after the exploration ends.
            </summary>
            <param name="host">The host.</param>
            <param name="data">The data returned by BeforeExploration.</param>
        </member>
        <member name="T:Microsoft.Pex.Framework.Using.PexUseTypeAttribute">
            <summary>
            Attribute that announce a type of Pex.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Using.PexUseTypesAttributeBase">
            <summary>
            Abstract base class of attributes that announce types to Pex
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Using.PexUseTypesAttributeBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Using.PexUseTypesAttributeBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Using.PexUseTypesAttributeBase.GetTypes(Microsoft.Pex.Engine.ComponentModel.IPexComponent)">
            <summary>
            Gets the types.
            </summary>
            <param name="host">The host.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Using.PexUseTypesAttributeBase.BeforeExploration(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent)">
            <summary>
            Callback that is executed before the exploration starts.
            </summary>
            <param name="host">The host.</param>
            <returns>some data</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Using.PexUseTypeAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Using.PexUseTypeAttribute"/> class.
            </summary>
            <param name="targetType">Type of the target.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Using.PexUseTypeAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Using.PexUseTypeAttribute"/> class.
            </summary>
            <param name="typeOfAssembly">The type of assembly.</param>
            <param name="fullTypeName">Full name of the type.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Using.PexUseTypeAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Using.PexUseTypeAttribute"/> class.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="fullTypeName">Full name of the type.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Using.PexUseTypeAttribute.Create(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Create an instance of <see cref="T:Microsoft.Pex.Framework.Using.PexUseTypeAttribute"/>.
            </summary>
            <remarks>
            This method uses ExtendedReflection; it is not a constructor so that it does not show up in intellisense.
            </remarks>
            <param name="targetType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Using.PexUseTypeAttribute.GetTypes(Microsoft.Pex.Engine.ComponentModel.IPexComponent)">
            <summary>
            Gets the types.
            </summary>
            <param name="host">The host.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Using.PexUseTypeAttribute.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.Using.PexUseTypeAttribute.TargetType">
            <summary>
            Gets the type of the target.
            </summary>
            <value>The type of the target.</value>
        </member>
        <member name="T:Microsoft.Pex.Framework.Validation.PexAllowedContractRequiresFailureAtTypeUnderTestSurfaceAttribute">
            <summary>
            Allows failures of code contracts requires clauses
            when they occur at the surface of the type-under-test code
            from the test code.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Validation.PexExceptionValidatorAttributeBase">
            <summary>
            Base class for Exception validators
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexExceptionValidatorAttributeBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Validation.PexExceptionValidatorAttributeBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexExceptionValidatorAttributeBase.IsExceptionValid(System.Exception)">
            <summary>
            Determines whether the exception instance is allowed.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexExceptionValidatorAttributeBase.IsExceptionTypeValid(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Determines whether the exception type is allowed.
            </summary>
            <param name="exceptionType">Type of the exception.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexExceptionValidatorAttributeBase.IsExceptionLocationValid(System.Exception,Microsoft.ExtendedReflection.Metadata.MethodDefinition[],Microsoft.ExtendedReflection.Utilities.ContractsMetadata.ContractFailureKind)">
            <summary>
            Determines whether the exception location is
            allowed.
            </summary>
            <param name="ex">The ex.</param>
            <param name="stackTrace">The stack trace.</param>
            <param name="failureKind">Kind of the failure.</param>
            <returns>
            	<c>true</c> if [is exception location valid] [the specified ex]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexExceptionValidatorAttributeBase.IsSourceValid(System.String)">
            <summary>
            Determines whether the source assembly is allowed.
            </summary>
            <param name="assemblyName">The assembly name</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexExceptionValidatorAttributeBase.IsTargetSiteValid(Microsoft.ExtendedReflection.Metadata.MethodDefinition)">
            <summary>
            Determines whether the target method is allowed.
            </summary>
            <param name="targetSite">The target site.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexExceptionValidatorAttributeBase.IsStackTraceValid(System.Exception,Microsoft.ExtendedReflection.Metadata.MethodDefinition[],Microsoft.ExtendedReflection.Utilities.ContractsMetadata.ContractFailureKind)">
            <summary>
            Determines whether the stack trace of an exception is allowed.
            </summary>
            <param name="ex">The exception.</param>
            <param name="filteredStackTrace">The filtered stack trace.</param>
            <param name="failureKind">Kind of the failure.</param>
            <returns>
            	<c>true</c> if [is stack trace valid] [the specified ex]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexExceptionValidatorAttributeBase.FilterStackTrace(System.Exception,Microsoft.ExtendedReflection.Utilities.ContractsMetadata.ContractFailureKind@)">
            <summary>
            Filters the stacktrace
            </summary>
            <param name="ex">The ex.</param>
            <param name="failureKind">Kind of the failure.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexExceptionValidatorAttributeBase.IsExceptionDocumented(Microsoft.ExtendedReflection.Metadata.TypeEx,System.Exception,Microsoft.ExtendedReflection.Metadata.MethodDefinition[])">
            <summary>
            Determines whether the exception is documented on any method
            present in the stack trace
            </summary>
            <param name="exceptionType">Type of the exception.</param>
            <param name="exception">The exception.</param>
            <param name="stackMethods">methods from the stack</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexExceptionValidatorAttributeBase.IsExceptionMessageValid(System.String)">
            <summary>
            Determines whether the exception message is valid.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexExceptionValidatorAttributeBase.Describe(Microsoft.ExtendedReflection.Metadata.MetadataEntity)">
            <summary>
            Describes the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexExceptionValidatorAttributeBase.AppendDescription(Microsoft.ExtendedReflection.Utilities.Safe.Text.SafeStringBuilder)">
            <summary>
            Appends to the description.
            </summary>
            <param name="sb"></param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexExceptionValidatorAttributeBase.Validate(System.Exception,System.String@,System.String@)">
            <summary>
            Gets a value indicating whether this exception was expected
            </summary>
            <param name="exception">The exception.</param>
            <param name="message">optional; may provide more information about why the validator came to its conclusion</param>
            <param name="wikiTopic">optional; may provide more information</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexExceptionValidatorAttributeBase.AnalyzeException(System.Exception,System.String@,System.String@)">
            <summary>
            Analyzes the exception.
            </summary>
            <param name="exception">The exception.</param>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexExceptionValidatorAttributeBase.BeforeExploration(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent)">
            <summary>
            Callback that is executed before the exploration starts.
            </summary>
            <param name="host">The host.</param>
            <returns>some data</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexExceptionValidatorAttributeBase.AfterExploration(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,System.Object)">
            <summary>
            Callback that is executed after the exploration ends.
            </summary>
            <param name="host">The host.</param>
            <param name="data">The data returned by BeforeExploration.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexExceptionValidatorAttributeBase.IsDefinedInTypeUnderTest(Microsoft.ExtendedReflection.Metadata.MethodDefinition)">
            <summary>
            Whether the given method is defined in the type under test. 
            </summary>
            <param name="method">may be null</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexExceptionValidatorAttributeBase.MarkTest(System.Exception,Microsoft.ExtendedReflection.Metadata.Builders.MethodDefinitionBuilder)">
            <summary>
            Gets the opportunity to annotate the test with more information about the exception.
            By default, does nothing.
            </summary>
            <param name="exception">exception that was caught, if any (may be null)</param>
            <param name="testMethod"></param>
        </member>
        <member name="P:Microsoft.Pex.Framework.Validation.PexExceptionValidatorAttributeBase.AcceptInnerException">
            <summary>
            Gets or sets a value indicating whether inner exception
            should be inspected.
            </summary>
            <value>
            	<c>true</c> if accept inner exception; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Validation.PexExceptionValidatorAttributeBase.Documented">
            <summary>
            Gets or sets a value indicating whether 
            the exception type should be documented
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Framework.Validation.PexExceptionValidatorAttributeBase.OnlyAtTypeUnderTestSurface">
            <summary>
            Gets or sets whether 
            this exception validator only applies to exceptions 
            that have been thrown at the surface of the type-under-test.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Framework.Validation.PexExceptionValidatorAttributeBase.MessageFilter">
            <summary>
            Gets or sets a message filter; uses the default naming conventions for filters.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Framework.Validation.PexExceptionValidatorAttributeBase.WikiTopic">
            <summary>
            Gets the wiki topic.
            </summary>
            <value>The wiki topic.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Validation.PexExceptionValidatorAttributeBase.Host">
            <summary>
            Gets the exploration host
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Framework.Validation.PexExceptionValidatorAttributeBase.TrimStackTraceBeforeContractRuntime">
            <summary>
            Gets or sets a value indicating whether the filtered stack trace
            should be cut before the first call to the Code Contract runtime method
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Framework.Validation.PexExceptionValidatorAttributeBase.Description">
            <summary>
            Describes what this validator does.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Validation.PexExceptionValidatorAttributeBase.TypeUnderTest">
            <summary>
            Gets the type-under-test, if any.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexAllowedContractRequiresFailureAtTypeUnderTestSurfaceAttribute.#ctor">
            <summary>
            Allows failures of code contracts requires clauses
            when they occur at the surface of the type-under-test code
            from the test code.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexAllowedContractRequiresFailureAtTypeUnderTestSurfaceAttribute.IsExceptionTypeValid(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Determines whether the exception type is allowed.
            </summary>
            <param name="exceptionType">Type of the exception.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexAllowedContractRequiresFailureAtTypeUnderTestSurfaceAttribute.IsSourceValid(System.String)">
            <summary>
            Determines whether the source assembly is allowed.
            </summary>
            <param name="assemblyName">The assembly name</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexAllowedContractRequiresFailureAtTypeUnderTestSurfaceAttribute.IsTargetSiteValid(Microsoft.ExtendedReflection.Metadata.MethodDefinition)">
            <summary>
            Determines whether the target method is allowed.
            </summary>
            <param name="targetSite">The target site.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexAllowedContractRequiresFailureAtTypeUnderTestSurfaceAttribute.AnalyzeException(System.Exception,System.String@,System.String@)">
            <summary>
            Analyzes the exception.
            </summary>
            <param name="exception">The exception.</param>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.Validation.PexAllowedContractRequiresFailureAtTypeUnderTestSurfaceAttribute.AcceptInnerException">
            <summary>
            Gets or sets a value indicating whether inner exception
            should be inspected.
            </summary>
            <value><c>true</c> if accept inner exception; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Validation.PexAllowedContractRequiresFailureAtTypeUnderTestSurfaceAttribute.OnlyAtTypeUnderTestSurface">
            <summary>
            Gets or sets whether 
            this exception validator only applies to exceptions 
            that have been thrown at the surface of the type-under-test.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Framework.Validation.PexAllowedContractRequiresFailureAtTypeUnderTestSurfaceAttribute.MessageFilter">
            <summary>
            Gets or sets a message filter; uses the default naming conventions for filters.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Framework.Validation.PexAllowedContractRequiresFailureAtTypeUnderTestSurfaceAttribute.Documented">
            <summary>
            Gets or sets a value indicating whether 
            the exception type should be documented
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Framework.Validation.PexAllowedContractRequiresFailureAtTypeUnderTestSurfaceAttribute.Description">
            <summary>
            Describes what this validator does.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Pex.Framework.Validation.PexAllowedExceptionAttribute">
            <summary>
            Allows the exception from any location
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Validation.PexAllowedExceptionAttributeBase">
            <summary>
            Specifies an exception that is allowed to occur.
            If the
            execption occurs, the generated test will be tagged
            with 'ExpectedException'.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexAllowedExceptionAttributeBase.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Validation.PexAllowedExceptionAttributeBase"/> class.
            </summary>
            <param name="allowedExceptionType">Type of the allowed exception.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="allowedExceptionType"/> is a null reference.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexAllowedExceptionAttributeBase.AppendDescription(Microsoft.ExtendedReflection.Utilities.Safe.Text.SafeStringBuilder)">
            <summary>
            Appends to the description.
            </summary>
            <param name="sb"></param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexAllowedExceptionAttributeBase.IsExceptionTypeValid(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Determines whether the exception type is allowed.
            </summary>
            <param name="exceptionType">Type of the exception.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexAllowedExceptionAttributeBase.AnalyzeException(System.Exception,System.String@,System.String@)">
            <summary>
            Analyzes the exception.
            </summary>
            <param name="exception">The exception.</param>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexAllowedExceptionAttributeBase.Validate(Microsoft.Pex.Engine.Logging.IPexLog,Microsoft.ExtendedReflection.Metadata.ICustomAttributeProviderEx,Microsoft.ExtendedReflection.Metadata.VisibilityContext)">
            <summary>
            Validates the attribute in a particular visibility context.
            </summary>
            <param name="log">The log.</param>
            <param name="target">The target.</param>
            <param name="visibilityContextOfGeneratedTests">The visibility context of generated tests.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.Validation.PexAllowedExceptionAttributeBase.AcceptExceptionSubtypes">
            <summary>
            Gets or sets a value that determines whether exception should
            be checked by equality or sub-typing
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Framework.Validation.PexAllowedExceptionAttributeBase.AllowedExceptionTypeDefinition">
            <summary>
            Gets the expected type of the exception.
            </summary>
            <value>The expected type of the exception.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Validation.PexAllowedExceptionAttributeBase.Description">
            <summary>
            Describes what this validator does.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexAllowedExceptionAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Validation.PexAllowedExceptionAttribute"/> class.
            </summary>
            <param name="exceptionType">Type of the exception.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexAllowedExceptionAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Validation.PexAllowedExceptionAttribute"/> class.
            </summary>
            <param name="assemblyName">assembly of the exception</param>
            <param name="exceptionFullTypeName">exception type full name</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexAllowedExceptionAttribute.IsSourceValid(System.String)">
            <summary>
            Determines whether the source assembly is allowed.
            </summary>
            <param name="assemblyName">The assembly name</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexAllowedExceptionAttribute.IsTargetSiteValid(Microsoft.ExtendedReflection.Metadata.MethodDefinition)">
            <summary>
            Determines whether the target method is allowed.
            </summary>
            <param name="targetSite">The target site.</param>
        </member>
        <member name="T:Microsoft.Pex.Framework.Validation.PexAllowedXmlDocumentedExceptionAttribute">
            <summary>
            Allows documented exception from visible target sites
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexAllowedXmlDocumentedExceptionAttribute.IsExceptionTypeValid(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Determines whether the exception type is allowed.
            </summary>
            <param name="exceptionType">Type of the exception.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexAllowedXmlDocumentedExceptionAttribute.IsSourceValid(System.String)">
            <summary>
            Determines whether the source assembly is allowed.
            </summary>
            <param name="assemblyName">The assembly name</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexAllowedXmlDocumentedExceptionAttribute.IsTargetSiteValid(Microsoft.ExtendedReflection.Metadata.MethodDefinition)">
            <summary>
            Determines whether the target method is allowed.
            </summary>
            <param name="targetSite">The target site.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexAllowedXmlDocumentedExceptionAttribute.AnalyzeException(System.Exception,System.String@,System.String@)">
            <summary>
            Analyzes the exception.
            </summary>
            <param name="exception">The exception.</param>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.Validation.PexAllowedXmlDocumentedExceptionAttribute.Documented">
            <summary>
            Gets or sets a value indicating whether
            the exception type should be documented
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Validation.PexAllowedXmlDocumentedExceptionAttribute.AcceptInnerException">
            <summary>
            Gets or sets a value indicating whether inner exception
            should be inspected.
            </summary>
            <value><c>true</c> if accept inner exception; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Validation.PexAllowedXmlDocumentedExceptionAttribute.Description">
            <summary>
            Describes what this validator does.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Pex.Framework.Validation.PexAllowedExceptionFromAssemblyAttribute">
            <summary>
            Specifies an exception that is allowed to occur
            from a specified assembly.
            If the
            execption occurs, the generated test will be tagged
            with 'ExpectedException'.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexAllowedExceptionFromAssemblyAttribute.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Validation.PexAllowedExceptionFromAssemblyAttribute"/> class.
            </summary>
            <param name="typeOfAssembly">The type of assembly.</param>
            <param name="allowedExceptionType">Type of the allowed exception.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexAllowedExceptionFromAssemblyAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Validation.PexAllowedExceptionFromAssemblyAttribute"/> class.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="allowedExceptionType">Type of the allowed exception.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexAllowedExceptionFromAssemblyAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Validation.PexAllowedExceptionFromAssemblyAttribute"/> class.
            </summary>
            <param name="allowedExceptionTypeAssembly">The allowed exception type assembly.</param>
            <param name="assemblyExceptionTypeFullName">Full name of the assembly exception type.</param>
            <param name="assemblyName">Name of the assembly.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexAllowedExceptionFromAssemblyAttribute.IsSourceValid(System.String)">
            <summary>
            Determines whether the source assembly is allowed.
            </summary>
            <param name="assemblyName"></param>
            <returns>
            	<c>true</c> if [is assembly accepted] [the specified assembly]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexAllowedExceptionFromAssemblyAttribute.IsTargetSiteValid(Microsoft.ExtendedReflection.Metadata.MethodDefinition)">
            <summary>
            Determines whether target method is allowed
            </summary>
            <param name="targetSite">The target site.</param>
            <returns>
            	<c>true</c> if [is target site allowed] [the specified target site]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.Validation.PexAllowedExceptionFromAssemblyAttribute.SourceAssemblyName">
            <summary>
            Gets the name of the source assembly.
            </summary>
            <value>The name of the source assembly.</value>
        </member>
        <member name="T:Microsoft.Pex.Framework.Validation.PexAllowedExceptionFromTypeUnderTestAttribute">
            <summary>
            Specifies an exception that is allowed to occur from
            a specified method.
            If the
            execption occurs, the generated test will be tagged
            with 'ExpectedException'.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexAllowedExceptionFromTypeUnderTestAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Validation.PexAllowedExceptionFromTypeAttribute"/> class.
            </summary>
            <param name="allowedExceptionType">Type of the allowed exception.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="allowedExceptionType"/> is a null reference.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexAllowedExceptionFromTypeUnderTestAttribute.#ctor(System.Type,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Validation.PexAllowedExceptionFromTypeAttribute"/> class.
            </summary>
            <param name="allowedExceptionType">Type of the allowed exception.</param>
            <param name="acceptExceptionSubtypes">if set to <c>true</c> [accept exception subtypes].</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="allowedExceptionType"/> is a null reference.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexAllowedExceptionFromTypeUnderTestAttribute.BeforeExploration(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent)">
            <summary>
            Callback that is executed before the exploration starts.
            </summary>
            <param name="host">The host.</param>
            <returns>some data</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexAllowedExceptionFromTypeUnderTestAttribute.AfterExploration(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,System.Object)">
            <summary>
            Callback that is executed after the exploration ends.
            </summary>
            <param name="host">The host.</param>
            <param name="data">The data returned by BeforeExploration.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexAllowedExceptionFromTypeUnderTestAttribute.IsSourceValid(System.String)">
            <summary>
            Determines whether the source assembly is allowed.
            </summary>
            <param name="assemblyName"></param>
            <returns>
            	<c>true</c> if [is assembly accepted] [the specified assembly]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexAllowedExceptionFromTypeUnderTestAttribute.IsTargetSiteValid(Microsoft.ExtendedReflection.Metadata.MethodDefinition)">
            <summary>
            Determines whether target method is allowed
            </summary>
            <param name="targetSite">The target site. MAY BE NULL</param>
            <returns>
            	<c>true</c> if [is target site allowed] [the specified target site]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.Validation.PexAllowedExceptionFromTypeAttribute">
            <summary>
            Specifies an exception that is allowed to occur from
            a specified type.
            If the
            execption occurs, the generated test will be tagged
            with 'ExpectedException'.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexAllowedExceptionFromTypeAttribute.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Validation.PexAllowedExceptionFromTypeAttribute"/> class.
            </summary>
            <param name="allowedExceptionType">Type of the allowed exception.</param>
            <param name="sourceType">Type of the source.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexAllowedExceptionFromTypeAttribute.#ctor(System.Type,System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Validation.PexAllowedExceptionFromTypeAttribute"/> class.
            </summary>
            <param name="allowedExceptionType">Type of the allowed exception.</param>
            <param name="typeOfAssembly">The type of assembly.</param>
            <param name="sourceTypeFullName">Full name of the source type.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexAllowedExceptionFromTypeAttribute.IsSourceValid(System.String)">
            <summary>
            Determines whether the source assembly is allowed.
            </summary>
            <param name="assemblyName"></param>
            <returns>
            	<c>true</c> if [is assembly accepted] [the specified assembly]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexAllowedExceptionFromTypeAttribute.IsTargetSiteValid(Microsoft.ExtendedReflection.Metadata.MethodDefinition)">
            <summary>
            Determines whether target method is allowed
            </summary>
            <param name="targetSite">The target site.</param>
            <returns>
            	<c>true</c> if [is target site allowed] [the specified target site]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.Validation.PexDefaultExceptionValidatorAttribute.DefaultExceptionValidator">
            <summary>
            What this checker really does: It provides a nice test and wiki topic if an assertion is violated.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Validation.PexExpectedGeneratedValueAttribute">
            <summary>
            Exploration decorator that verifies that a certain value has been generated
            through <see cref="T:Microsoft.Pex.Framework.PexObserve"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexExpectedGeneratedValueAttribute.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Validation.PexExpectedGeneratedValueAttribute"/> class.
            </summary>
            <param name="valueName">Name of the value.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexExpectedGeneratedValueAttribute.TryCreateExplorationGoal(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,Microsoft.Pex.Engine.Goals.IPexExplorationGoal@)">
            <summary>
            Tries to create an exploration goal instance
            </summary>
            <param name="host"></param>
            <param name="goal"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.Validation.PexExpectedImprecisionsAttribute">
            <summary>
            Exploration decorator that verifies a certain number of imprecisions 
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexExpectedImprecisionsAttribute.TryCreateExplorationGoal(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,Microsoft.Pex.Engine.Goals.IPexExplorationGoal@)">
            <summary>
            Tries to create an exploration goal instance
            </summary>
            <param name="host"></param>
            <param name="goal"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.Validation.PexExpectedImprecisionsAttribute.MaximumCount">
            <summary>
            Gets or sets the total count.
            </summary>
            <value>The total count.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Validation.PexExpectedImprecisionsAttribute.MinimumCount">
            <summary>
            Gets or sets the total minimum count.
            </summary>
            <value>The total count.</value>
        </member>
        <member name="T:Microsoft.Pex.Framework.Wizard.PexComparablePatterns">
            <summary>
            Patterns for the IComparable&lt;T&gt; interface
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Wizard.PexComparablePatterns.CompareItself``1(``0)">
            <summary>
            Asserts that a == a 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="a"></param>
        </member>
        <member name="T:Microsoft.Pex.Framework.Wizard.PexDisposablePatterns">
            <summary>
            Static helper class containing helper methods for Wizard patterns.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Wizard.PexDisposablePatterns.DisposeTwice(System.IDisposable)">
            <summary>
            Disposes the target twice.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="T:Microsoft.Pex.Framework.Wizard.PexEnumerablePatterns">
            <summary>
            Operations on enumerations
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Wizard.PexEnumerablePatterns.ForEach``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Enumerates the specified enumerable.
            </summary>
            <param name="enumerable">The enumerable.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Wizard.PexEnumerablePatterns.ForEach(System.Collections.IEnumerable)">
            <summary>
            Enumerates the specified enumerable.
            </summary>
            <param name="enumerable">The enumerable.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Wizard.PexEnumerablePatterns.DoubleForEach``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Enumerates the specified enumerable.
            </summary>
            <param name="enumerable">The enumerable.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Wizard.PexEnumerablePatterns.MoveNextAndReset``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Enumerates the specified enumerable.
            </summary>
            <param name="enumerable">The enumerable.</param>
        </member>
        <member name="T:Microsoft.Pex.Framework.Wizard.PexEquatablePatterns">
            <summary>
            Static helper class containing helper methods for Wizard patterns.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Wizard.PexEquatablePatterns.EqualsItself``1(``0)">
            <summary>
            Equatable is equal to itself.
            </summary>
            <param name="left">The left.</param>
        </member>
        <member name="T:Microsoft.Pex.Framework.Injection.PexInjectExceptionsOnUnverifiableUnsafeMemoryAccessAttribute">
            <summary>
            Attribute that ensures that all indirect memory accesses can be identified as being safe.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Injection.PexInjectExceptionsOnUnverifiableUnsafeMemoryAccessAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Injection.PexInjectExceptionsOnUnverifiableUnsafeMemoryAccessAttribute"/> class.
            </summary>
            <param name="exceptionType">Type of the exception to throw on unverifiable memory access.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Injection.PexInjectExceptionsOnUnverifiableUnsafeMemoryAccessAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Injection.PexInjectExceptionsOnUnverifiableUnsafeMemoryAccessAttribute"/> class.
            </summary>
            <remarks>
            The default exception type is <see cref="T:Microsoft.Pex.Framework.Exceptions.PexUnverifiableUnsafeMemoryAccessException"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.Injection.PexInjectExceptionsOnUnverifiableUnsafeMemoryAccessAttribute.BeforeExploration(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent)">
            <summary>
            Callback that is executed before the exploration starts.
            </summary>
            <param name="host">The host.</param>
            <returns>some data</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Injection.PexInjectExceptionsOnUnverifiableUnsafeMemoryAccessAttribute.AfterExploration(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,System.Object)">
            <summary>
            Callback that is executed after the exploration ends.
            </summary>
            <param name="host">The host.</param>
            <param name="data">The data returned by BeforeExploration.</param>
        </member>
        <member name="P:Microsoft.Pex.Framework.Injection.PexInjectExceptionsOnUnverifiableUnsafeMemoryAccessAttribute.ExceptionType">
            <summary>
            The exception type that is thrown when an unverifiable unsafe memory access happens.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Choices.IPexEarlyMethodCallChoiceSession">
            <summary>
            An interface that allows to make choices about a method's behavior before the method has actually been called
            </summary>
            <remarks>
            While the standard method call oracle patches the result of the current method call,
            this interface allows and requires a user to obtain the result of choices separately.
            </remarks>
        </member>
        <member name="M:Microsoft.Pex.Engine.Choices.IPexEarlyMethodCallChoiceSession.GetLastResult">
            <summary>
            Attempts to retrieve the abstract result of the last choice; resets the last result, i.e. this method can only be called once for each result.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.Choices.IPexChoiceBuilder">
            <summary>
            Interface to add additional symbols as roots to the constraint solver
            </summary>
            <remarks>
            Only if symbols have been declared as roots, the constraint solver will find
            an assignment for them.
            </remarks>
        </member>
        <member name="M:Microsoft.Pex.Engine.Choices.IPexChoiceBuilder.AddChoice(Microsoft.Pex.Engine.Choices.PexChoice,System.Boolean,System.Boolean,Microsoft.ExtendedReflection.Metadata.TypeEx[])">
            <summary>
            Registers an additional symbol with the constraint solver.
            </summary>
            <param name="choice">identifier of choice</param>
            <param name="nonNull">for reference types, whether the value may not be null</param>
            <param name="allowSubtypes">for reference types, whether to allow subtypes or insist on exact type matching</param>
            <param name="types">for reference types, an optional list of possible concrete types</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Choices.IPexChoiceBuilder.AddChoice(Microsoft.Pex.Engine.Choices.PexChoice,Microsoft.ExtendedReflection.Interpretation.Term[])">
            <summary>
            Registers an additional symbol with the constraint solver.
            </summary>
            <param name="choice">identifier of choice</param>
            <param name="values">list of values to choose from</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Choices.IPexChoiceBuilder.AddChoice(Microsoft.Pex.Engine.Choices.PexChoice,Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term)">
            <summary>
            Registers an additional symbol with the constraint solver.
            </summary>
            <param name="choice">identifier of choice</param>
            <param name="minInclusive">The minimum (inclusive).</param>
            <param name="maxExclusive">The maximum (exclusive).</param>
        </member>
        <member name="T:Microsoft.Pex.Engine.Choices.IPexChoiceValueProvider">
            <summary>
            Interface to retrieve concrete values for choices.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Choices.IPexChoiceValueProvider.GetValue``1(Microsoft.Pex.Engine.Choices.PexChoice,System.Boolean,Microsoft.ExtendedReflection.Metadata.TypeEx[])">
            <summary>
            Retrieves a concrete value for a choice.
            </summary>
            <remarks>
            The concrete values are needed for re-execution; they are provided by the solution of the constraint system.
            </remarks>
            <param name="choice">identifier of choice</param>
            <param name="nonNull">for reference types, whether the value must not be null</param>
            <param name="types">for reference types, an optional list of possible concrete types</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Choices.IPexChoiceValueProvider.GetValueFrom``1(Microsoft.Pex.Engine.Choices.PexChoice,``0[])">
            <summary>
            Retrieves a concrete value for a choice.
            </summary>
            <remarks>
            The concrete values are needed for re-execution; they are provided by the solution of the constraint system.
            </remarks>
            <param name="choice">identifier of choice</param>
            <param name="values">list of values to choose from</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Choices.IPexChoiceValueProvider.GetValueInRange(Microsoft.Pex.Engine.Choices.PexChoice,System.Int32,System.Int32)">
            <summary>
            Retrieves a concrete value for a choice.
            </summary>
            <remarks>
            The concrete values are needed for re-execution; they are provided by the solution of the constraint system.
            </remarks>
            <param name="choice">identifier of choice</param>
            <param name="minInclusive">The minimum value (inclusive).</param>
            <param name="maxExclusive">The maximum value (exclusive).</param>
        </member>
        <member name="T:Microsoft.Pex.Engine.Choices.PexChoice">
            <summary>
            Identifier of choices made with a method call chooser.
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Choices.PexChoice.SessionKey">
            <summary>
            Unique identifier of session.
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Choices.PexChoice.Kind">
            <summary>
            Choice kind.
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Choices.PexChoice.Index">
            <summary>
            Number of choice within session.
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Choices.PexChoice.DisplayIndex">
            <summary>
            Used for displaying, not used in equality
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Choices.PexChoice.Type">
            <summary>
            Type of chosen value
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Choices.PexChoice.#ctor(Microsoft.Pex.Engine.Choices.PexChoiceSessionKey,Microsoft.Pex.Engine.Choices.PexChoiceKind,System.Int32,System.String,Microsoft.ExtendedReflection.Metadata.TypeEx,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.Choices.PexChoice"/> class.
            </summary>
            <param name="sessionKey">The session key.</param>
            <param name="kind">The kind.</param>
            <param name="index">The index.</param>
            <param name="_innerDescription">The inner description.</param>
            <param name="type">The type.</param>
            <param name="displayIndex">the display index if any</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Choices.PexChoice.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Choices.PexChoice.GetPersistentHashCode">
            <summary>
            Gets a strong, persistent hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Choices.PexChoice.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Choices.PexChoice.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="P:Microsoft.Pex.Engine.Choices.PexChoice.ShortDescription">
            <summary>
            Short textual description of the symbol,
            used for parameter table logging
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Choices.PexChoice.Description">
            <summary>
            Textual description of the symbol.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Choices.PexChoice.Layout">
            <summary>
            The layout of the symbol.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Choices.PexChoice.ObjectCreationTime">
            <summary>
            When the object (or all objects within this value) was created.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Pex.Engine.Choices.PexChoice.InnerDescription">
            <summary>
            Gets the inner description.
            </summary>
            <value>The inner description.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.Choices.PexChoiceKind">
            <summary>
            Kinds of method calls
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Choices.PexChoiceKind.OutParameterValue">
            <summary>
            Out parameter
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Choices.PexChoiceKind.Result">
            <summary>
            Result
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Choices.PexChoiceKind.ThrowException">
            <summary>
            Boolean whether to throw an exception
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Choices.PexChoiceKind.Exception">
            <summary>
            Thrown exception
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Choices.PexChoiceKind.Free">
            <summary>
            Anything
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Choices.PexChoiceKind.ValueInjection">
            <summary>
            Injected value
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Choices.PexChoiceKind.ComprehensionIsDone">
            <summary>
            Internal
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Choices.PexChoiceExecutionValueInjector">
            <summary>
            Oracle execution value injector
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Choices.PexChoiceExecutionValueInjector.Instance">
            <summary>
            Singleton instance.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Choices.PexChoiceExecutionValueInjector.Initialize(Microsoft.ExtendedReflection.ComponentModel.IEngine)">
            <summary>
            Resets the choice cache and sets up the list of valueInjectors for the current
            exploration
            </summary>
            <param name="engine">The engine.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Choices.PexChoiceExecutionValueInjector.ShouldInjectValue``1(Microsoft.ExtendedReflection.Monitoring.IThreadExecutionMonitor,``0,System.Int32)">
            <summary>
            This method is called just before an 'injection' could be done.
            </summary>
            <param name="monitor">The monitor.</param>
            <param name="value">The value.</param>
            <param name="codeLabel">The code label.</param>
            <returns>session object</returns>
            <remarks>
            This method returns a null reference if no injection should be done;
            otherwise returns the session object.
            </remarks>
        </member>
        <member name="M:Microsoft.Pex.Engine.Choices.PexChoiceExecutionValueInjector.InjectValue``1(System.Object,System.Int32)">
            <summary>
            Injects the value.
            </summary>
            <param name="session">The session.</param>
            <param name="popCount">The pop count.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.Choices.PexChoiceSessionKey">
            <summary>
            Value uniquely identifying a <see cref="T:Microsoft.Pex.Framework.Choices.IPexChoiceSession"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Choices.PexChoiceSessionKey.Kind">
            <summary>
            Session kind
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Choices.PexChoiceSessionKey.SegmentIndex">
            <summary>
            Segment index
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Choices.PexChoiceSessionKey.Time">
            <summary>
            Time
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Choices.PexChoiceSessionKey.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Choices.PexChoiceSessionKey.Method">
            <summary>
            Optional method; does not participate in equality
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Choices.PexChoiceSessionKey.CodeLabel">
            <summary>
            Code label
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Choices.PexChoiceSessionKey.#ctor(Microsoft.Pex.Engine.Choices.PexChoiceSessionKind,System.Int32,System.Int32,System.String,Microsoft.ExtendedReflection.Metadata.MethodDefinition,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.Choices.PexChoiceSessionKey"/> struct.
            </summary>
            <param name="kind">The kind.</param>
            <param name="segmentIndex">Index of the segment.</param>
            <param name="time">The time.</param>
            <param name="name">The name.</param>
            <param name="method">The method.</param>
            <param name="codeLabel">The code label.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Choices.PexChoiceSessionKey.CreateIdFromMethod(Microsoft.ExtendedReflection.Metadata.MethodDefinition)">
            <summary>
            Creates a name from a method.
            </summary>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Choices.PexChoiceSessionKey.CreateIdFromMethod(System.Reflection.MethodBase)">
            <summary>
            Creates a name from a method.
            </summary>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Choices.PexChoiceSessionKey.CloneToSegment(System.Int32)">
            <summary>
            Clones this instance for a given segment.
            </summary>
            <param name="newSegmentIndex">New index of the segment.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Choices.PexChoiceSessionKey.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Choices.PexChoiceSessionKey.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Choices.PexChoiceSessionKey.Equals(Microsoft.Pex.Engine.Choices.PexChoiceSessionKey)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Choices.PexChoiceSessionKey.op_Equality(Microsoft.Pex.Engine.Choices.PexChoiceSessionKey,Microsoft.Pex.Engine.Choices.PexChoiceSessionKey)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Choices.PexChoiceSessionKey.op_Inequality(Microsoft.Pex.Engine.Choices.PexChoiceSessionKey,Microsoft.Pex.Engine.Choices.PexChoiceSessionKey)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Choices.PexChoiceSessionKey.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.Choices.PexChoiceSessionKind">
            <summary>
            Kind of <see cref="T:Microsoft.Pex.Framework.Choices.IPexChoiceSession"/>
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Choices.PexChoiceSessionKind.Plain">
            <summary>
            A plain session
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Choices.PexChoiceSessionKind.MethodCall">
            <summary>
            A session representing a method call
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Choices.PexChoiceSessionKind.EarlyMethodCall">
            <summary>
            A session representing a method call that is about to happen
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Choices.PexChoiceSessionKind.ValueInjection">
            <summary>
            A session representing an injected value
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Choices.PexChoiceSessionKind.Comprehension">
            <summary>
            Internal
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Packages.PexPathPackageAttributeBase">
            <summary>
            Abstract base class for exploration decorator attributes
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Packages.PexPathPackageAttributeBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Packages.PexPathPackageAttributeBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Packages.PexPathPackageAttributeBase.Load(Microsoft.ExtendedReflection.ComponentModel.IContainer)">
            <summary>
            This method provides the opportunity install or substitute services.
            </summary>
            <param name="explorationContainer">The exploration container.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Packages.PexPathPackageAttributeBase.BeforeRun(Microsoft.Pex.Engine.ComponentModel.IPexPathComponent)">
            <summary>
            Callback that is executed before the path starts.
            </summary>
            <param name="host">The host.</param>
            <returns>some data</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Packages.PexPathPackageAttributeBase.AfterRun(Microsoft.Pex.Engine.ComponentModel.IPexPathComponent,System.Object)">
            <summary>
            Callback that is executed after the path ends.
            </summary>
            <param name="host">The host.</param>
            <param name="data">The data returned by BeforeRun.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Packages.PexPathPackageAttributeBase.Decorate(Microsoft.ExtendedReflection.Metadata.Names.Name,Microsoft.Pex.Engine.ComponentModel.IPexDecoratedComponentElement)">
            <summary>
            This method can announce filters, focuses, and packages to Pex.
            </summary>
            <param name="location">The location of the decorator.</param>
            <param name="host">The host.</param>
            <remarks>
            This method is called once when Pex inspects all decorators.
            A package, that is added at this point, may later create
            components for individual explorations or paths.
            </remarks>
        </member>
        <member name="P:Microsoft.Pex.Framework.Packages.PexPathPackageAttributeBase.Name">
            <summary>
            Gets the name of this package.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Microsoft.Pex.Framework.Instrumentation.PexAssemblyUnderTestAttribute">
            <summary>
            Specifies an assembly being tested by this project
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Instrumentation.PexAssemblyUnderTestAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Instrumentation.PexAssemblyUnderTestAttribute"/> class.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Instrumentation.PexAssemblyUnderTestAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Instrumentation.PexAssemblyUnderTestAttribute"/> class.
            </summary>
            <param name="typeOfAssembly">The type of assembly.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Instrumentation.PexAssemblyUnderTestAttribute.GetTargetAssemblies(Microsoft.ExtendedReflection.ComponentModel.IComponent)">
            <summary>
            Gets a list of <see cref="P:Microsoft.Pex.Framework.Instrumentation.PexAssemblyUnderTestAttribute.AssemblyName"/> to instrument
            </summary>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.Instrumentation.PexAssemblyUnderTestAttribute.AssemblyName">
            <summary>
            Gets the name of the assembly under test
            </summary>
            <value>The name of the assembly.</value>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexAssert">
            <summary>
            A static helper class that contains a set of methods to express assertions in parameterized unit tests.
            </summary>
            <remarks>
            PexAssert is similar in behavior to <c>Assert</c>.
            The methods make various statements about the code under test.
            If the statement is false, the method throws <see cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException"/>. Any message in the exception object
            is displayed in Pex Explorer.
            </remarks>
            <seealso cref="T:Microsoft.Pex.Framework.PexAssume"/>
            <seealso cref="T:Microsoft.Pex.Framework.PexObserve"/>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.CreateException">
            <summary>
            Creates the assumption/assertion exception instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.Fail(System.String,System.Object[])">
            <summary>
            Asserts unconditionally, with a specified message and formatting for the exception object.
            </summary>
            <overloads>Asserts unconditionally.</overloads>
            <param name="format">
            A message format string. The syntax for this string is identical to the format string
            used by <c>Console.Writeline</c>. In particular, insert "{0}", "{1}" and so on at appropriate
            locations in the string to represent the values of the variables in the <paramref name="args"/> array.
            </param>
            <param name="args">
            One or more variables. whose values are to be inserted in <paramref name="format"/>.
            </param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">Always.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.Fail(System.String)">
            <summary>
            Asserts unconditionally, with a specified message in the exception object.
            </summary>
            <param name="message">
            The message string.
            </param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">Always.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.Fail">
            <summary>
            Asserts unconditionally.
            </summary>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">Always.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.Fail(System.Exception,System.String)">
            <summary>
            Asserts unconditionally.
            </summary>
            <param name="ex">inner exception</param>
            <param name="message">message</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">Always.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.IsTrue(System.Boolean)">
            <summary>
            Asserts that the condition evaluates to <c>true</c>.
            </summary>
            <overloads>Asserts that the condition evaluates to <c>true</c>.</overloads>
            <param name="condition">A Boolean condition.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the condition evaluates to <c>false</c>.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.IsTrue``1(System.Boolean,Microsoft.Pex.Framework.PexAssert.Func{``0})">
            <summary>
            Asserts that the condition evaluates to <c>true</c>,
            otherwise it calls the factory delegate and returns the result.
            </summary>
            <typeparam name="T">The return type.</typeparam>
            <param name="condition">A Boolean condition.</param>
            <param name="factory">A delegate that returns a value of type <c>T</c>.</param>
            <returns>Returns the return value from <paramref name="factory"/></returns>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If condition evaluates to <c>false</c>.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.IsFalse(System.Boolean)">
            <summary>
            Asserts that the condition evaluates to <c>false</c>.
            </summary>
            <overloads>Asserts that the condition evaluates to <c>false</c>.</overloads>
            <param name="condition">A Boolean condition.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If condition evaluates to <c>true</c>.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.IsFalse``1(System.Boolean,Microsoft.Pex.Framework.PexAssert.Func{``0})">
            <summary>
            Asserts that the condition evaluates to <c>false</c>,
            otherwise it calls the factory delegate and returns the result.
            </summary>
            <typeparam name="T">The return type.</typeparam>
            <param name="condition">A Boolean condition.</param>
            <param name="factory">A delegate that returns a value of type <c>T</c>.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the condition evaluates to <c>true</c>.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.IsTrue(System.Boolean,System.String)">
            <summary>
            Asserts that the condition evaluates to <c>true</c>, with a
            specified message and format in the exception object.
            </summary>
            <param name="condition">A Boolean condition.</param>
            <param name="message">The message string.</param>
            <returns>Returns the return value from <paramref name="factory"/></returns>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the condition evaluates to <c>false</c>.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.IsFalse(System.Boolean,System.String)">
            <summary>
            Asserts that the condition evaluates to <c>false</c>, with a specified message in the exception object.
            </summary>
            <param name="condition">A Boolean condition.</param>
            <param name="message">The message string.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the condition evaluates to <c>true</c>.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.IsTrue(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that the condition evaluates to <c>true</c>, with a specified message in the exception object.
            </summary>
            <param name="condition">A Boolean condition.</param>
            <param name="format">
            A message format string. The syntax for this string is identical to the format string
            used by <c>Console.Writeline</c>. In particular, insert "{0}", "{1}" and so on at appropriate
            locations in the string to represent the values of the variables in the <paramref name="args"/> array.
            </param>
            <param name="args">
            One or more variables. whose values are to be inserted in <paramref name="format"/>.
            </param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the condition evaluates to <c>false</c>.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.IsFalse(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that the condition evaluates to <c>false</c>, with a specified message in the exception object.
            </summary>
            <param name="condition">A Boolean condition.</param>
            <param name="format">
            A message format string. The syntax for this string is identical to the format string
            used by <c>Console.Writeline</c>. In particular, insert "{0}", "{1}" and so on at appropriate
            locations in the string to represent the values of the variables in the <paramref name="args"/> array.
            </param>
            <param name="args">
            One or more variables. whose values are to be inserted in <paramref name="format"/>.
            </param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the condition evaluates to <c>true</c>.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.IsNull(System.Object)">
            <summary>
            Asserts that the object reference is null.
            </summary>
            <overloads>Asserts that the object reference is null.</overloads>
            <param name="value">An object.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the object reference is not null.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.IsNull(System.Object,System.String)">
            <summary>
            Asserts that the object reference is null with a specified message in the exception object.
            </summary>
            <param name="value">An object.</param>
            <param name="message">A message string.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the object reference is not null.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.IsNull(System.Object,System.String,System.Object[])">
            <summary>
            Asserts that the object reference is null with a specified message in the exception object.
            if the object reference is not null.
            </summary>
            <param name="value">An object.</param>
            <param name="format">
            A message format string. The syntax for this string is identical to the format string
            used by <c>Console.Writeline</c>. In particular, insert "{0}", "{1}" and so on at appropriate
            locations in the string to represent the values of the variables in the <paramref name="args"/> array.
            </param>
            <param name="args">
            One or more variables. whose values are to be inserted in <paramref name="format"/>.
            </param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the object reference is not null.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.IsNotNull(System.Object)">
            <summary>
            Asserts that the object reference is not null.
            </summary>
            <overloads>Asserts that the object reference is not null.</overloads>
            <param name="value">An object.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the object reference is null.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.IsNotNull(System.Object,System.String)">
            <summary>
            Asserts that the object reference is not null with a specified message in the exception object.
            </summary>
            <param name="value">An object.</param>
            <param name="message">A message string.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the object reference is null.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.IsNotNull(System.Object,System.String,System.Object[])">
            <summary>
            Asserts that the object reference is not null with a specified message in the exception object.
            </summary>
            <param name="value">An object.</param>
            <param name="format">
            A message format string. The syntax for this string is identical to the format string
            used by <c>Console.Writeline</c>. In particular, insert "{0}", "{1}" and so on at appropriate
            locations in the string to represent the values of the variables in the <paramref name="args"/> array.
            </param>
            <param name="args">
            One or more variables. whose values are to be inserted in <paramref name="format"/>.
            </param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the object reference is null.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreEqual(System.Boolean,System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that two <c>bool</c> values are equal.
            </summary>
            <remarks>
            This method ensures MC/DC coverage of the conjuncts.
            </remarks>
            <param name="expected">The expected value.</param>
            <param name="actual">The value to be tested.</param>
            <param name="format">
            A message format string. The syntax for this string is identical to the format string
            used by <c>Console.Writeline</c>. In particular, insert "{0}", "{1}" and so on at appropriate
            locations in the string to represent the values of the variables in the <paramref name="args"/> array.
            </param>
            <param name="args">
            One or more variables. whose values are to be inserted in <paramref name="format"/>.
            </param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the expected and actual values are not equal.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreEqual(System.Boolean,System.Boolean)">
            <summary>
            Asserts that two <c>bool</c> values are equal.
            </summary>
            <remarks>
            This method ensures MC/DC coverage of the conjuncts.
            </remarks>
            <param name="expected">The expected value.</param>
            <param name="actual">The value to be tested.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the expected and actual values are not equal.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreEqual(System.Boolean,System.Boolean,System.String)">
            <summary>
            Asserts that two <c>bool</c> values are equal.
            </summary>
            <remarks>
            This method ensures MC/DC coverage of the conjuncts.
            </remarks>
            <param name="expected">The expected value.</param>
            <param name="actual">The value to be tested.</param>
            <param name="message">The message to be inserted in case of failure</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the expected and actual values are not equal.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreEqualOrEmpty(System.String,System.String)">
            <summary>
            Asserts that two <c>string</c> values are equal or both empty.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The value to be tested.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the expected and actual values are not equal.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreEqual(System.Double,System.Double,System.Double)">
            <summary>
            Asserts that two <c>double</c> values are equal within a specified precision.
            </summary>
            <overloads>Asserts that two values are equal.</overloads>
            <param name="expected">The expected value.</param>
            <param name="actual">The value to be tested.</param>
            <param name="delta">The test's precision. This value must be positive.</param>
            <remarks>The assertion fails if the absolute value of the difference between the expected
            and actual values is greater than delta. </remarks>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the expected and actual values are not equal.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If delta is negative.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreEqual(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Asserts that two <c>double</c> values are  equal within a specified precision, with a specified message
            in the exception object.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The value to be tested.</param>
            <param name="delta">The test's precision. This value must be positive.</param>
            <param name="message">The message string.</param>
            <remarks>The assertion fails if the absolute value of the difference between the expected
            and actual values is greater than delta. </remarks>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the expected and actual values are not equal.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If delta is negative.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreEqual(System.Double,System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Asserts that two <c>double</c> values are  equal within a specified precision, with a specified message
            in the exception object.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The value to be tested.</param>
            <param name="delta">The test's precision. This value must be positive.</param>
            <param name="format">
            A message format string. The syntax for this string is identical to the format string
            used by <c>Console.Writeline</c>. In particular, insert "{0}", "{1}" and so on at appropriate
            locations in the string to represent the values of the variables in the <paramref name="args"/> array.
            </param>
            <param name="args">
            One or more variables. whose values are to be inserted in <paramref name="format"/>.
            </param>
            <remarks>The assertion fails if the absolute value of the difference between the expected
            and actual values is greater than delta. </remarks>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the expected and actual values are not equal.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If delta is negative.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreEqual(System.Single,System.Single,System.Single)">
            <summary>
            Asserts that two <c>float</c> values are  equal within a specified precision.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The value to be tested.</param>
            <param name="delta">The test's precision. This value must be positive.</param>
            <remarks>The assertion fails if the absolute value of the difference between the expected
            and actual values is greater than delta. </remarks>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the expected and actual values are not equal.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If delta is negative.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreEqual(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Asserts that two <c>float</c> values are  equal within a specified precision, with
            a specified message in the exception object.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The value to be tested.</param>
            <param name="delta">The test's precision. This value must be positive.</param>
            <param name="message">The message string.</param>
            <remarks>The assertion fails if the absolute value of the difference between the expected
            and actual values is greater than delta. </remarks>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the expected and actual values are not equal.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If delta is negative.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreEqual(System.Single,System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Asserts that two <c>float</c> values are  equal within a specified precision, with
            a specified message in the exception object.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The value to be tested.</param>
            <param name="delta">The test's precision. This value must be positive.</param>
            <param name="format">
            A message format string. The syntax for this string is identical to the format string
            used by <c>Console.Writeline</c>. In particular, insert "{0}", "{1}" and so on at appropriate
            locations in the string to represent the values of the variables in the <paramref name="args"/> array.
            </param>
            <param name="args">
            One or more variables. whose values are to be inserted in <paramref name="format"/>.
            </param>
            <remarks>The assertion fails if the absolute value of the difference between the expected
            and actual values is greater than delta. </remarks>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the expected and actual values are not equal.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If delta is negative.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreEqual(System.String,System.String,System.Boolean)">
            <summary>
            Asserts that two strings are equal, using the Ordinal comparer.
            </summary>
            <param name="expected">The expected string.</param>
            <param name="actual">The actual string.</param>
            <param name="ignoreCase">Set this value to <c>true</c> for case-sensitive comparison
            and <d>false</d> otherwise.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the strings are not equal.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreEqual(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Asserts that two strings are equal with a specified message in the exception object.
            </summary>
            <param name="expected">The expected string.</param>
            <param name="actual">The actual string.</param>
            <param name="ignoreCase">Set this value to <c>true</c> for case-sensitive comparison
            and <d>false</d> otherwise.</param>
            <param name="message">The message string.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the strings are not equal.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreEqual(System.String,System.String,System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that two strings are equal with a specified message in the exception object.
            </summary>
            <param name="expected">The expected string.</param>
            <param name="actual">The actual string.</param>
            <param name="ignoreCase">Set this value to <c>true</c> for case-sensitive comparison
            and <d>false</d> otherwise.</param>
            <param name="format">
            A message format string. The syntax for this string is identical to the format string
            used by <c>Console.Writeline</c>. In particular, insert "{0}", "{1}" and so on at appropriate
            locations in the string to represent the values of the variables in the <paramref name="args"/> array.
            </param>
            <param name="args">
            One or more variables. whose values are to be inserted in <paramref name="format"/>.
            </param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the strings are not equal.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            Asserts that a culture-specific comparison of two strings is true.
            </summary>
            <param name="expected">The expected string.</param>
            <param name="actual">The actual string.</param>
            <param name="ignoreCase">Set this value to <c>true</c> for case-sensitive comparison
            and <d>false</d> otherwise.</param>
            <param name="culture">A <c>System.Globalization.CultureInfo</c> object that contains the
            culture-specific comparison information.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the strings are not equal.</exception>
            <remarks>For more information, see <c>System.String.Compare</c>.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo,System.String)">
            <summary>
            Asserts that a culture-specific comparison of two strings is true, with a specified message in the
            exception object.
            </summary>
            <param name="expected">The expected string.</param>
            <param name="actual">The actual string.</param>
            <param name="ignoreCase">Set this value to <c>true</c> for case-sensitive comparison
            and <d>false</d> otherwise.</param>
            <param name="culture">A <c>System.Globalization.CultureInfo</c> object that contains the
            culture-specific comparison information.</param>
            <param name="message">The message string.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the strings are not equal.</exception>
            <remarks>For more information, see <c>System.String.Compare</c>.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo,System.String,System.Object[])">
            <summary>
            Asserts that a culture-specific comparison of two strings is true, with a specified message in the
            exception object.
            </summary>
            <param name="expected">The expected string.</param>
            <param name="actual">The actual string.</param>
            <param name="ignoreCase">Set this value to <c>true</c> for case-sensitive comparison
            and <d>false</d> otherwise.</param>
            <param name="culture">A <c>System.Globalization.CultureInfo</c> object that contains the
            culture-specific comparison information.</param>
            <param name="format">
            A message format string. The syntax for this string is identical to the format string
            used by <c>Console.Writeline</c>. In particular, insert "{0}", "{1}" and so on at appropriate
            locations in the string to represent the values of the variables in the <paramref name="args"/> array.
            </param>
            <param name="args">
            One or more variables. whose values are to be inserted in <paramref name="format"/>.
            </param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the strings are not equal.</exception>
            <remarks>For more information, see <c>System.String.Compare</c>.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreEqual(System.Object,System.Object)">
            <summary>
            Asserts that two object instances are equal.
            </summary>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the objects are not equal.</exception>
            <remarks>The assertion fails if <c>object.Equals(expected, actual)</c> returns <c>false</c>.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreEqual(System.Object,System.Object,System.String)">
            <summary>
            Asserts that two object instances are equal, with a specified message in the exception object.
            </summary>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <param name="message">The message string.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the objects are not equal.</exception>
            <remarks>The assertion fails if <c>object.Equals(expected, actual)</c> returns <c>false</c>.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreEqual(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that two object instances are equal, with a specified message in the exception object.
            </summary>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <param name="format">
            A message format string. The syntax for this string is identical to the format string
            used by <c>Console.Writeline</c>. In particular, insert "{0}", "{1}" and so on at appropriate
            locations in the string to represent the values of the variables in the <paramref name="args"/> array.
            </param>
            <param name="args">
            One or more variables. whose values are to be inserted in <paramref name="format"/>.
            </param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the objects are not equal.</exception>
            <remarks>The assertion fails if <c>object.Equals(expected, actual)</c> returns <c>false</c>.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreEqual``1(``0,``0)">
            <summary>
            Asserts that two object instances with a specified type are equal.
            </summary>
            <typeparam name="T">The objects' type.</typeparam>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the objects are not equal.</exception>
            <remarks>The assertion fails if <c>object.Equals(expected, actual)</c> returns <c>false</c>.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreEqual``1(``0,``0,System.String)">
            <summary>
            Asserts that two object instances with a specified type are equal, with a specified message
            in the exception object.
            </summary>
            <typeparam name="T">The object's type.</typeparam>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <param name="message">The message string.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the objects are not equal.</exception>
            <remarks>The assertion fails if <c>object.Equals(expected, actual)</c> returns <c>false</c>.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreEqual``1(``0,``0,System.String,System.Object[])">
            <summary>
            Asserts that two object instances with a specified type are equal, with a specified message
            in the exception object.
            </summary>
            <typeparam name="T">The objects' type.</typeparam>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <param name="format">
            A message format string. The syntax for this string is identical to the format string
            used by <c>Console.Writeline</c>. In particular, insert "{0}", "{1}" and so on at appropriate
            locations in the string to represent the values of the variables in the <paramref name="args"/> array.
            </param>
            <param name="args">
            One or more variables. whose values are to be inserted in <paramref name="format"/>.
            </param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the objects are not equal.</exception>
            <remarks>The assertion fails if <c>object.Equals(expected, actual)</c> returns <c>false</c>.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreNotEqual(System.Double,System.Double,System.Double)">
            <summary>
            Asserts that two <c>double</c> values are not equal within a specified precision.
            </summary>
            <overloads>Asserts that two values are not equal.</overloads>
            <param name="expected">The expected value.</param>
            <param name="actual">The value to be tested.</param>
            <param name="delta">The test's precision. This value must be positive.</param>
            <remarks>The assertion fails if the absolute value of the difference between the expected
            and actual values is less than or equal to delta. </remarks>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the expected and actual values are equal.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If delta is negative.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreNotEqual(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Asserts that two <c>double</c> values are not equal within a specified precision, with a specified
            message in the exception object.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The value to be tested.</param>
            <param name="delta">The test's precision. This value must be positive.</param>
            <param name="message">The message string.</param>
            <remarks>The assertion fails if the absolute value of the difference between the expected
            and actual values is less than or equal to delta. </remarks>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the expected and actual values are equal.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If delta is negative.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreNotEqual(System.Double,System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Asserts that two <c>double</c> values are not equal within a specified precision, with a specified
            message in the exception object.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The value to be tested.</param>
            <param name="delta">The test's precision. This value must be positive.</param>
            <param name="format">
            A message format string. The syntax for this string is identical to the format string
            used by <c>Console.Writeline</c>. In particular, insert "{0}", "{1}" and so on at appropriate
            locations in the string to represent the values of the variables in the <paramref name="args"/> array.
            </param>
            <param name="args">
            One or more variables. whose values are to be inserted in <paramref name="format"/>.
            </param>
            <remarks>The assertion fails if the absolute value of the difference between the expected
            and actual values is less than or equal to delta. </remarks>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the expected and actual values are equal.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If delta is negative.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreNotEqual(System.Single,System.Single,System.Single)">
            <summary>
            Asserts that two <c>float</c> values are not equal within a specified precision.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The value to be tested.</param>
            <param name="delta">The test's precision. This value must be positive.</param>
            <remarks>The assertion fails if the absolute value of the difference between the expected
            and actual values is less than or equal to delta. </remarks>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the expected and actual values are equal.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If delta is negative.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreNotEqual(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Asserts that two <c>float</c> values are not equal within a specified precision, with a specified
            message in the exception object.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The value to be tested.</param>
            <param name="delta">The test's precision. This value must be positive.</param>
            <param name="message">The message string.</param>
            <remarks>The assertion fails if the absolute value of the difference between the expected
            and actual values is less than or equal to delta. </remarks>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the expected and actual values are equal.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If delta is negative.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreNotEqual(System.Single,System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Asserts that two <c>float</c> values are not equal within a specified precision, with a specified
            message in the exception object.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The value to be tested.</param>
            <param name="delta">The test's precision. This value must be positive.</param>
            <param name="format">
            A message format string. The syntax for this string is identical to the format string
            used by <c>Console.Writeline</c>. In particular, insert "{0}", "{1}" and so on at appropriate
            locations in the string to represent the values of the variables in the <paramref name="args"/> array.
            </param>
            <param name="args">
            One or more variables. whose values are to be inserted in <paramref name="format"/>.
            </param>
            <remarks>The assertion fails if the absolute value of the difference between the expected
            and actual values is less than or equal to delta. </remarks>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the expected and actual values are equal.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If delta is negative.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreNotEqual(System.String,System.String,System.Boolean)">
            <summary>
            Asserts that two strings are not equal.
            </summary>
            <param name="expected">The expected string.</param>
            <param name="actual">The actual string.</param>
            <param name="ignoreCase">Set this value to <c>true</c> for case-sensitive comparison
            and <d>false</d> otherwise.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the strings are equal.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreNotEqual(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Asserts that two strings are not equal, with a specified message in the exception object.
            </summary>
            <param name="expected">The expected string.</param>
            <param name="actual">The actual string.</param>
            <param name="ignoreCase">Set this value to <c>true</c> for case-sensitive comparison
            and <d>false</d> otherwise.</param>
            <param name="message">The message string.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the strings are equal.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreNotEqual(System.String,System.String,System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that two strings are not equal, with a specified message in the exception object.
            </summary>
            <param name="expected">The expected string.</param>
            <param name="actual">The actual string.</param>
            <param name="ignoreCase">Set this value to <c>true</c> for case-sensitive comparison
            and <d>false</d> otherwise.</param>
            <param name="format">
            A message format string. The syntax for this string is identical to the format string
            used by <c>Console.Writeline</c>. In particular, insert "{0}", "{1}" and so on at appropriate
            locations in the string to represent the values of the variables in the <paramref name="args"/> array.
            </param>
            <param name="args">
            One or more variables. whose values are to be inserted in <paramref name="format"/>.
            </param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the strings are equal.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreNotEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            Asserts that a culture-specific comparison of two strings is false.
            </summary>
            <param name="expected">The expected string.</param>
            <param name="actual">The actual string.</param>
            <param name="ignoreCase">Set this value to <c>true</c> for case-sensitive comparison
            and <d>false</d> otherwise.</param>
            <param name="culture">A <c>System.Globalization.CultureInfo</c> object that contains the
            culture-specific comparison information.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the strings are equal.</exception>
            <remarks>For more information, see <c>System.String.Compare</c>.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreNotEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo,System.String)">
            <summary>
            Asserts that a culture-specific comparison of two strings is false, with a specified message
            in the exception object.
            </summary>
            <param name="expected">The expected string.</param>
            <param name="actual">The actual string.</param>
            <param name="ignoreCase">Set this value to <c>true</c> for case-sensitive comparison
            and <d>false</d> otherwise.</param>
            <param name="culture">A <c>System.Globalization.CultureInfo</c> object that contains the
            culture-specific comparison information.</param>
            <param name="message">The message string.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the strings are equal.</exception>
            <remarks>For more information, see <c>System.String.Compare</c>.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreNotEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo,System.String,System.Object[])">
            <summary>
            Asserts that a culture-specific comparison of two strings is false, with a specified message
            in the exception object.
            </summary>
            <param name="expected">The expected string.</param>
            <param name="actual">The actual string.</param>
            <param name="ignoreCase">Set this value to <c>true</c> for case-sensitive comparison
            and <d>false</d> otherwise.</param>
            <param name="culture">A <c>System.Globalization.CultureInfo</c> object that contains the
            culture-specific comparison information.</param>
            <param name="format">
            A message format string. The syntax for this string is identical to the format string
            used by <c>Console.Writeline</c>. In particular, insert "{0}", "{1}" and so on at appropriate
            locations in the string to represent the values of the variables in the <paramref name="args"/> array.
            </param>
            <param name="args">
            One or more variables. whose values are to be inserted in <paramref name="format"/>.
            </param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the strings are equal.</exception>
            <remarks>For more information, see <c>System.String.Compare</c>.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreNotEqual(System.Object,System.Object)">
            <summary>
            Asserts that two object instances are not equal.
            </summary>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the objects are equal.</exception>
            <remarks>The assertion fails if <c>object.Equals(expected, actual)</c> returns <c>true</c>.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreNotEqual(System.Object,System.Object,System.String)">
            <summary>
            Asserts that two object instances are not equal, with a specified message in the exception object.
            </summary>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <param name="message">The message string.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the objects are equal.</exception>
            <remarks>The assertion fails if <c>object.Equals(expected, actual)</c> returns <c>true</c>.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreNotEqual(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that two object instances are not equal, with a specified message in the exception object.
            </summary>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <param name="format">
            A message format string. The syntax for this string is identical to the format string
            used by <c>Console.Writeline</c>. In particular, insert "{0}", "{1}" and so on at appropriate
            locations in the string to represent the values of the variables in the <paramref name="args"/> array.
            </param>
            <param name="args">
            One or more variables. whose values are to be inserted in <paramref name="format"/>.
            </param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the objects are equal.</exception>
            <remarks>The assertion fails if <c>object.Equals(expected, actual)</c> returns <c>true</c>.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreNotEqual``1(``0,``0)">
            <summary>
            Asserts that two object instances with a specified type are not equal.
            </summary>
            <typeparam name="T">The objects' type.</typeparam>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the objects are equal.</exception>
            <remarks>The assertion fails if <c>object.Equals(expected, actual)</c> returns <c>true</c>.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreNotEqual``1(``0,``0,System.String)">
            <summary>
            Asserts that two object instances with a specified type are not equal, with a specified message
            in the exception object.
            </summary>
            <typeparam name="T">The object's type.</typeparam>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <param name="message">The message string.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the objects are equal.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreNotEqual``1(``0,``0,System.String,System.Object[])">
            <summary>
            Asserts that two object instances with a specified type are not equal, with a specified message
            in the exception object.
            </summary>
            <typeparam name="T">The objects' type.</typeparam>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <param name="format">
            A message format string. The syntax for this string is identical to the format string
            used by <c>Console.Writeline</c>. In particular, insert "{0}", "{1}" and so on at appropriate
            locations in the string to represent the values of the variables in the <paramref name="args"/> array.
            </param>
            <param name="args">
            One or more variables. whose values are to be inserted in <paramref name="format"/>.
            </param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the objects are equal.</exception>
            <remarks>The assertion fails if <c>object.Equals(expected, actual)</c> returns <c>true</c>.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreSame(System.Object,System.Object)">
            <summary>
            Asserts that two object instances are the same instance.
            </summary>
            <overloads>Asserts that two object instances are the same instance.</overloads>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the objects are not the same instance.</exception>
            <remarks>The assertion fails if <c>object.ReferenceEquals(expected, actual)</c> returns <c>false</c>.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreSame(System.Object,System.Object,System.String)">
            <summary>
            Asserts that two object instances are the same instance, with a specified message in the
            exception object.
            </summary>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <param name="message">The message string.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the objects are not the same instance.</exception>
            <remarks>The assertion fails if <c>object.ReferenceEquals(expected, actual)</c> returns <c>false</c>.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreSame(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that two object instances are the same instance, with a specified message in the
            exception object.
            </summary>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <param name="format">
            A message format string. The syntax for this string is identical to the format string
            used by <c>Console.Writeline</c>. In particular, insert "{0}", "{1}" and so on at appropriate
            locations in the string to represent the values of the variables in the <paramref name="args"/> array.
            </param>
            <param name="args">
            One or more variables. whose values are to be inserted in <paramref name="format"/>.
            </param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the objects are not the same instance.</exception>
            <remarks>The assertion fails if object.ReferenceEquals(expected, actual) returns <c>false</c>.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreNotSame(System.Object,System.Object)">
            <summary>
            Asserts that two object instances are not the same instance.
            </summary>
            <overloads>Asserts that two object instances are not the same instance.</overloads>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the objects are the same instance.</exception>
            <remarks>The assertion fails if <c>object.ReferenceEquals(expected, actual)</c> returns <c>true</c>.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreNotSame(System.Object,System.Object,System.String)">
            <summary>
            Asserts that two object instances are not the same instance, with a specified message in the
            exception object.
            </summary>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <param name="message">The message string.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the objects are the same instance.</exception>
            <remarks>The assertion fails if <c>object.ReferenceEquals(expected, actual)</c> returns <c>true</c>.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreNotSame(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that two object instances are not the same instance, with a specified message in the
            exception object.
            </summary>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <param name="format">
            A message format string. The syntax for this string is identical to the format string
            used by <c>Console.Writeline</c>. In particular, insert "{0}", "{1}" and so on at appropriate
            locations in the string to represent the values of the variables in the <paramref name="args"/> array.
            </param>
            <param name="args">
            One or more variables. whose values are to be inserted in <paramref name="format"/>.
            </param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the objects are the same instance.</exception>
            <remarks>The assertion fails if object.ReferenceEquals(expected, actual) returns <c>true</c>.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.IsInstanceOfType(System.Object,System.Type)">
            <summary>
            Asserts that an object is a specified type.
            </summary>
            <overloads>Asserts that an object is a specified type.</overloads>
            <param name="value">An object.</param>
            <param name="expectedType">The expected type.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the object is not the specified type.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.IsInstanceOfType(System.Object,System.Type,System.String)">
            <summary>
            Asserts that an object is a specified type, with a specified message in the exception object.
            </summary>
            <param name="value">An object.</param>
            <param name="expectedType">The expected type.</param>
            <param name="message">The message string.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the object is not the specified type.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.IsInstanceOfType(System.Object,System.Type,System.String,System.Object[])">
            <summary>
            Asserts that an object is a specified type, with a specified message in the exception object.
            </summary>
            <param name="value">An object.</param>
            <param name="expectedType">The expected type.</param>
            <param name="format">
            A message format string. The syntax for this string is identical to the format string
            used by <c>Console.Writeline</c>. In particular, insert "{0}", "{1}" and so on at appropriate
            locations in the string to represent the values of the variables in the <paramref name="args"/> array.
            </param>
            <param name="args">
            One or more variables. whose values are to be inserted in <paramref name="format"/>.
            </param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the object is not the specified type.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.IsNotInstanceOfType(System.Object,System.Type)">
            <summary>
            Asserts that an object is not a specified type.
            </summary>
            <overloads>Asserts that an object is not a specified type.</overloads>
            <param name="value">An object.</param>
            <param name="expectedType">The expected type.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the object is the specified type.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.IsNotInstanceOfType(System.Object,System.Type,System.String)">
            <summary>
            Asserts that an object is not a specified type, with a specified message in the exception object.
            </summary>
            <param name="value">An object.</param>
            <param name="expectedType">The expected type.</param>
            <param name="message">The message string.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the object is the specified type.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.IsNotInstanceOfType(System.Object,System.Type,System.String,System.Object[])">
            <summary>
            Asserts that an object is not a specified type, with a specified message in the exception object.
            </summary>
            <param name="value">An object.</param>
            <param name="expectedType">The expected type.</param>
            <param name="format">
            A message format string. The syntax for this string is identical to the format string
            used by <c>Console.Writeline</c>. In particular, insert "{0}", "{1}" and so on at appropriate
            locations in the string to represent the values of the variables in the <paramref name="args"/> array.
            </param>
            <param name="args">
            One or more variables. whose values are to be inserted in <paramref name="format"/>.
            </param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the object is the specified type.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.Equals(System.Object,System.Object)">
             <summary>
            Don't use this method, use <c>AreEqual</c> instead.
             </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreEqual``1(``0,``0,Microsoft.Pex.Framework.PexEqualityComparison{``0})">
            <summary>
            Asserts that two object instances with a specified type are equal,
            based on an <c>EqualityComparison</c> delegate.
            </summary>
            <typeparam name="T">The objects' type.</typeparam>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <param name="comparison">An <c>EqualityComparison</c> delegate, which returns <c>true</c>
            if the two objects are equal and <c>false</c> otherwise.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the objects are not equal.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreNotEqual``1(``0,``0,Microsoft.Pex.Framework.PexEqualityComparison{``0})">
            <summary>
            Asserts that two object instances with a specified type are not equal,
            based on an <c>EqualityComparison</c> delegate.
            </summary>
            <typeparam name="T">The objects' type.</typeparam>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <param name="comparison">An <c>EqualityComparison</c> delegate, which returns <c>true</c>
            if the two objects are equal and <c>false</c> otherwise.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the objects are equal.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.IsNullOrEmpty(System.String)">
            <summary>
            Asserts that a specified string is null or empty.
            </summary>
            <overloads>Asserts that a specified object is null or empty.</overloads>
            <param name="value">The string.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the the string is not null or of zero length.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.IsNullOrEmpty``1(``0[])">
            <summary>
            Asserts that an array of a specified type is null or empty.
            </summary>
            <typeparam name="T">The array type.</typeparam>
            <param name="value">The array.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the the array is not null or of zero length.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Asserts that a collection of a specified type is null empty.
            </summary>
            <typeparam name="T">The collection type.</typeparam>
            <param name="value">The collection.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the the collection is not null or of zero length.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.IsNotNullOrEmpty(System.String)">
            <summary>
            Asserts that a specified string is not null or empty.
            </summary>
            <param name="value">The string.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the the string is null or of zero length.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.IsNotNullOrEmpty``1(``0[])">
            <summary>
            Asserts that an array of a specified type is not null or empty.
            </summary>
            <typeparam name="T">The array type.</typeparam>
            <param name="value">The array.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the the array is null or of zero length.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.IsNotNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Asserts that a collection of a specified type is not null or empty.
            </summary>
            <typeparam name="T">The collection type.</typeparam>
            <param name="value">The collection.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the the collection is null or of zero length.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreElementsNotNull``1(``0[])">
            <summary>
            Asserts that no elements of an array are null.
            </summary>
            <overloads>Asserts that no elements of an array are null.</overloads>
            <typeparam name="T">The array type.</typeparam>
            <param name="value">The array.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If any elements are null.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreElementsNotNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Asserts that no elements of an <c>IEnumerable</c> collection are null.
            </summary>
            <typeparam name="T">The collection type.</typeparam>
            <param name="value">The collection.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If any elements are null.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreElementsEqual``1(``0[],System.Int32,System.Int32,``0[],System.Int32,Microsoft.Pex.Framework.PexEqualityComparison{``0})">
            <summary>
            Asserts that every pair of elements from a subset of two arrays are equal.
            </summary>
            <overloads>Asserts that all pairs of elements from two arrays are equal.</overloads>
            <typeparam name="T">The array type.</typeparam>
            <param name="left">The "left" array.</param>
            <param name="startIndex">The index at which to start comparing for the left array.</param>
            <param name="count">The number of elements to be compared.</param>
            <param name="right">The "right" array.</param>
            <param name="rightStartIndex">The index at which to start comparing for the right array.</param>
            <param name="comparison">An <c>EqualityComparison</c> delegate that compares each pair of elements
            and returns <c>true</c> if they are equal.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If any of the compared elements are not equal.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreElementsEqual``1(``0[],``0[],Microsoft.Pex.Framework.PexEqualityComparison{``0})">
            <summary>
            Asserts that every pair of elements from two arrays are equal.
            </summary>
            <typeparam name="T">The array type.</typeparam>
            <param name="left">An array.</param>
            <param name="right">An array.</param>
            <param name="comparison">An <c>EqualityComparison</c> delegate that compares each pair of elements
            and returns <c>true</c> if they are equal.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If any of the compared elements are not equal or
            if the arrays are not the same length.</exception>
            <remarks></remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreElementsEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},Microsoft.Pex.Framework.PexEqualityComparison{``0})">
            <summary>
            Asserts that every pair of elements from two <c>IEnumerable</c> collections are equal.
            </summary>
            <typeparam name="T">The array type.</typeparam>
            <param name="left">A collection.</param>
            <param name="right">A collection.</param>
            <param name="comparison">An <c>EqualityComparison</c> delegate that compares each pair of elements
            and returns <c>true</c> if they are equal.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If any of the compared elements are not equal or
            if the collections are not the same length.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.TrueForAll``1(``0[],System.Predicate{``0})">
            <summary>
            Asserts that every element of an array meets a user-defined criteria.
            </summary>
            <overloads>Asserts that every element of an array meets a user-defined criteria.</overloads>
            <typeparam name="T">The array type.</typeparam>
            <param name="items">An array.</param>
            <param name="predicate">A <c>Predicate</c> delegate that returns <c>true</c> if an element meets
            the user's criteria, and <c>false</c> otherwise.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If <paramref name="predicate"/> returns <c>false</c>
            for any element.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.TrueForAll(System.Int32,System.Int32,System.Predicate{System.Int32})">
            <summary>
            Asserts that all of a specified series of integers meets a user-defined criteria.
            </summary>
            <param name="start">The starting integer.</param>
            <param name="length">The number of integers to be evaluated. This value must be positive.</param>
            <param name="predicate">A <c>Predicate</c> delegate that returns <c>true</c> if an integer meets
            the user's criteria, and <c>false</c> otherwise.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If <paramref name="predicate"/> returns <c>false</c>
            for any of the specified integers.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.TrueForAny``1(``0[],System.Predicate{``0})">
            <summary>
            Asserts that at least one element of an array meets a user-defined criteria.
            </summary>
            <overloads>Asserts that at least one element of an array meets a user-defined criteria.</overloads>
            <typeparam name="T">The array type.</typeparam>
            <param name="items">An array.</param>
            <param name="predicate">A <c>Predicate</c> delegate that returns <c>true</c> if an element meets
            the user's criteria, and <c>false</c> otherwise.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If <paramref name="predicate"/> returns <c>false</c>
            for any element.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.TrueForAny(System.Int32,System.Int32,System.Predicate{System.Int32})">
            <summary>
            Asserts that at least one element of a specified series of integers meets
            a user-defined criteria.
            </summary>
            <param name="start">The starting integer.</param>
            <param name="length">The number of integers to be evaluated. This value must be positive.</param>
            <param name="predicate">A <c>Predicate</c> delegate that returns <c>true</c> if an integer meets
            the user's criteria, and <c>false</c> otherwise.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If <paramref name="predicate"/> returns <c>false</c>
            for any of the specified integers.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.TrueForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Asserts that all elements of an <c>IEnumerable</c> collection
            meet a user-defined criteria.
            </summary>
            <typeparam name="T">The collection type.</typeparam>
            <param name="items">A collection.</param>
            <param name="predicate">A <c>Predicate</c> delegate that returns <c>true</c> if an element meets
            the user's criteria, and <c>false</c> otherwise.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If <paramref name="predicate"/> returns <c>false</c>
            for any element.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.TrueForAny``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Asserts that at least one element of an <c>IEnumerable</c> collection
            meets a user-defined criteria.
            </summary>
            <typeparam name="T">The collection type.</typeparam>
            <param name="items">A collection.</param>
            <param name="predicate">A <c>Predicate</c> delegate that returns <c>true</c> if an element meets
            the user's criteria, and <c>false</c> otherwise.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If <paramref name="predicate"/> returns <c>false</c>
            for any element.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.InRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Assumes that value in within [minInclusive, maxExclusive).
            </summary>
            <param name="value"></param>
            <param name="minInclusive"></param>
            <param name="maxExclusive"></param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.Throws``1(Microsoft.Pex.Framework.PexAction)">
            <summary>
            Asserts that executing a user-defined action throws the correct exception.
            </summary>
            <overloads>Asserts that executing a user-defined action throws the correct exception.</overloads>
            <typeparam name="T">The exception type.</typeparam>
            <param name="action">A <see cref="T:Microsoft.Pex.Framework.PexAction"/> delegate that performs a user-defined action.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the action throws an exception other than <typeparamref name="T"/>, or no exception.</exception>
            <returns>Returns the exception object.</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.Throws``1(Microsoft.Pex.Framework.PexAction,System.Predicate{``0})">
            <summary>
            Asserts that executing a user-defined action throws the correct exception.
            </summary>
            <typeparam name="T">The exception type.</typeparam>
            <param name="action">A <see cref="T:Microsoft.Pex.Framework.PexAction"/> delegate that performs a user-defined action.</param>
            <param name="exceptionValidator">A <see cref="T:Microsoft.Pex.Framework.PexAssert.Predicate"/> delegate that returns <c>true</c> if the correct
            exception was thrown and <c>false</c> otherwise.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the action throws the wrong exception,
            or no exception.</exception>
            <returns>Returns the exception object.</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.Throws(Microsoft.Pex.Framework.PexAction,System.Type)">
            <summary>
            Asserts that executing a user-defined action throws the correct exception.
            </summary>
            <param name="exceptionType">The exception type.</param>
            <param name="action">A <see cref="T:Microsoft.Pex.Framework.PexAction"/> delegate that performs a user-defined action.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the action throws the wrong exception, or no exception.</exception>
            <returns>Returns the exception object.</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.Throws(Microsoft.Pex.Framework.PexAction,System.Predicate{System.Exception})">
            <summary>
            Asserts that executing a user-defined action throws the correct exception.
            </summary>
            <param name="action">A <see cref="T:Microsoft.Pex.Framework.PexAction"/> delegate that performs a user-defined action.</param>
            <param name="exceptionValidator">A <see cref="T:Microsoft.Pex.Framework.PexAssert.Predicate"/> delegate that returns <c>true</c> if the correct
            exception was thrown and <c>false</c> otherwise.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the action throws the wrong exception, or no exception.</exception>
            <returns>Returns the exception object.</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.ThrowAllowed``1(Microsoft.Pex.Framework.PexAction)">
            <summary>
            Asserts that executing a user-defined action throws the correct exception, if the action throws an exception.
            </summary>
            <overloads>Asserts that executing a user-defined action throws the correct exception,
            if the action throws an exception.</overloads>
            <typeparam name="T">The exception type.</typeparam>
            <param name="action">A <see cref="T:Microsoft.Pex.Framework.PexAction"/> delegate that performs a user-defined action.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the action throws an exception other
            than <typeparamref name="T"/>.</exception>
            <returns>Returns the exception object.</returns>
            <remarks>If <paramref name="action"/> does not throw an exception, <c>ThrowAllowed</c> does not throw an
            exception.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.ThrowAllowed(Microsoft.Pex.Framework.PexAction,System.Type)">
            <summary>
            Asserts that executing a user-defined action throws the correct exception, if the action throws an exception.
            </summary>
            <param name="action">A <see cref="T:Microsoft.Pex.Framework.PexAction"/> delegate that performs a user-defined action.</param>
            <param name="exceptionType">The exception type.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the action throws the wrong exception, or no exception.</exception>
            <returns>Returns the exception object.</returns>
            <remarks>If <paramref name="action"/> does not throw an exception, <c>ThrowAllowed</c> does not throw an
            exception.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.ThrowAllowed(Microsoft.Pex.Framework.PexAction,System.Predicate{System.Exception})">
            <summary>
            Asserts that executing a user-defined action throws the correct exception, if the action throws an exception.
            </summary>
            <param name="action">A <see cref="T:Microsoft.Pex.Framework.PexAction"/> delegate that performs a user-defined action.</param>
            <param name="exceptionValidator">A <see cref="T:Microsoft.Pex.Framework.PexAssert.Predicate"/> delegate that returns <c>true</c> if the correct
            exception was thrown and <c>false</c> otherwise.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the action throws the wrong exception.</exception>
            <returns>Returns the exception object.</returns>
            <remarks>If <paramref name="action"/> does not throw an exception, <c>ThrowAllowed</c> does not throw an
            exception.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.Inconclusive">
            <summary>
            Throws an inconclusive exception
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.Inconclusive(System.String)">
            <summary>
            Throws an inconclusive exception message
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.Implies(System.Boolean,Microsoft.Pex.Framework.PexAction)">
            <summary>
            Asserts implication is true (if <paramref name="value"/> is true,
            <paramref name="impliedAction"/> should executed without exception).
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.ImpliesEventually(System.Boolean,Microsoft.Pex.Framework.PexAction)">
            <summary>
            Asserts implication is true (if <paramref name="value"/> is true,
            <paramref name="impliedAction"/> should executed without exception)
            and that the implication should be reached eventually.
            </summary>
            <remarks>Must be used in combination with <see cref="T:Microsoft.Pex.Framework.PexAssertReachEventuallyAttribute"/>.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.ImpliesEventually(System.Int32,System.Boolean,Microsoft.Pex.Framework.PexAction)">
            <summary>
            Asserts implication is true (if <paramref name="value"/> is true,
            <paramref name="impliedAction"/> should executed without exception)
            and that the implication should be reached eventually.
            </summary>
            <remarks>Must be used in combination with <see cref="T:Microsoft.Pex.Framework.PexAssertReachEventuallyAttribute"/>.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.ImpliesEventually(System.String,System.Boolean,Microsoft.Pex.Framework.PexAction)">
            <summary>
            Asserts implication is true (if <paramref name="value"/> is true,
            <paramref name="impliedAction"/> should executed without exception)
            and that the implication should be reached eventually.
            </summary>
            <remarks>Must be used in combination with <see cref="T:Microsoft.Pex.Framework.PexAssertReachEventuallyAttribute"/>.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.ImpliesIsTrue(System.Boolean,Microsoft.Pex.Framework.PexAssert.Predicate)">
            <summary>
            Asserts implication is true (if <paramref name="value"/> is true,
            <paramref name="impliedValue"/> should hold).
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.ImpliesIsTrue(System.Boolean,Microsoft.Pex.Framework.PexAssert.Predicate,System.String)">
            <summary>
            Asserts implication is true (if <paramref name="value"/> is true,
            <paramref name="impliedValue"/> should hold).
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.ImpliesIsTrue(System.Boolean,Microsoft.Pex.Framework.PexAssert.Predicate,System.String,System.Object[])">
            <summary>
            Asserts implication is true (if <paramref name="value"/> is true,
            <paramref name="impliedValue"/> should hold).
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.Case(System.Boolean)">
            <summary>
            Returns a functional table builder tha can be used to build input output tables.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.Catch``1(Microsoft.Pex.Framework.PexAssert.Func{``0})">
            <summary>
            Executes a specified delegate and returns the result.
            </summary>
            <typeparam name="T">The return type.</typeparam>
            <param name="function">A <c>Func</c> delegate that performs a user-defined action
            and returns a value of type T.</param>
            <returns>Return a <see cref="T:Microsoft.Pex.Framework.PexAssert.PexCatchResult"/> &lt;T&gt; structure that contains a return value or,
            if an exception was thrown, an exception object.</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.Catch(Microsoft.Pex.Framework.PexAction)">
            <summary>
            Executes a specified delegate and returns the result.
            </summary>
            <param name="action">A <see cref="T:Microsoft.Pex.Framework.PexAction"/> delegate that performs a user-defined action.</param>
            <returns>Return a <see cref="T:Microsoft.Pex.Framework.PexAssert.PexCatchResult"/>  structure that contains an exception object,
            if an exception was thrown.</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreBehaviorsEqual(Microsoft.Pex.Framework.PexAction,Microsoft.Pex.Framework.PexAction,Microsoft.Pex.Framework.PexEqualityComparison{System.Exception})">
            <summary>
            Asserts that the observable behavior of two delegates is the same.
            </summary>
            <overloads>Asserts that the observable behavior of two delegates is the same.</overloads>
            <param name="left">A <see cref="T:Microsoft.Pex.Framework.PexAction"/> delegate that performs a user-defined action.</param>
            <param name="right">A <see cref="T:Microsoft.Pex.Framework.PexAction"/> delegate that performs a user-defined action.</param>
            <param name="exceptionComparison">An <c>EqualityComparison</c> delegate that returns
            <c>true</c> if the thrown exceptions are the same and <c>false</c> otherwise.
            </param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the delegates do not have the same behavior.</exception>
            <remarks>"Same behavior" is defined as both delegates throwing the same exception or neither
            delegate throwing an exception.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreBehaviorsEqual(Microsoft.Pex.Framework.PexAction,Microsoft.Pex.Framework.PexAction)">
            <summary>
            Asserts that the observable behavior of two delegates is the same.
            </summary>
            <param name="left">A <see cref="T:Microsoft.Pex.Framework.PexAction"/> delegate that performs a user-defined action.</param>
            <param name="right">A <see cref="T:Microsoft.Pex.Framework.PexAction"/> delegate that performs a user-defined action.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the delegates do not have the same behavior.</exception>
            <remarks>"Same behavior" is defined as both delegates throwing an exception or neither
            delegate throwing an exception. The exceptions can have different types.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreBehaviorsEqual``1(Microsoft.Pex.Framework.PexAssert.Func{``0},Microsoft.Pex.Framework.PexAssert.Func{``0},Microsoft.Pex.Framework.PexEqualityComparison{``0},Microsoft.Pex.Framework.PexEqualityComparison{System.Exception})">
            <summary>
            Asserts that the observable behavior of two delegates is the same.
            </summary>
            <typeparam name="T">The delegates' return type.</typeparam>
            <param name="left">A <c>Func</c> delegate that performs a user-defined action and returns a
            value of type T.</param>
            <param name="right">A <c>Func</c> delegate that performs a user-defined action and returns a
            value of type T.</param>
            <param name="resultComparison">An <c>EqualityComparison</c> delegate that returns <c>true</c> if the
            delegates' return values are equal and <c>false</c> otherwise.</param>
            <param name="exceptionComparison">An <c>EqualityComparison</c> delegate that returns
            <c>true</c> if the thrown exceptions are the same and <c>false</c> otherwise.
            </param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the delegates do not have the same behavior.</exception>
            <remarks>"Same behavior" is defined as both delegates returning the same value or
            both delegates throwing the same exception.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreBehaviorsEqual``1(Microsoft.Pex.Framework.PexAssert.Func{``0},Microsoft.Pex.Framework.PexAssert.Func{``0},Microsoft.Pex.Framework.PexEqualityComparison{``0})">
            <summary>
            Asserts that the observable behavior of two delegates is the same.
            </summary>
            <typeparam name="T">The delegates' return type.</typeparam>
            <param name="left">A <c>Func</c> delegate that performs a user-defined action and returns a
            value of type T.</param>
            <param name="right">A <c>Func</c> delegate that performs a user-defined action and returns a
            value of type T.</param>
            <param name="resultComparison">An <c>EqualityComparison</c> delegate that returns <c>true</c> if the
            delegates' return values are equal and <c>false</c> otherwise.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the delegates do not have the same behavior.</exception>
            <remarks>"Same behavior" is defined as both delegates returning the same value.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreBehaviorsEqual``1(Microsoft.Pex.Framework.PexAssert.Func{``0},Microsoft.Pex.Framework.PexAssert.Func{``0})">
            <summary>
            Asserts that the observable behavior of two delegates is the same.
            </summary>
            <typeparam name="T">The delegates' return type.</typeparam>
            <param name="left">A <c>Func</c> delegate that performs a user-defined action and returns a
            value of type T.</param>
            <param name="right">A <c>Func</c> delegate that performs a user-defined action and returns a
            value of type T.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the delegates do not have the same behavior.</exception>
            <remarks>"Same behavior" is defined as both delegates returning the same exception type,
            as determined by the default <c>EqualityComparer</c> method.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreDistinct``1(``0[],Microsoft.Pex.Framework.PexEqualityComparison{``0})">
            <summary>
            Asserts that all elements of an array are distinct.
            </summary>
            <overloads>Asserts that all elements of an array are distinct.</overloads>
            <typeparam name="T">The array type.</typeparam>
            <param name="values">An array.</param>
            <param name="equalityComparer">An <c>EqualityComparison</c> delegate that returns
            <c>true</c> if two elements are distinct and <c>false</c> otherwise.
            </param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If any two elements are not distinct.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreDistinctReferences``1(``0[])">
            <summary>
            Asserts that all elements of an array are distinct object references.
            </summary>
            <typeparam name="T">The array type.</typeparam>
            <param name="values">An array.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If any two elements are not distinct.</exception>
            <remarks>The method determines whether two objects are distinct references by calling
            <c>Object.ReferenceEquals</c>.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreDistinctValues``1(``0[])">
            <summary>
            Asserts that no pair of elements from an array are equal.
            </summary>
            <typeparam name="T">The array type.</typeparam>
            <param name="values">An array.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If any two elements are equal.</exception>
            <remarks>The method determines whether two elements are equal by calling
            <c>Object.Equals</c>.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.EnumIsDefined``1(``0)">
            <summary>
            Assumes a value is defined in the enumeration TEnum
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.ReachEventually">
            <summary>
            Specifies that the default location in the program should be reached eventually.
            </summary>
            <overloads>Used to specify a location in the program that should be reached eventually.</overloads>
            <remarks>Must be used in combination with <see cref="T:Microsoft.Pex.Framework.PexAssertReachEventuallyAttribute"/>.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.ReachEventually(System.String)">
            <summary>
            Specifies a location in the program that should be reached eventually.
            </summary>
            <param name="location">
            A string that identifies a particular <c>ReachEventually</c> instance. 
            </param>
            <remarks>This method identifies a particular goal in the code, and is typically used to identify multiple
            code branches that should be reached by tests. To use <c>ReachEventually</c>, annotate the method that
            contains the code branches with <see cref="T:Microsoft.Pex.Framework.PexAssertReachEventuallyAttribute"/>, and
            define the location string in the attribute. Then call <c>ReachEventually</c> in each of the branches, with
            <paramref name="location"/> set to one of the attribute's location strings.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.ReachEventually(System.Int32)">
            <summary>
            Specifies a location in the program that should be reached eventually.
            </summary>
            <param name="location">An integer that identifies a particular <c>ReachEventually</c> instance.</param>
            <remarks>This method identifies a particular goal in the code, and is typically used to identify multiple
            code branches that should be reached by tests. To use <c>ReachEventually</c>, annotate the method that
            contains the code branches with <see cref="T:Microsoft.Pex.Framework.PexAssertReachEventuallyAttribute"/> set to the number of goals.
             Call <c>ReachEventually</c> in each of the branches, with <paramref name="location"/> set to one of the
             goal numbers. The goals are numbered in sequence, starting with 0.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.ClearReached">
            <summary>
            Clears the Reached event
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreRoundtripable``2(``0,Microsoft.Pex.Framework.PexAssert.Func{``0,``1},Microsoft.Pex.Framework.PexAssert.Func{``1,``0})">
            <summary>
            Asserts that forward and inverse define a roundtrip-able API
            such that inverse(forward(value)) = value;
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="R"></typeparam>
            <param name="f">the function f</param>
            <param name="fm1">the inverse of f, f-1</param>
            <param name="x"></param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreRoundtripableAfterNormalization``2(``0,Microsoft.Pex.Framework.PexAssert.Func{``0,``1},Microsoft.Pex.Framework.PexAssert.Func{``1,``0})">
            <summary>
            Asserts that forward and inverse define a normalized roundtrip-able API
            such that transform(inverse(transform(value)) = transform(value);
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="R"></typeparam>
            <param name="f">the function f</param>
            <param name="fm1">the inverse of f, f-1</param>
            <param name="x"></param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.IsIdempotent``1(``0,Microsoft.Pex.Framework.PexAssert.Func{``0,``0})">
            <summary>
            Asserts that the specified delegate is idempotent.
            </summary>
            <typeparam name="T">The delegate's return type and input type.</typeparam>
            <param name="f">The input value.</param>
            <param name="x">A <c>Func</c> delegate.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If any two elements are not distinct.</exception>
            <remarks>A delegate is idempotent if delegate(value) == delegate(delegate(value)).</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreEqual(System.Int32,System.Int32)">
            <summary>
            Checks whether two objects are equal
            </summary>
            <param name="expected">the expected value</param>
            <param name="actual">the actual value</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreElementsEqual(System.Int32[],System.Int32[])">
            <summary>
            Checks that arrays have equal elements.
            </summary>
            <param name="expected">the expected values</param>
            <param name="actual">the actual values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreDistinctValues(System.Int32[])">
            <summary>
            Assumes that elements are distinct.
            </summary>
            <param name="values">the values to compare</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.Overlap(System.Int32[],System.Int32[])">
            <summary>
            Checks that some elements of the array are equal
            </summary>
            <param name="left">the left values</param>
            <param name="right">the right values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreDisjoint(System.Int32[],System.Int32[])">
            <summary>
            Checks that no element of each array are equal
            </summary>
            <param name="left">the left values</param>
            <param name="right">the right values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreEqual(System.Int64,System.Int64)">
            <summary>
            Checks whether two objects are equal
            </summary>
            <param name="expected">the expected value</param>
            <param name="actual">the actual value</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreElementsEqual(System.Int64[],System.Int64[])">
            <summary>
            Checks that arrays have equal elements.
            </summary>
            <param name="expected">the expected values</param>
            <param name="actual">the actual values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreDistinctValues(System.Int64[])">
            <summary>
            Assumes that elements are distinct.
            </summary>
            <param name="values">the values to compare</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.Overlap(System.Int64[],System.Int64[])">
            <summary>
            Checks that some elements of the array are equal
            </summary>
            <param name="left">the left values</param>
            <param name="right">the right values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreDisjoint(System.Int64[],System.Int64[])">
            <summary>
            Checks that no element of each array are equal
            </summary>
            <param name="left">the left values</param>
            <param name="right">the right values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreEqual(System.Int16,System.Int16)">
            <summary>
            Checks whether two objects are equal
            </summary>
            <param name="expected">the expected value</param>
            <param name="actual">the actual value</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreElementsEqual(System.Int16[],System.Int16[])">
            <summary>
            Checks that arrays have equal elements.
            </summary>
            <param name="expected">the expected values</param>
            <param name="actual">the actual values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreDistinctValues(System.Int16[])">
            <summary>
            Assumes that elements are distinct.
            </summary>
            <param name="values">the values to compare</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.Overlap(System.Int16[],System.Int16[])">
            <summary>
            Checks that some elements of the array are equal
            </summary>
            <param name="left">the left values</param>
            <param name="right">the right values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreDisjoint(System.Int16[],System.Int16[])">
            <summary>
            Checks that no element of each array are equal
            </summary>
            <param name="left">the left values</param>
            <param name="right">the right values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreEqual(System.UInt32,System.UInt32)">
            <summary>
            Checks whether two objects are equal
            </summary>
            <param name="expected">the expected value</param>
            <param name="actual">the actual value</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreElementsEqual(System.UInt32[],System.UInt32[])">
            <summary>
            Checks that arrays have equal elements.
            </summary>
            <param name="expected">the expected values</param>
            <param name="actual">the actual values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreDistinctValues(System.UInt32[])">
            <summary>
            Assumes that elements are distinct.
            </summary>
            <param name="values">the values to compare</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.Overlap(System.UInt32[],System.UInt32[])">
            <summary>
            Checks that some elements of the array are equal
            </summary>
            <param name="left">the left values</param>
            <param name="right">the right values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreDisjoint(System.UInt32[],System.UInt32[])">
            <summary>
            Checks that no element of each array are equal
            </summary>
            <param name="left">the left values</param>
            <param name="right">the right values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreEqual(System.UInt64,System.UInt64)">
            <summary>
            Checks whether two objects are equal
            </summary>
            <param name="expected">the expected value</param>
            <param name="actual">the actual value</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreElementsEqual(System.UInt64[],System.UInt64[])">
            <summary>
            Checks that arrays have equal elements.
            </summary>
            <param name="expected">the expected values</param>
            <param name="actual">the actual values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreDistinctValues(System.UInt64[])">
            <summary>
            Assumes that elements are distinct.
            </summary>
            <param name="values">the values to compare</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.Overlap(System.UInt64[],System.UInt64[])">
            <summary>
            Checks that some elements of the array are equal
            </summary>
            <param name="left">the left values</param>
            <param name="right">the right values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreDisjoint(System.UInt64[],System.UInt64[])">
            <summary>
            Checks that no element of each array are equal
            </summary>
            <param name="left">the left values</param>
            <param name="right">the right values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreEqual(System.UInt16,System.UInt16)">
            <summary>
            Checks whether two objects are equal
            </summary>
            <param name="expected">the expected value</param>
            <param name="actual">the actual value</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreElementsEqual(System.UInt16[],System.UInt16[])">
            <summary>
            Checks that arrays have equal elements.
            </summary>
            <param name="expected">the expected values</param>
            <param name="actual">the actual values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreDistinctValues(System.UInt16[])">
            <summary>
            Assumes that elements are distinct.
            </summary>
            <param name="values">the values to compare</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.Overlap(System.UInt16[],System.UInt16[])">
            <summary>
            Checks that some elements of the array are equal
            </summary>
            <param name="left">the left values</param>
            <param name="right">the right values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreDisjoint(System.UInt16[],System.UInt16[])">
            <summary>
            Checks that no element of each array are equal
            </summary>
            <param name="left">the left values</param>
            <param name="right">the right values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreEqual(System.Byte,System.Byte)">
            <summary>
            Checks whether two objects are equal
            </summary>
            <param name="expected">the expected value</param>
            <param name="actual">the actual value</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreElementsEqual(System.Byte[],System.Byte[])">
            <summary>
            Checks that arrays have equal elements.
            </summary>
            <param name="expected">the expected values</param>
            <param name="actual">the actual values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreDistinctValues(System.Byte[])">
            <summary>
            Assumes that elements are distinct.
            </summary>
            <param name="values">the values to compare</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.Overlap(System.Byte[],System.Byte[])">
            <summary>
            Checks that some elements of the array are equal
            </summary>
            <param name="left">the left values</param>
            <param name="right">the right values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreDisjoint(System.Byte[],System.Byte[])">
            <summary>
            Checks that no element of each array are equal
            </summary>
            <param name="left">the left values</param>
            <param name="right">the right values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreEqual(System.SByte,System.SByte)">
            <summary>
            Checks whether two objects are equal
            </summary>
            <param name="expected">the expected value</param>
            <param name="actual">the actual value</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreElementsEqual(System.SByte[],System.SByte[])">
            <summary>
            Checks that arrays have equal elements.
            </summary>
            <param name="expected">the expected values</param>
            <param name="actual">the actual values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreDistinctValues(System.SByte[])">
            <summary>
            Assumes that elements are distinct.
            </summary>
            <param name="values">the values to compare</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.Overlap(System.SByte[],System.SByte[])">
            <summary>
            Checks that some elements of the array are equal
            </summary>
            <param name="left">the left values</param>
            <param name="right">the right values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreDisjoint(System.SByte[],System.SByte[])">
            <summary>
            Checks that no element of each array are equal
            </summary>
            <param name="left">the left values</param>
            <param name="right">the right values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreEqual(System.Guid,System.Guid)">
            <summary>
            Checks whether two objects are equal
            </summary>
            <param name="expected">the expected value</param>
            <param name="actual">the actual value</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreElementsEqual(System.Guid[],System.Guid[])">
            <summary>
            Checks that arrays have equal elements.
            </summary>
            <param name="expected">the expected values</param>
            <param name="actual">the actual values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreDistinctValues(System.Guid[])">
            <summary>
            Assumes that elements are distinct.
            </summary>
            <param name="values">the values to compare</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.Overlap(System.Guid[],System.Guid[])">
            <summary>
            Checks that some elements of the array are equal
            </summary>
            <param name="left">the left values</param>
            <param name="right">the right values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreDisjoint(System.Guid[],System.Guid[])">
            <summary>
            Checks that no element of each array are equal
            </summary>
            <param name="left">the left values</param>
            <param name="right">the right values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreEqual(System.Char,System.Char)">
            <summary>
            Checks whether two objects are equal
            </summary>
            <param name="expected">the expected value</param>
            <param name="actual">the actual value</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreElementsEqual(System.Char[],System.Char[])">
            <summary>
            Checks that arrays have equal elements.
            </summary>
            <param name="expected">the expected values</param>
            <param name="actual">the actual values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreDistinctValues(System.Char[])">
            <summary>
            Assumes that elements are distinct.
            </summary>
            <param name="values">the values to compare</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.Overlap(System.Char[],System.Char[])">
            <summary>
            Checks that some elements of the array are equal
            </summary>
            <param name="left">the left values</param>
            <param name="right">the right values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreDisjoint(System.Char[],System.Char[])">
            <summary>
            Checks that no element of each array are equal
            </summary>
            <param name="left">the left values</param>
            <param name="right">the right values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreEqual(System.String,System.String)">
            <summary>
            Checks whether two objects are equal
            </summary>
            <param name="expected">the expected value</param>
            <param name="actual">the actual value</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreElementsEqual(System.String[],System.String[])">
            <summary>
            Checks that arrays have equal elements.
            </summary>
            <param name="expected">the expected values</param>
            <param name="actual">the actual values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreDistinctValues(System.String[])">
            <summary>
            Assumes that elements are distinct.
            </summary>
            <param name="values">the values to compare</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.Overlap(System.String[],System.String[])">
            <summary>
            Checks that some elements of the array are equal
            </summary>
            <param name="left">the left values</param>
            <param name="right">the right values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.AreDisjoint(System.String[],System.String[])">
            <summary>
            Checks that no element of each array are equal
            </summary>
            <param name="left">the left values</param>
            <param name="right">the right values</param>
        </member>
        <member name="E:Microsoft.Pex.Framework.PexAssert.Reached">
            <summary>
            Raised when the Reached method is invoked
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexAssert.SafeFailer">
            <summary>
            Unmonitored 'failing' class
            </summary>
            <remarks>
            DO NOT INSTRUMENT THIS CLASS
            </remarks>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexAssert.Predicate">
            <summary>
            A method that takes no argument and returns a bool
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexAssert.ICaseBuilder">
            <summary>
            A function table builder
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.ICaseBuilder.Case(System.Boolean)">
            <summary>
            Evaluate a new case in the functional table
            </summary>
            <param name="enablingCondition">if set to <c>true</c> [enabling condition].</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.ICaseBuilder.ExpectAtLeastOne">
            <summary>
            Asserts that at least one case was enabled
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.ICaseBuilder.ExpectAtMostOne">
            <summary>
            Asserts that at most one case was enabled
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.ICaseBuilder.ExpectExactlyOne">
            <summary>
            Asserts that exactly one case was enabled
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexAssert.ICaseAsserter">
            <summary>
            A functional switch case statement
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.ICaseAsserter.Run(Microsoft.Pex.Framework.PexAction)">
            <summary>
            Executes the assertAction
            </summary>
            <param name="assertAction">The assert action.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.ICaseAsserter.Run(Microsoft.Pex.Framework.PexAction,System.String)">
            <summary>
            Executes the assertAction
            </summary>
            <param name="assertAction">The assert action.</param>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.ICaseAsserter.Run(Microsoft.Pex.Framework.PexAction,System.String,System.Object[])">
            <summary>
            Runs the specified assert action.
            </summary>
            <param name="assertAction">The assert action.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.ICaseAsserter.Implies(Microsoft.Pex.Framework.PexAssert.Predicate)">
            <summary>
            Asserts that <paramref name="assertCondition"/> evaluates to true
            </summary>
            <param name="assertCondition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.ICaseAsserter.Implies(Microsoft.Pex.Framework.PexAssert.Predicate,System.String)">
            <summary>
            Asserts that <paramref name="assertCondition"/> evaluates to true
            </summary>
            <param name="assertCondition">The assert condition.</param>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.ICaseAsserter.Implies(Microsoft.Pex.Framework.PexAssert.Predicate,System.String,System.Object[])">
            <summary>
            Asserts that <paramref name="assertCondition"/> evaluates to true
            </summary>
            <param name="assertCondition">The assert condition.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexAssert.PexCatchResult`1">
            <summary>
            Contains either a value returned by executing code or the exception that was thrown.
            </summary>
            <typeparam name="T">The return type.</typeparam>
        </member>
        <member name="F:Microsoft.Pex.Framework.PexAssert.PexCatchResult`1.Value">
            <summary>
            Contains the return value, if any.
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.PexAssert.PexCatchResult`1.Exception">
            <summary>
            Contains the exception, if any.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.PexCatchResult`1.#ctor(`0,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Pex.Framework.PexAssert.PexCatchResult`1"/>.
            </summary>
            <param name="value">A return value.</param>
            <param name="exception">An exception object.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.PexCatchResult`1.TryGetValue(`0@)">
            <summary>
            Tries to get the return value.
            </summary>
            <param name="value">Receives the return value. If the structure does not contain a return value,
            this parameter is set to <c>default(T)</c>.</param>
            <returns>Returns <c>true</c> if the structure contains a return value and<c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.PexCatchResult`1.TryGetException(System.Exception@)">
            <summary>
            Tries to get the exception object.
            </summary>
            <param name="exception">Receives the exception object.If the structure does not contain an exception object,
            this parameter is set to <c>null</c>.</param>
            <returns>Returns <c>true</c> if the structure contains an exception object and<c>false</c> otherwise.</returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.PexAssert.PexCatchResult`1.HasValue">
            <summary>
            Indicates whether the structure contains a return value.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Framework.PexAssert.PexCatchResult`1.HasException">
            <summary>
            Indicates whether the structure contains an exception object.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Framework.PexAssert.PexCatchResult`1.ExceptionType">
            <summary>
            Contains the exception type, if the structure contains an exception object.
            </summary>
            <remarks>If the structure does not contain an exception object, this property is set to <c>null</c>.</remarks>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexAssert.PexCatchResult">
            <summary>
            Contains the exception from executing code, if an exception was thrown
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.PexAssert.PexCatchResult.Exception">
            <summary>
            Contains the exception object, if any.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.PexCatchResult.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the structure.
            </summary>
            <param name="exception">The exception object.</param>
        </member>
        <member name="P:Microsoft.Pex.Framework.PexAssert.PexCatchResult.HasException">
            <summary>
            Indicates whether the structure contains an exception
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Framework.PexAssert.PexCatchResult.ExceptionType">
            <summary>
            Contains the exception type.
            </summary>
            <remarks>If the structure does not contain an exception object, this property is set to <c>null</c>.</remarks>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexAssert.Func`1">
            <summary>
            A delegate that returns a value
            </summary>
            <typeparam name="R">The return type.</typeparam>
            <returns>Returns a user-defined value.</returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexAssert.Func`2">
            <summary>
            A delegate that takes a value and returns a value of a different type.
            </summary>
            <typeparam name="T">The input type.</typeparam>
            <typeparam name="R">The return type</typeparam>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexAssert.ExceptionComparisons">
            <summary>
            Contains default exception comparisons.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.ExceptionComparisons.EqualTypes(System.Exception,System.Exception)">
            <summary>
            Determines whether two exceptions are same type.
            </summary>
            <param name="left">An exception object.</param>
            <param name="right">An exception object.</param>
            <returns>Returns <c>true</c> if <paramref name="left"/> and <paramref name="right"/> have
            the same type and <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="left"/> or <paramref name="right"/>
            is a null reference</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.ExceptionComparisons.EqualTypesAndMessages(System.Exception,System.Exception)">
            <summary>
            Determines whether two exceptions have the same type and contain the same message.
            </summary>
            <param name="left">An exception object.</param>
            <param name="right">An exception object.</param>
            <returns>Returns <c>true</c> if <paramref name="left"/> and <paramref name="right"/> have
            the same type and contain the same message, and <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="left"/> or <paramref name="right"/>
            is a null reference</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssert.ExceptionComparisons.SpecializedType(System.Exception,System.Exception)">
            <summary>
            Determines whether an exception is a supertype of another exception.
            Determines whether left exception has a supertype of the right exception.
            </summary>
            <param name="left">An exception object. This object is a possible supertype of
            <paramref name="right"/>.</param>
            <param name="right">An exception object.</param>
            <returns>Returns <c>true</c> if <paramref name="left"/> is a supertype of
            <paramref name="right"/>, and <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="left"/> or <paramref name="right"/>
            is a null reference</exception>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexAssertReachedEventArgs">
            <summary>
            Event argument when a reachability point is touched.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssertReachedEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="location"></param>
        </member>
        <member name="P:Microsoft.Pex.Framework.PexAssertReachedEventArgs.Location">
            <summary>
            Gets the location
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.EqualityComparison`1">
            <summary>
            Delegate that compares two values for equality.
            </summary>
            <typeparam name="T">The parameter types.</typeparam>
            <param name="left">A value of type <typeparamref name="T"/>.</param>
            <param name="right">A value of type <typeparamref name="T"/>.</param>
            <returns>Returns <c>true</c> if the values are equal and <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexAssume">
            <summary>
            A static helper class that contains a set of methods to express preconditions
            in parameterized unit tests.
            </summary>
            <remarks>The <c>PexAssume</c> methods can be used to filter out undesirable test inputs.
            If the specified condition does not hold for a test input, Pex throws
            <see cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException"/> and silently ignores the test.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.CreateException">
            <summary>
            Creates the assumption/assertion exception instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.Fail(System.String,System.Object[])">
            <summary>
            The test case failes unconditionally, with a specified message in the exception object.
            </summary>
            <overloads>Asserts unconditionally.</overloads>
            <param name="format">
            A message format string. The syntax for this string is identical to the format string
            used by <c>Console.Writeline</c>. In particular, insert "{0}", "{1}" and so on at appropriate
            locations in the string to represent the values of the variables in the <paramref name="args"/> array.
            </param>
            <param name="args">
            One or more variables, whose values are to be inserted in the <paramref name="format"/> string.
            </param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">Always.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.Fail(System.String)">
            <summary>
            The test case failes unconditionally, with a specified message in the exception object.
            </summary>
            <param name="message">A message string.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">Always.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.Fail">
            <summary>
            The test case failes unconditionally.
            </summary>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">Always.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.IsTrue(System.Boolean)">
            <summary>
            The test case fails if the condition evaluates to <c>false</c>.
            </summary>
            <overloads>The test case fails if the condition evaluates to <c>false</c>.</overloads>
            <param name="condition">A Boolean condition.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the condition evaluates to <c>false</c>.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.IsTrue``1(System.Boolean,Microsoft.Pex.Framework.PexAssume.Func{``0})">
            <summary>
            The test case fails if the condition evaluates to <c>false</c>, otherwise it runs the
            <paramref name="factory"/> delegate and returns the result.
            </summary>
            <param name="condition">A Boolean condition.</param>
            <param name="factory">A <see cref="T:Microsoft.Pex.Framework.PexAssume.Func`1"/> delegate that returns a value of type T</param>
            <typeparam name="T">The return type of <paramref name="factory"/>.</typeparam>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the condition evaluates to <c>false</c>.</exception>
            <returns>Returns the return value of <paramref name="factory"/>.</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.IsFalse(System.Boolean)">
            <summary>
            The test case fails if the condition evaluates to <c>true</c>.
            </summary>
            <overloads>The test case fails if the condition evaluates to <c>true</c>.</overloads>
            <param name="condition">A Boolean condition.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the condition evaluates to <c>true</c>.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.IsFalse``1(System.Boolean,Microsoft.Pex.Framework.PexAssume.Func{``0})">
            <summary>
            The test case fails if the condition evaluates to <c>true</c>, otherwise it runs the
            <paramref name="factory"/> delegate and returns the result.
            </summary>
            <param name="condition">A Boolean condition.</param>
            <param name="factory">A <see cref="T:Microsoft.Pex.Framework.PexAssume.Func`1"/> delegate that returns a value of type T</param>
            <typeparam name="T">The return type of <paramref name="factory"/>.</typeparam>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the condition evaluates to <c>true</c>.</exception>
            <returns>Returns the return value of <paramref name="factory"/>.</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.IsTrue(System.Boolean,System.String)">
            <summary>
            The test case fails if the condition evaluates to <c>false</c>,
            with a specified message in the exception object.
            </summary>
            <param name="condition">A Boolean condition.</param>
            <param name="message">A message string.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the condition evaluates to <c>false</c>.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.IsFalse(System.Boolean,System.String)">
            <summary>
            The test case fails if the condition evaluates to <c>true</c>,
            with a specified message in the exception object.
            </summary>
            <param name="condition">A Boolean condition.</param>
            <param name="message">A message string.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the condition evaluates to <c>true</c>.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.IsTrue(System.Boolean,System.String,System.Object[])">
            <summary>
            The test case fails if the condition evaluates to <c>false</c>,
            with a specified message in the exception object.
            </summary>
            <param name="condition">A Boolean condition.</param>
            <param name="format">
            A message format string. The syntax for this string is identical to the format string
            used by <c>Console.Writeline</c>. In particular, insert "{0}", "{1}" and so on at appropriate
            locations in the string to represent the values of the variables in the <paramref name="args"/> array.
            </param>
            <param name="args">
            One or more variables, whose values are to be inserted in the <paramref name="format"/> string.
            </param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the condition evaluates to <c>false</c>.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.IsFalse(System.Boolean,System.String,System.Object[])">
            <summary>
            The test case fails if the condition evaluates to <c>true</c>,
            with a specified message in the exception object.
            </summary>
            <param name="condition">A Boolean condition.</param>
            <param name="format">
            A message format string. The syntax for this string is identical to the format string
            used by <c>Console.Writeline</c>. In particular, insert "{0}", "{1}" and so on at appropriate
            locations in the string to represent the values of the variables in the <paramref name="args"/> array.
            </param>
            <param name="args">
            One or more variables, whose values are to be inserted in the <paramref name="format"/> string.
            </param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the condition evaluates to <c>true</c>.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.IsNull(System.Object)">
            <summary>
            The test case fails if the value is not a null reference.
            </summary>
            <overloads>The test case fails if the value is not a null reference.</overloads>
            <param name="value">An object.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the value is not a null reference.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.IsNull(System.Object,System.String)">
            <summary>
            The test case fails if the value is not a null reference, with a specified message in
            the exception object.
            </summary>
            <param name="value">An object.</param>
            <param name="message">A message string.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the value is not a null reference.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.IsNull(System.Object,System.String,System.Object[])">
            <summary>
            The test case fails if the value is not a null reference, with a specified message in
            the exception object.
            </summary>
            <param name="value">An object.</param>
            <param name="format">
            A message format string. The syntax for this string is identical to the format string
            used by <c>Console.Writeline</c>. In particular, insert "{0}", "{1}" and so on at appropriate
            locations in the string to represent the values of the variables in the <paramref name="args"/> array.
            </param>
            <param name="args">
            One or more variables, whose values are to be inserted in the <paramref name="format"/> string.
            </param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the value is not a null reference.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.IsNotNull(System.Object)">
            <summary>
            The test case fails if the value is a null reference.
            </summary>
            <overloads>The test case fails if the value is a null reference.</overloads>
            <param name="value">An object.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the value is a null reference.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.IsNotNull(System.Object,System.String)">
            <summary>
            The test case fails if the value is a null reference, with a specified message in
            the exception object.
            </summary>
            <param name="value">An object.</param>
            <param name="message">A message string.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the value is a null reference.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.IsNotNull(System.Object,System.String,System.Object[])">
            <summary>
            The test case fails if the value is a null reference, with a specified message in
            the exception object.
            </summary>
            <param name="value">An object.</param>
            <param name="format">
            A message format string. The syntax for this string is identical to the format string
            used by <c>Console.Writeline</c>. In particular, insert "{0}", "{1}" and so on at appropriate
            locations in the string to represent the values of the variables in the <paramref name="args"/> array.
            </param>
            <param name="args">
            One or more variables, whose values are to be inserted in the <paramref name="format"/> string.
            </param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the value is a null reference.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreEqual(System.Boolean,System.Boolean,System.String,System.Object[])">
            <summary>
            Assumes that two <c>bool</c> values are equal.
            </summary>
            <remarks>
            This method ensures MC/DC coverage of the conjuncts.
            </remarks>
            <param name="expected">The expected value.</param>
            <param name="actual">The value to be tested.</param>
            <param name="format">
            A message format string. The syntax for this string is identical to the format string
            used by <c>Console.Writeline</c>. In particular, insert "{0}", "{1}" and so on at appropriate
            locations in the string to represent the values of the variables in the <paramref name="args"/> array.
            </param>
            <param name="args">
            One or more variables. whose values are to be inserted in <paramref name="format"/>.
            </param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the expected and actual values are not equal.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreEqual(System.Boolean,System.Boolean)">
            <summary>
            Assumes that two <c>bool</c> values are equal.
            </summary>
            <remarks>
            This method ensures MC/DC coverage of the conjuncts.
            </remarks>
            <param name="expected">The expected value.</param>
            <param name="actual">The value to be tested.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the expected and actual values are not equal.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreEqual(System.Boolean,System.Boolean,System.String)">
            <summary>
            Assumes that two <c>bool</c> values are equal.
            </summary>
            <remarks>
            This method ensures MC/DC coverage of the conjuncts.
            </remarks>
            <param name="expected">The expected value.</param>
            <param name="actual">The value to be tested.</param>
            <param name="message">The message to be inserted in case of failure</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssertFailedException">If the expected and actual values are not equal.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreEqual(System.Double,System.Double,System.Double)">
            <summary>
            The test case fails if two <c>double</c> values are not equal within a specified precision.
            </summary>
            <overloads>The test case fails if the values are not equal.</overloads>
            <param name="expected">The expected value.</param>
            <param name="actual">The value to be tested.</param>
            <param name="delta">The test's precision. This value must be positive.</param>
            <remarks>The test fails if the absolute value of the difference between the expected
            and actual values is greater than <paramref name="delta"/>. </remarks>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the values are not equal.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="delta"/> is negative.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreEqual(System.Double,System.Double,System.Double,System.String)">
            <summary>
            The test case fails if two <c>double</c> values are not equal within a specified precision, with
            a specified message in the exception object.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The value to be tested.</param>
            <param name="delta">The test's precision. This value must be positive.</param>
            <param name="message">A message string.</param>
            <remarks>The test fails if the absolute value of the difference between the expected
            and actual values is greater than <paramref name="delta"/>. </remarks>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the values are not equal.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="delta"/> is negative.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreEqual(System.Double,System.Double,System.Double,System.String,System.Object[])">
            <summary>
            The test case fails if two <c>double</c> values are not equal within a specified precision, with
            a specified message in the exception object.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The value to be tested.</param>
            <param name="delta">The test's precision. This value must be positive.</param>
            <param name="format">
            A message format string. The syntax for this string is identical to the format string
            used by <c>Console.Writeline</c>. In particular, insert "{0}", "{1}" and so on at appropriate
            locations in the string to represent the values of the variables in the <paramref name="args"/> array.
            </param>
            <param name="args">
            One or more variables, whose values are to be inserted in <paramref name="format"/>.
            </param>
            <remarks>The test fails if the absolute value of the difference between the expected
            and actual values is greater than <paramref name="delta"/>. </remarks>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the values are not equal.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="delta"/> is negative.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreEqual(System.Single,System.Single,System.Single)">
            <summary>
            The test case fails if two <c>float</c> values are not equal within a specified precision.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The value to be tested.</param>
            <param name="delta">The test's precision. This value must be positive.</param>
            <remarks>The test fails if the absolute value of the difference between the expected
            and actual values is greater than <paramref name="delta"/>. </remarks>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the values are not equal.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="delta"/> is negative.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreEqual(System.Single,System.Single,System.Single,System.String)">
            <summary>
            The test case fails if two <c>float</c> values are not equal within a specified precision, with
            a specified message in the exception object.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The value to be tested.</param>
            <param name="delta">The test's precision. This value must be positive.</param>
            <param name="message">A message string.</param>
            <remarks>The test fails if the absolute value of the difference between the expected
            and actual values is greater than <paramref name="delta"/>. </remarks>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the values are not equal.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="delta"/> is negative.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreEqual(System.Single,System.Single,System.Single,System.String,System.Object[])">
            <summary>
            The test case fails if two <c>float</c> values are not equal within a specified precision, with
            a specified message in the exception object.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The value to be tested.</param>
            <param name="delta">The test's precision. This value must be positive.</param>
            <param name="format">
            A message format string. The syntax for this string is identical to the format string
            used by <c>Console.Writeline</c>. In particular, insert "{0}", "{1}" and so on at appropriate
            locations in the string to represent the values of the variables in the <paramref name="args"/> array.
            </param>
            <param name="args">
            One or more variables, whose values are to be inserted in <paramref name="format"/>.
            </param>
            <remarks>The test fails if the absolute value of the difference between the expected
            and actual values is greater than <paramref name="delta"/>. </remarks>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the values are not equal.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="delta"/> is negative.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreEqual(System.String,System.String,System.Boolean)">
            <summary>
            The test case fails if two strings are not equal.
            </summary>
            <param name="expected">The expected string.</param>
            <param name="actual">The string to be tested.</param>
            <param name="ignoreCase">Set this value to <c>true</c> for case-sensitive comparison
            and <d>false</d> otherwise.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the strings are not equal.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreEqual(System.String,System.String,System.Boolean,System.String)">
            <summary>
            The test case fails if two strings are not equal, with
            a specified message in the exception object.
            </summary>
            <param name="expected">The expected string.</param>
            <param name="actual">The string to be tested.</param>
            <param name="ignoreCase">Set this value to <c>true</c> for case-sensitive comparison
            and <d>false</d> otherwise.</param>
            <param name="message">A message string.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the strings are not equal.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreEqual(System.String,System.String,System.Boolean,System.String,System.Object[])">
            <summary>
            The test case fails if two strings are not equal, with
            a specified message in the exception object.
            </summary>
            <param name="expected">The expected string.</param>
            <param name="actual">The string to be tested.</param>
            <param name="ignoreCase">Set this value to <c>true</c> for case-sensitive comparison
            and <d>false</d> otherwise.</param>
            <param name="format">
            A message format string. The syntax for this string is identical to the format string
            used by <c>Console.Writeline</c>. In particular, insert "{0}", "{1}" and so on at appropriate
            locations in the string to represent the values of the variables in the <paramref name="args"/> array.
            </param>
            <param name="args">
            One or more variables, whose values are to be inserted in <paramref name="format"/>.
            </param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the strings are not equal.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            The test fails if a culture-specific comparison of two strings is false.
            </summary>
            <param name="expected">The expected string.</param>
            <param name="actual">The actual string.</param>
            <param name="ignoreCase">Set this value to <c>true</c> for case-sensitive comparison
            and <d>false</d> otherwise.</param>
            <param name="culture">A <c>System.Globalization.CultureInfo</c> object that contains the
            culture-specific comparison information.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the strings are not equal.</exception>
            <remarks>For more information, see <c>System.String.Compare</c>.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo,System.String)">
            <summary>
            The test fails if a culture-specific comparison of two strings is false, with a specified message
            in the exception object.
            </summary>
            <param name="expected">The expected string.</param>
            <param name="actual">The actual string.</param>
            <param name="ignoreCase">Set this value to <c>true</c> for case-sensitive comparison
            and <d>false</d> otherwise.</param>
            <param name="culture">A <c>System.Globalization.CultureInfo</c> object that contains the
            culture-specific comparison information.</param>
            <param name="message">A message string.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the strings are not equal.</exception>
            <remarks>For more information, see <c>System.String.Compare</c>.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo,System.String,System.Object[])">
            <summary>
            The test fails if a culture-specific comparison of two strings is false, with a specified message
            in the exception object.
            </summary>
            <param name="expected">The expected string.</param>
            <param name="actual">The actual string.</param>
            <param name="ignoreCase">Set this value to <c>true</c> for case-sensitive comparison
            and <d>false</d> otherwise.</param>
            <param name="culture">A <c>System.Globalization.CultureInfo</c> object that contains the
            culture-specific comparison information.</param>
            <param name="format">
            A message format string. The syntax for this string is identical to the format string
            used by <c>Console.Writeline</c>. In particular, insert "{0}", "{1}" and so on at appropriate
            locations in the string to represent the values of the variables in the <paramref name="args"/> array.
            </param>
            <param name="args">
            One or more variables, whose values are to be inserted in <paramref name="format"/>.
            </param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the strings are not equal.</exception>
            <remarks>For more information, see <c>System.String.Compare</c>.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreEqual(System.Object,System.Object)">
            <summary>
            The test fails if two object instances are not equal.
            </summary>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the objects are not equal.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreEqual(System.Object,System.Object,System.String)">
            <summary>
            The test fails if two object instances are not equal, with a specified
            message in the exception object.
            </summary>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <param name="message">A message string.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the objects are not equal.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreEqual(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            The test fails if two object instances are not equal, with a specified
            message in the exception object.
            </summary>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <param name="format">
            A message format string. The syntax for this string is identical to the format string
            used by <c>Console.Writeline</c>. In particular, insert "{0}", "{1}" and so on at appropriate
            locations in the string to represent the values of the variables in the <paramref name="args"/> array.
            </param>
            <param name="args">
            One or more variables, whose values are to be inserted in <paramref name="format"/>.
            </param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the objects are not equal.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreEqual``1(``0,``0)">
            <summary>
            The test fails if two object instances of a specified type are not equal.
            </summary>
            <typeparam name="T">The object types.</typeparam>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the objects are not equal.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreEqual``1(``0,``0,System.String)">
            <summary>
            The test fails if two object instances of a specified type are not equal, with a specified
            message in the exception object.
            </summary>
            <typeparam name="T">The object types.</typeparam>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <param name="message">A message string.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the objects are not equal.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreEqual``1(``0,``0,System.String,System.Object[])">
            <summary>
            The test fails if two object instances of a specified type are not equal, with a specified
            message in the exception object.
            </summary>
            <typeparam name="T">The object types.</typeparam>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <param name="format">
            A message format string. The syntax for this string is identical to the format string
            used by <c>Console.Writeline</c>. In particular, insert "{0}", "{1}" and so on at appropriate
            locations in the string to represent the values of the variables in the <paramref name="args"/> array.
            </param>
            <param name="args">
            One or more variables, whose values are to be inserted in <paramref name="format"/>.
            </param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the objects are not equal.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreNotEqual(System.Double,System.Double,System.Double)">
            <summary>
            The test case fails if two <c>double</c> values are equal within a specified precision.
            </summary>
            <overloads>The test case fails if the values are equal.</overloads>
            <param name="expected">The expected value.</param>
            <param name="actual">The value to be tested.</param>
            <param name="delta">The test's precision. This value must be positive.</param>
            <remarks>The test fails if the absolute value of the difference between the expected
            and actual values is less than or equal to <paramref name="delta"/>. </remarks>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the values are equal.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="delta"/> is negative.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreNotEqual(System.Double,System.Double,System.Double,System.String)">
            <summary>
            The test case fails if two <c>double</c> values are equal within a specified precision, with
            a specified message in the exception object.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The value to be tested.</param>
            <param name="delta">The test's precision. This value must be positive.</param>
            <param name="message">A message string.</param>
            <remarks>The test fails if the absolute value of the difference between the expected
            and actual values is less than or equal to <paramref name="delta"/>. </remarks>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the values are equal.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="delta"/> is negative.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreNotEqual(System.Double,System.Double,System.Double,System.String,System.Object[])">
            <summary>
            The test case fails if two <c>double</c> values are equal within a specified precision, with
            a specified message in the exception object.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The value to be tested.</param>
            <param name="delta">The test's precision. This value must be positive.</param>
            <param name="format">
            A message format string. The syntax for this string is identical to the format string
            used by <c>Console.Writeline</c>. In particular, insert "{0}", "{1}" and so on at appropriate
            locations in the string to represent the values of the variables in the <paramref name="args"/> array.
            </param>
            <param name="args">
            One or more variables, whose values are to be inserted in <paramref name="format"/>.
            </param>
            <remarks>The test fails if the absolute value of the difference between the expected
            and actual values is less than or equal to <paramref name="delta"/>. </remarks>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the values are equal.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="delta"/> is negative.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreNotEqual(System.Single,System.Single,System.Single)">
            <summary>
            The test case fails if two <c>float</c> values are equal within a specified precision.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The value to be tested.</param>
            <param name="delta">The test's precision. This value must be positive.</param>
            <remarks>The test fails if the absolute value of the difference between the expected
            and actual values is less than or equal to <paramref name="delta"/>. </remarks>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the values are equal.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="delta"/> is negative.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreNotEqual(System.Single,System.Single,System.Single,System.String)">
            <summary>
            The test case fails if two <c>float</c> values are equal within a specified precision, with
            a specified message in the exception object.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The value to be tested.</param>
            <param name="delta">The test's precision. This value must be positive.</param>
            <param name="message">A message string.</param>
            <remarks>The test fails if the absolute value of the difference between the expected
            and actual values is less than or equal to <paramref name="delta"/>. </remarks>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the values are equal.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="delta"/> is negative.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreNotEqual(System.Single,System.Single,System.Single,System.String,System.Object[])">
            <summary>
            The test case fails if two <c>float</c> values are equal within a specified precision, with
            a specified message in the exception object.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="actual">The value to be tested.</param>
            <param name="delta">The test's precision. This value must be positive.</param>
            <param name="format">
            A message format string. The syntax for this string is identical to the format string
            used by <c>Console.Writeline</c>. In particular, insert "{0}", "{1}" and so on at appropriate
            locations in the string to represent the values of the variables in the <paramref name="args"/> array.
            </param>
            <param name="args">
            One or more variables, whose values are to be inserted in <paramref name="format"/>.
            </param>
            <remarks>The test fails if the absolute value of the difference between the expected
            and actual values is less than or equal to <paramref name="delta"/>. </remarks>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the values are equal.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="delta"/> is negative.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreNotEqual(System.String,System.String,System.Boolean)">
            <summary>
            The test case fails if two strings not equal.
            </summary>
            <param name="expected">The expected string.</param>
            <param name="actual">The string to be tested.</param>
            <param name="ignoreCase">Set this value to <c>true</c> for case-sensitive comparison
            and <d>false</d> otherwise.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the strings are equal.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreNotEqual(System.String,System.String,System.Boolean,System.String)">
            <summary>
            The test case fails if two strings are equal, with
            a specified message in the exception object.
            </summary>
            <param name="expected">The expected string.</param>
            <param name="actual">The string to be tested.</param>
            <param name="ignoreCase">Set this value to <c>true</c> for case-sensitive comparison
            and <d>false</d> otherwise.</param>
            <param name="message">A message string.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the strings are equal.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreNotEqual(System.String,System.String,System.Boolean,System.String,System.Object[])">
            <summary>
            The test case fails if two strings are equal, with
            a specified message in the exception object.
            </summary>
            <param name="expected">The expected string.</param>
            <param name="actual">The string to be tested.</param>
            <param name="ignoreCase">Set this value to <c>true</c> for case-sensitive comparison
            and <d>false</d> otherwise.</param>
            <param name="format">
            A message format string. The syntax for this string is identical to the format string
            used by <c>Console.Writeline</c>. In particular, insert "{0}", "{1}" and so on at appropriate
            locations in the string to represent the values of the variables in the <paramref name="args"/> array.
            </param>
            <param name="args">
            One or more variables, whose values are to be inserted in <paramref name="format"/>.
            </param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the strings are equal.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreNotEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            The test fails if a culture-specific comparison of two strings is true.
            </summary>
            <param name="expected">The expected string.</param>
            <param name="actual">The actual string.</param>
            <param name="ignoreCase">Set this value to <c>true</c> for case-sensitive comparison
            and <d>false</d> otherwise.</param>
            <param name="culture">A <c>System.Globalization.CultureInfo</c> object that contains the
            culture-specific comparison information.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the strings are equal.</exception>
            <remarks>For more information, see <c>System.String.Compare</c>.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreNotEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo,System.String)">
            <summary>
            The test fails if a culture-specific comparison of two strings is true, with a specified message
            in the exception object.
            </summary>
            <param name="expected">The expected string.</param>
            <param name="actual">The actual string.</param>
            <param name="ignoreCase">Set this value to <c>true</c> for case-sensitive comparison
            and <d>false</d> otherwise.</param>
            <param name="culture">A <c>System.Globalization.CultureInfo</c> object that contains the
            culture-specific comparison information.</param>
            <param name="message">A message string.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the strings are equal.</exception>
            <remarks>For more information, see <c>System.String.Compare</c>.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreNotEqual(System.String,System.String,System.Boolean,System.Globalization.CultureInfo,System.String,System.Object[])">
            <summary>
            The test fails if a culture-specific comparison of two strings is true, with a specified message
            in the exception object.
            </summary>
            <param name="expected">The expected string.</param>
            <param name="actual">The actual string.</param>
            <param name="ignoreCase">Set this value to <c>true</c> for case-sensitive comparison
            and <d>false</d> otherwise.</param>
            <param name="culture">A <c>System.Globalization.CultureInfo</c> object that contains the
            culture-specific comparison information.</param>
            <param name="format">
            A message format string. The syntax for this string is identical to the format string
            used by <c>Console.Writeline</c>. In particular, insert "{0}", "{1}" and so on at appropriate
            locations in the string to represent the values of the variables in the <paramref name="args"/> array.
            </param>
            <param name="args">
            One or more variables, whose values are to be inserted in <paramref name="format"/>.
            </param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the strings are equal.</exception>
            <remarks>For more information, see <c>System.String.Compare</c>.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreNotEqual(System.Object,System.Object)">
            <summary>
            The test fails if two object instances are equal.
            </summary>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the objects are equal.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreNotEqual(System.Object,System.Object,System.String)">
            <summary>
            The test fails if two object instances are equal, with a specified
            message in the exception object.
            </summary>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <param name="message">A message string.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the objects are equal.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreNotEqual(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            The test fails if two object instances are equal, with a specified
            message in the exception object.
            </summary>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <param name="format">
            A message format string. The syntax for this string is identical to the format string
            used by <c>Console.Writeline</c>. In particular, insert "{0}", "{1}" and so on at appropriate
            locations in the string to represent the values of the variables in the <paramref name="args"/> array.
            </param>
            <param name="args">
            One or more variables, whose values are to be inserted in <paramref name="format"/>.
            </param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the objects are equal.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreNotEqual``1(``0,``0)">
            <summary>
            The test fails if two object instances of a specified type are equal.
            </summary>
            <typeparam name="T">The objects' type.</typeparam>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the objects are equal.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreNotEqual``1(``0,``0,System.String)">
            <summary>
            The test fails if two object instances of a specified type are equal, with a specified
            message in the exception object.
            </summary>
            <typeparam name="T">The objects' type.</typeparam>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <param name="message">A message string.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the objects are equal.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreNotEqual``1(``0,``0,System.String,System.Object[])">
            <summary>
            The test fails if two object instances of a specified type are equal, with a specified
            message in the exception object.
            </summary>
            <typeparam name="T">The objects' type.</typeparam>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <param name="format">
            A message format string. The syntax for this string is identical to the format string
            used by <c>Console.Writeline</c>. In particular, insert "{0}", "{1}" and so on at appropriate
            locations in the string to represent the values of the variables in the <paramref name="args"/> array.
            </param>
            <param name="args">
            One or more variables, whose values are to be inserted in <paramref name="format"/>.
            </param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the objects are equal.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreSame(System.Object,System.Object)">
            <summary>
            The test fails if two object instances are not the same instance.
            </summary>
            <overloads>The test fails if two object instances are not the same instance.</overloads>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the objects are not equal.</exception>
            <remarks>The test fails if <c>object.ReferenceEquals(expected, actual)</c> returns <c>false</c>.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreSame(System.Object,System.Object,System.String)">
            <summary>
            The test fails if two object instances are not the same instance, with a specified
            message in the exception object.
            </summary>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <param name="message">A message string.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the objects are not equal.</exception>
            <remarks>The test fails if <c>object.ReferenceEquals(expected, actual)</c> returns <c>false</c>.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreSame(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            The test fails if two object instances are not the same instance, with a specified
            message in the exception object.
            </summary>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <param name="format">
            A message format string. The syntax for this string is identical to the format string
            used by <c>Console.Writeline</c>. In particular, insert "{0}", "{1}" and so on at appropriate
            locations in the string to represent the values of the variables in the <paramref name="args"/> array.
            </param>
            <param name="args">
            One or more variables, whose values are to be inserted in <paramref name="format"/>.
            </param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the objects are not equal.</exception>
            <remarks>The test fails if <c>object.ReferenceEquals(expected, actual)</c> returns <c>false</c>.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreNotSame(System.Object,System.Object)">
            <summary>
            The test fails if two object instances are the same instance.
            </summary>
            <overloads>The test fails if two object instances are the same instance.</overloads>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the objects are equal.</exception>
            <remarks>The test fails if <c>object.ReferenceEquals(expected, actual)</c> returns <c>true</c>.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreNotSame(System.Object,System.Object,System.String)">
            <summary>
            The test fails if two object instances are the same instance, with a specified
            message in the exception object.
            </summary>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <param name="message">A message string.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the objects are equal.</exception>
            <remarks>The test fails if <c>object.ReferenceEquals(expected, actual)</c> returns <c>true</c>.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreNotSame(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            The test fails if two object instances are the same instance, with a specified
            message in the exception object.
            </summary>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <param name="format">
            A message format string. The syntax for this string is identical to the format string
            used by <c>Console.Writeline</c>. In particular, insert "{0}", "{1}" and so on at appropriate
            locations in the string to represent the values of the variables in the <paramref name="args"/> array.
            </param>
            <param name="args">
            One or more variables, whose values are to be inserted in <paramref name="format"/>.
            </param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the objects are equal.</exception>
            <remarks>The test fails if <c>object.ReferenceEquals(expected, actual)</c> returns <c>true</c>.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.IsInstanceOfType(System.Object,System.Type)">
            <summary>
            The test fails if an object is not the specified type.
            </summary>
            <overloads>The test fails if an object is not the specified type.</overloads>
            <param name="value">An object.</param>
            <param name="expectedType">The expected type.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the object is not the expected type.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.IsInstanceOfType(System.Object,System.Type,System.String)">
            <summary>
            The test fails if an object is not the specified type, with a specified message
            in the exception object.
            </summary>
            <param name="value">An object.</param>
            <param name="expectedType">The expected type.</param>
            <param name="message">A message string.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the object is not the expected type.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.IsInstanceOfType(System.Object,System.Type,System.String,System.Object[])">
            <summary>
            The test fails if an object is not the specified type, with a specified message
            in the exception object.
            </summary>
            <param name="value">An object.</param>
            <param name="expectedType">The expected type.</param>
            <param name="format">
            A message format string. The syntax for this string is identical to the format string
            used by <c>Console.Writeline</c>. In particular, insert "{0}", "{1}" and so on at appropriate
            locations in the string to represent the values of the variables in the <paramref name="args"/> array.
            </param>
            <param name="args">
            One or more variables, whose values are to be inserted in <paramref name="format"/>.
            </param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the object is not the expected type.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.IsNotInstanceOfType(System.Object,System.Type)">
            <summary>
            The test fails if an object is the specified type.
            </summary>
            <overloads>The test fails if an object is the specified type.</overloads>
            <param name="value">An object.</param>
            <param name="expectedType">The expected type.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the object is the expected type.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.IsNotInstanceOfType(System.Object,System.Type,System.String)">
            <summary>
            The test fails if an object is the specified type, with a specified message
            in the exception object.
            </summary>
            <param name="value">An object.</param>
            <param name="expectedType">The expected type.</param>
            <param name="message">A message string.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the object is the expected type.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.IsNotInstanceOfType(System.Object,System.Type,System.String,System.Object[])">
            <summary>
            The test fails if an object is the specified type, with a specified message
            in the exception object.
            </summary>
            <param name="value">An object.</param>
            <param name="expectedType">The expected type.</param>
            <param name="format">
            A message format string. The syntax for this string is identical to the format string
            used by <c>Console.Writeline</c>. In particular, insert "{0}", "{1}" and so on at appropriate
            locations in the string to represent the values of the variables in the <paramref name="args"/> array.
            </param>
            <param name="args">
            One or more variables, whose values are to be inserted in <paramref name="format"/>.
            </param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the object is the expected type.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.BooleanIsZeroOrOne(System.Boolean)">
            <summary>
            Assumes that a boolean value is either zero or one
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.Equals(System.Object,System.Object)">
             <summary>
            Don't use this method, use <see cref="M:Microsoft.Pex.Framework.PexAssume.AreEqual(System.Object,System.Object)"/> instead.
             </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreEqual``1(``0,``0,System.Comparison{``0})">
            <summary>
            The test fails if two object instances with a specified type are not equal,
            based on an <see cref="T:System.Comparison`1"/> delegate.
            </summary>
            <typeparam name="T">The objects' type.</typeparam>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <param name="comparison">An <c>EqualityComparison</c> delegate, which returns <c>true</c>
            if the two objects are equal and <c>false</c> otherwise.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the objects are not equal.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreEqual``1(``0,``0,Microsoft.Pex.Framework.EqualityComparison{``0})">
            <summary>
            The test fails if two object instances with a specified type are not equal,
            based on an <see cref="T:Microsoft.Pex.Framework.EqualityComparison`1"/> delegate.
            </summary>
            <typeparam name="T">The objects' type.</typeparam>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <param name="comparison">An <c>EqualityComparison</c> delegate, which returns <c>true</c>
            if the two objects are equal and <c>false</c> otherwise.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the objects are not equal.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreNotEqual``1(``0,``0,System.Comparison{``0})">
            <summary>
            The test fails if two object instances with a specified type are equal,
            based on an <see cref="T:System.Comparison`1"/> delegate.
            </summary>
            <typeparam name="T">The objects' type.</typeparam>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <param name="comparison">A <c>Comparison</c> delegate, which returns <c>true</c>
            if the two objects are equal and <c>false</c> otherwise.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the objects are equal.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreNotEqual``1(``0,``0,Microsoft.Pex.Framework.EqualityComparison{``0})">
            <summary>
            The test fails if two object instances with a specified type are equal,
            based on an <see cref="T:Microsoft.Pex.Framework.EqualityComparison`1"/> delegate.
            </summary>
            <typeparam name="T">The objects' type.</typeparam>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <param name="comparison">A <c>Comparison</c> delegate, which returns <c>true</c>
            if the two objects are equal and <c>false</c> otherwise.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the objects are equal.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.IsNullOrEmpty(System.String)">
            <summary>
            The test fails if a specified string is not null or empty.
            </summary>
            <overloads>The test fails if a specified string is not null or empty.</overloads>
            <param name="value">The string.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the the string is not null or of zero length.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.IsNullOrEmpty``1(``0[])">
            <summary>
            The test fails if a specified array is not null or empty.
            </summary>
            <typeparam name="T">The array type.</typeparam>
            <param name="value">The array.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the the array is not null or of zero length.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            The test fails if a specified collection is not null or empty.
            </summary>
            <typeparam name="T">The collection type.</typeparam>
            <param name="value">The collection.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the the array is not null or of zero length.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.IsNotNullOrEmpty(System.String)">
            <summary>
            The test fails if a specified string is null or empty.
            </summary>
            <overloads>The test fails if a specified string is not null or empty.</overloads>
            <param name="value">The string.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the the string is null or of zero length.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.IsNotNullOrEmpty``1(``0[])">
            <summary>
            The test fails if a specified array is null or empty.
            </summary>
            <typeparam name="T">The array type.</typeparam>
            <param name="value">The array.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the the array is null or of zero length.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.IsNotNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            The test fails if a specified collection is null or empty.
            </summary>
            <typeparam name="T">The collection type.</typeparam>
            <param name="value">The collection.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If the the array is null or of zero length.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreElementsNotNull``1(``0[])">
            <summary>
            The test fails if any element of an array is null.
            </summary>
            <overloads>The test fails if any element is null.</overloads>
            <typeparam name="T">The array type.</typeparam>
            <param name="value">The array.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If any elements are null.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreElementsNotNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            The test fails if any element of an <c>IEnumerable</c> collection is null.
            </summary>
            <typeparam name="T">The collection type.</typeparam>
            <param name="value">The collection.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If any elements are null.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreElementsEqual``1(``0[],System.Int32,System.Int32,``0[],System.Int32,Microsoft.Pex.Framework.EqualityComparison{``0})">
            <summary>
            The test fails if any pair of elements from a subset of two arrays is not equal.
            </summary>
            <overloads>The test fails if any pair of elements from two arrays is not equal.</overloads>
            <typeparam name="T">The array type.</typeparam>
            <param name="left">The "left" array.</param>
            <param name="startIndex">The index at which to start comparing for the left array.</param>
            <param name="count">The number of elements to be compared.</param>
            <param name="right">The "right" array.</param>
            <param name="rightStartIndex">The index at which to start comparing for the right array.</param>
            <param name="comparison">An <c>EqualityComparison</c> delegate that compares each pair of elements
            and returns <c>true</c> if they are equal.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If any pair of elements is not equal.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreElementsEqual``1(``0[],``0[],Microsoft.Pex.Framework.EqualityComparison{``0})">
            <summary>
            The test fails if any pair of elements from two arrays is not equal.
            </summary>
            <typeparam name="T">The array type.</typeparam>
            <param name="left">The "left" array.</param>
            <param name="right">The "right" array.</param>
            <param name="comparison">An <c>EqualityComparison</c> delegate that compares each pair of elements
            and returns <c>true</c> if they are equal.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If any pair of elements is not equal.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreElementsEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},Microsoft.Pex.Framework.EqualityComparison{``0})">
            <summary>
            The test fails if any pair of elements from two <c>IEnumerable</c> collections is not equal.
            </summary>
            <typeparam name="T">The array type.</typeparam>
            <param name="left">The "left" array.</param>
            <param name="right">The "right" array.</param>
            <param name="comparison">An <c>EqualityComparison</c> delegate that compares each pair of elements
            and returns <c>true</c> if they are equal.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If any pair of elements is not equal.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.TrueForAll``1(``0[],System.Predicate{``0})">
            <summary>
            The test fails if any element of an array does not meet a user-defined criteria.
            </summary>
            <overloads>The test fails if any element of an array or collection does not meet a user-defined criteria.</overloads>
            <typeparam name="T">The array type.</typeparam>
            <param name="items">An array.</param>
            <param name="predicate">A <c>Predicate</c> delegate that returns <c>true</c> if an element meets
            the user's criteria, and <c>false</c> otherwise.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If <paramref name="predicate"/> returns <c>false</c>
            for any element.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.TrueForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            The test fails if any element of an <c>IEnumerable</c> collection does not meet a user-defined criteria.
            </summary>
            <typeparam name="T">The collection type.</typeparam>
            <param name="items">A collection.</param>
            <param name="predicate">A <c>Predicate</c> delegate that returns <c>true</c> if an element meets
            the user's criteria, and <c>false</c> otherwise.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If <paramref name="predicate"/> returns <c>false</c>
            for any element.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.TrueForAll(System.Int32,System.Int32,System.Predicate{System.Int32})">
            <summary>
            The test fails if any element of a specified series of integers does not meet
            a user-defined criteria.
            </summary>
            <param name="start">The starting integer.</param>
            <param name="length">The number of integers to be evaluated. This value must be positive.</param>
            <param name="predicate">A <c>Predicate</c> delegate that returns <c>true</c> if an integer meets
            the user's criteria, and <c>false</c> otherwise.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If <paramref name="predicate"/> returns <c>false</c>
            for any of the specified integers.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.TrueForAny``1(``0[],System.Predicate{``0})">
            <summary>
            The test fails if all elements of an array do not meet a user-defined criteria.
            </summary>
            <overloads>The test fails if no elements of an array or collection meet a user-defined criteria.</overloads>
            <typeparam name="T">The array type.</typeparam>
            <param name="items">An array.</param>
            <param name="predicate">A <c>Predicate</c> delegate that returns <c>true</c> if an element meets
            the user's criteria, and <c>false</c> otherwise.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If <paramref name="predicate"/> returns <c>false</c>
            for every element.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.TrueForAny``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            The test fails if all elements of an <c>IEnumerable</c> collection does not meet a user-defined criteria.
            </summary>
            <typeparam name="T">The collection type.</typeparam>
            <param name="items">A collection.</param>
            <param name="predicate">A <c>Predicate</c> delegate that returns <c>true</c> if an element meets
            the user's criteria, and <c>false</c> otherwise.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If <paramref name="predicate"/> returns <c>false</c>
            for every element.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.TrueForAny(System.Int32,System.Int32,System.Predicate{System.Int32})">
            <summary>
            The test fails if every element of a specified series of integers does not meet
            a user-defined criteria.
            </summary>
            <param name="start">The starting integer.</param>
            <param name="length">The number of integers to be evaluated. This value must be positive.</param>
            <param name="predicate">A <c>Predicate</c> delegate that returns <c>true</c> if an integer meets
            the user's criteria, and <c>false</c> otherwise.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If <paramref name="predicate"/> returns <c>false</c>
            for all the specified integers.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreDistinct``1(``0[],Microsoft.Pex.Framework.EqualityComparison{``0})">
            <summary>
            The test fails if all elements of an array are not distinct.
            </summary>
            <overloads>The test fails if all elements of an array are not distinct.</overloads>
            <typeparam name="T">The array type.</typeparam>
            <param name="values">An array.</param>
            <param name="equalityComparer">An <see cref="T:Microsoft.Pex.Framework.EqualityComparison`1"/> delegate that returns
            <c>true</c> if two elements are distinct and <c>false</c> otherwise.
            </param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If any two elements are not distinct.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreDistinctReferences``1(``0[])">
            <summary>
            The test fails if all elements of an array are not distinct object references.
            </summary>
            <typeparam name="T">The array type.</typeparam>
            <param name="values">An array.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If any two elements are not distinct.</exception>
            <remarks>The method determines whether two objects are distinct references by calling
            <c>Object.ReferenceEquals</c>.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreDistinctValues``1(``0[])">
            <summary>
            The test fails if any pair of elements from two arrays are equal.
            </summary>
            <overloads>The test fails if any pair of elements from two arrays are equal.</overloads>
            <typeparam name="T">The array type.</typeparam>
            <param name="values">An array.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If any pair of elements are equal.</exception>
            <remarks>The method determines whether two elements are equal by calling
            <c>Object.Equals</c>.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.Implies(System.Boolean,Microsoft.Pex.Framework.PexAction)">
            <summary>
            Assumes implication is true (if <paramref name="value"/> is true,
            <paramref name="impliedAction"/> should executed without exception).
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.ImpliesIsTrue(System.Boolean,Microsoft.Pex.Framework.PexAssume.Predicate)">
            <summary>
            Assumes an implication is true.
            </summary>
            <param name="value">A <c>bool</c> value.</param>
            <param name="impliedValue">A <see cref="T:Microsoft.Pex.Framework.PexAssume.Predicate"/> delegate, that returns a <c>bool</c> value.</param>
            <remarks>If <paramref name="value"/> is <c>true</c>, this method assumes that the value returned by
            the <paramref name="impliedValue"/> delegate is <c>true</c> by calling <c>PexAssume.IsTrue</c>. Otherwise, the method does nothing.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.ImpliesIsTrue(System.Boolean,Microsoft.Pex.Framework.PexAssume.Predicate,System.String)">
            <summary>
            Assumes an implication is true and passes a message string to <c>PexAssume.IsTrue</c>.
            </summary>
            <param name="value">A <c>bool</c> value.</param>
            <param name="impliedValue">A <see cref="T:Microsoft.Pex.Framework.PexAssume.Predicate"/> delegate, that returns a <c>bool</c> value.</param>
            <param name="message">A message string.</param>
            <remarks>If <paramref name="value"/> is <c>true</c>, this method assumes that the value returned by
            the <paramref name="impliedValue"/> delegate is <c>true</c> by calling <c>PexAssume.IsTrue</c>. <c>ImpliesIsTrue</c>
            also passes in a message string to be included in the exception object. If <paramref name="value"/> is set to
            <c>false</c>, the method does nothing.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.ImpliesIsTrue(System.Boolean,Microsoft.Pex.Framework.PexAssume.Predicate,System.String,System.Object[])">
            <summary>
            Assumes an implication is true and passes a message string to <c>PexAssume.IsTrue</c>.
            </summary>
            <param name="value">A <c>bool</c> value.</param>
            <param name="impliedValue">A <see cref="T:Microsoft.Pex.Framework.PexAssume.Predicate"/> delegate, that returns a <c>bool</c> value.</param>
            <param name="format">
            A message format string. The syntax for this string is identical to the format string
            used by <c>Console.Writeline</c>. In particular, insert "{0}", "{1}" and so on at appropriate
            locations in the string to represent the values of the variables in the <paramref name="args"/> array.
            </param>
            <param name="args">
            One or more variables, whose values are to be inserted in the <paramref name="format"/> string.
            </param>
            <remarks>If <paramref name="value"/> is <c>true</c>, this method assumes that the value returned by
            the <paramref name="impliedValue"/> delegate is <c>true</c> by calling <c>PexAssume.IsTrue</c>. <c>ImpliesIsTrue</c>
            also passes in a message string to be included in the exception object. If <paramref name="value"/> is set to
            <c>false</c>, the method does nothing.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.EnumIsDefined``1(``0)">
            <summary>
            The test fails if the value is not defined in the specified enumeration.
            </summary>
            <typeparam name="TEnum">The enumeration type.</typeparam>
            <param name="value">The value to be tested.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If <paramref name="value"/> is not a member of the enumeration.</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.InRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            The test fails if the value is not in the specified range.
            </summary>
            <param name="value">The value to be tested.</param>
            <param name="minInclusive">The range's minimum value.</param>
            <param name="maxExclusive">The range's maximum value.</param>
            <exception cref="T:Microsoft.Pex.Framework.Exceptions.PexAssumeFailedException">If <paramref name="value"/> is not in the range.</exception>
            <remarks>The test fails if <paramref name="value"/> is less than <paramref name="minInclusive"/>
            or greater than or equal to <paramref name="maxExclusive"/>.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreEqual(System.Int32,System.Int32)">
            <summary>
            Checks whether two objects are equal
            </summary>
            <param name="expected">the expected value</param>
            <param name="actual">the actual value</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreElementsEqual(System.Int32[],System.Int32[])">
            <summary>
            Checks that arrays have equal elements.
            </summary>
            <param name="expected">the expected values</param>
            <param name="actual">the actual values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreDistinctValues(System.Int32[])">
            <summary>
            Assumes that elements are distinct.
            </summary>
            <param name="values">the values to compare</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.Overlap(System.Int32[],System.Int32[])">
            <summary>
            Checks that some elements of the array are equal
            </summary>
            <param name="left">the left values</param>
            <param name="right">the right values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreDisjoint(System.Int32[],System.Int32[])">
            <summary>
            Checks that no element of each array are equal
            </summary>
            <param name="left">the left values</param>
            <param name="right">the right values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreEqual(System.Int64,System.Int64)">
            <summary>
            Checks whether two objects are equal
            </summary>
            <param name="expected">the expected value</param>
            <param name="actual">the actual value</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreElementsEqual(System.Int64[],System.Int64[])">
            <summary>
            Checks that arrays have equal elements.
            </summary>
            <param name="expected">the expected values</param>
            <param name="actual">the actual values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreDistinctValues(System.Int64[])">
            <summary>
            Assumes that elements are distinct.
            </summary>
            <param name="values">the values to compare</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.Overlap(System.Int64[],System.Int64[])">
            <summary>
            Checks that some elements of the array are equal
            </summary>
            <param name="left">the left values</param>
            <param name="right">the right values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreDisjoint(System.Int64[],System.Int64[])">
            <summary>
            Checks that no element of each array are equal
            </summary>
            <param name="left">the left values</param>
            <param name="right">the right values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreEqual(System.Int16,System.Int16)">
            <summary>
            Checks whether two objects are equal
            </summary>
            <param name="expected">the expected value</param>
            <param name="actual">the actual value</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreElementsEqual(System.Int16[],System.Int16[])">
            <summary>
            Checks that arrays have equal elements.
            </summary>
            <param name="expected">the expected values</param>
            <param name="actual">the actual values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreDistinctValues(System.Int16[])">
            <summary>
            Assumes that elements are distinct.
            </summary>
            <param name="values">the values to compare</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.Overlap(System.Int16[],System.Int16[])">
            <summary>
            Checks that some elements of the array are equal
            </summary>
            <param name="left">the left values</param>
            <param name="right">the right values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreDisjoint(System.Int16[],System.Int16[])">
            <summary>
            Checks that no element of each array are equal
            </summary>
            <param name="left">the left values</param>
            <param name="right">the right values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreEqual(System.UInt32,System.UInt32)">
            <summary>
            Checks whether two objects are equal
            </summary>
            <param name="expected">the expected value</param>
            <param name="actual">the actual value</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreElementsEqual(System.UInt32[],System.UInt32[])">
            <summary>
            Checks that arrays have equal elements.
            </summary>
            <param name="expected">the expected values</param>
            <param name="actual">the actual values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreDistinctValues(System.UInt32[])">
            <summary>
            Assumes that elements are distinct.
            </summary>
            <param name="values">the values to compare</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.Overlap(System.UInt32[],System.UInt32[])">
            <summary>
            Checks that some elements of the array are equal
            </summary>
            <param name="left">the left values</param>
            <param name="right">the right values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreDisjoint(System.UInt32[],System.UInt32[])">
            <summary>
            Checks that no element of each array are equal
            </summary>
            <param name="left">the left values</param>
            <param name="right">the right values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreEqual(System.UInt64,System.UInt64)">
            <summary>
            Checks whether two objects are equal
            </summary>
            <param name="expected">the expected value</param>
            <param name="actual">the actual value</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreElementsEqual(System.UInt64[],System.UInt64[])">
            <summary>
            Checks that arrays have equal elements.
            </summary>
            <param name="expected">the expected values</param>
            <param name="actual">the actual values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreDistinctValues(System.UInt64[])">
            <summary>
            Assumes that elements are distinct.
            </summary>
            <param name="values">the values to compare</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.Overlap(System.UInt64[],System.UInt64[])">
            <summary>
            Checks that some elements of the array are equal
            </summary>
            <param name="left">the left values</param>
            <param name="right">the right values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreDisjoint(System.UInt64[],System.UInt64[])">
            <summary>
            Checks that no element of each array are equal
            </summary>
            <param name="left">the left values</param>
            <param name="right">the right values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreEqual(System.UInt16,System.UInt16)">
            <summary>
            Checks whether two objects are equal
            </summary>
            <param name="expected">the expected value</param>
            <param name="actual">the actual value</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreElementsEqual(System.UInt16[],System.UInt16[])">
            <summary>
            Checks that arrays have equal elements.
            </summary>
            <param name="expected">the expected values</param>
            <param name="actual">the actual values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreDistinctValues(System.UInt16[])">
            <summary>
            Assumes that elements are distinct.
            </summary>
            <param name="values">the values to compare</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.Overlap(System.UInt16[],System.UInt16[])">
            <summary>
            Checks that some elements of the array are equal
            </summary>
            <param name="left">the left values</param>
            <param name="right">the right values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreDisjoint(System.UInt16[],System.UInt16[])">
            <summary>
            Checks that no element of each array are equal
            </summary>
            <param name="left">the left values</param>
            <param name="right">the right values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreEqual(System.Byte,System.Byte)">
            <summary>
            Checks whether two objects are equal
            </summary>
            <param name="expected">the expected value</param>
            <param name="actual">the actual value</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreElementsEqual(System.Byte[],System.Byte[])">
            <summary>
            Checks that arrays have equal elements.
            </summary>
            <param name="expected">the expected values</param>
            <param name="actual">the actual values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreDistinctValues(System.Byte[])">
            <summary>
            Assumes that elements are distinct.
            </summary>
            <param name="values">the values to compare</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.Overlap(System.Byte[],System.Byte[])">
            <summary>
            Checks that some elements of the array are equal
            </summary>
            <param name="left">the left values</param>
            <param name="right">the right values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreDisjoint(System.Byte[],System.Byte[])">
            <summary>
            Checks that no element of each array are equal
            </summary>
            <param name="left">the left values</param>
            <param name="right">the right values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreEqual(System.SByte,System.SByte)">
            <summary>
            Checks whether two objects are equal
            </summary>
            <param name="expected">the expected value</param>
            <param name="actual">the actual value</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreElementsEqual(System.SByte[],System.SByte[])">
            <summary>
            Checks that arrays have equal elements.
            </summary>
            <param name="expected">the expected values</param>
            <param name="actual">the actual values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreDistinctValues(System.SByte[])">
            <summary>
            Assumes that elements are distinct.
            </summary>
            <param name="values">the values to compare</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.Overlap(System.SByte[],System.SByte[])">
            <summary>
            Checks that some elements of the array are equal
            </summary>
            <param name="left">the left values</param>
            <param name="right">the right values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreDisjoint(System.SByte[],System.SByte[])">
            <summary>
            Checks that no element of each array are equal
            </summary>
            <param name="left">the left values</param>
            <param name="right">the right values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreEqual(System.Guid,System.Guid)">
            <summary>
            Checks whether two objects are equal
            </summary>
            <param name="expected">the expected value</param>
            <param name="actual">the actual value</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreElementsEqual(System.Guid[],System.Guid[])">
            <summary>
            Checks that arrays have equal elements.
            </summary>
            <param name="expected">the expected values</param>
            <param name="actual">the actual values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreDistinctValues(System.Guid[])">
            <summary>
            Assumes that elements are distinct.
            </summary>
            <param name="values">the values to compare</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.Overlap(System.Guid[],System.Guid[])">
            <summary>
            Checks that some elements of the array are equal
            </summary>
            <param name="left">the left values</param>
            <param name="right">the right values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreDisjoint(System.Guid[],System.Guid[])">
            <summary>
            Checks that no element of each array are equal
            </summary>
            <param name="left">the left values</param>
            <param name="right">the right values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreEqual(System.Char,System.Char)">
            <summary>
            Checks whether two objects are equal
            </summary>
            <param name="expected">the expected value</param>
            <param name="actual">the actual value</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreElementsEqual(System.Char[],System.Char[])">
            <summary>
            Checks that arrays have equal elements.
            </summary>
            <param name="expected">the expected values</param>
            <param name="actual">the actual values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreDistinctValues(System.Char[])">
            <summary>
            Assumes that elements are distinct.
            </summary>
            <param name="values">the values to compare</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.Overlap(System.Char[],System.Char[])">
            <summary>
            Checks that some elements of the array are equal
            </summary>
            <param name="left">the left values</param>
            <param name="right">the right values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreDisjoint(System.Char[],System.Char[])">
            <summary>
            Checks that no element of each array are equal
            </summary>
            <param name="left">the left values</param>
            <param name="right">the right values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreEqual(System.String,System.String)">
            <summary>
            Checks whether two objects are equal
            </summary>
            <param name="expected">the expected value</param>
            <param name="actual">the actual value</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreElementsEqual(System.String[],System.String[])">
            <summary>
            Checks that arrays have equal elements.
            </summary>
            <param name="expected">the expected values</param>
            <param name="actual">the actual values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreDistinctValues(System.String[])">
            <summary>
            Assumes that elements are distinct.
            </summary>
            <param name="values">the values to compare</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.Overlap(System.String[],System.String[])">
            <summary>
            Checks that some elements of the array are equal
            </summary>
            <param name="left">the left values</param>
            <param name="right">the right values</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssume.AreDisjoint(System.String[],System.String[])">
            <summary>
            Checks that no element of each array are equal
            </summary>
            <param name="left">the left values</param>
            <param name="right">the right values</param>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexAssume.Func`1">
            <summary>
            A delegate that takes no input and returns a value of type T.
            </summary>
            <typeparam name="T">The return type.</typeparam>
            <returns>Returns a value of type T.</returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexAssume.Predicate">
            <summary>
            A method that takes no argument and returns a <c>bool</c> value.
            </summary>
            <returns>Returns a <c>bool</c>value.</returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexAssume.SafeFailer">
            <summary>
            Unmonitored 'failing' class
            </summary>
            <remarks>
            DO NOT INSTRUMENT THIS CLASS
            </remarks>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexAssumeAttributeBase">
            <summary>
            Abstract base class for Assume attributes
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssumeAttributeBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.PexAssumeAttributeBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssumeAttributeBase.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.PexAssumeAttributeBase"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssumeAttributeBase.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.PexAssumeAttributeBase"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="fieldName">Name of the field.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssumeAttributeBase.ValidateTargetIsNotNull(Microsoft.Pex.Engine.Logging.IPexLog,Microsoft.ExtendedReflection.Metadata.Names.Name)">
            <summary>
            Validates this attribute in the case that the target may not be null.
            </summary>
            <param name="log">The log.</param>
            <param name="targetName">Name of the target.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssumeAttributeBase.ValidateTargetIsDefined(Microsoft.Pex.Engine.Logging.IPexLog,Microsoft.ExtendedReflection.Metadata.Names.Name)">
            <summary>
            Validates that the target is defined.
            </summary>
            <param name="log">The log.</param>
            <param name="targetName">Name of the target.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssumeAttributeBase.GetPreciseType(Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.ExtendedReflection.Collections.ICopyable{Microsoft.ExtendedReflection.Metadata.TypeEx}@,System.Boolean@)">
            <summary>
            Checks a list of types compatible with this domain.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="types">The types.</param>
            <param name="allowOtherTypes">Whether the list of types is exclusive.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexAssumeNotNullAttribute">
            <summary>
            The test fails if the specified parameter is a null reference.
            </summary>
            <remarks>
            This attribute provides a convenient alternative to <see cref="M:Microsoft.Pex.Framework.PexAssume.IsNotNull(System.Object)"/> and
            related overloads.
            </remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssumeNotNullAttribute.#ctor">
            <summary>
            A constructor to be used only on target declarations.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssumeNotNullAttribute.#ctor(System.Type)">
            <summary>
            A constructor for a specified type
            </summary>
            <param name="type">A positional parameter that specifies the type.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssumeNotNullAttribute.#ctor(System.Type,System.String)">
            <summary>
            A constructor for a specified type and public field.
            </summary>
            <param name="declaringType">A positional parameter that specifies the declaring type.</param>
            <param name="fieldName">A positional parameter that specifies the field name.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssumeNotNullAttribute.TryGetInvariant(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,Microsoft.ExtendedReflection.Metadata.Layout,System.Converter{Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term}@)">
            <summary>
            Tries to get an invariant.
            </summary>
            <param name="host">The host.</param>
            <param name="layout">The layout.</param>
            <param name="invariantBuilder">The invariant builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssumeNotNullAttribute.Validate(Microsoft.Pex.Engine.Logging.IPexLog,Microsoft.ExtendedReflection.Metadata.ICustomAttributeProviderEx,Microsoft.ExtendedReflection.Metadata.VisibilityContext)">
            <summary>
            Validates the domain against the target.
            </summary>
            <param name="log"></param>
            <param name="target"></param>
            <param name="visibilityContextOfGeneratedTest"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexClassAttribute">
            <summary>
            Used to specify additional settings about parameterized test methods.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Settings.PexSettingsAttributeBase">
            <summary>
            Base attribute for settings
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Settings.PexSettingsStoreAttributeBase">
            <summary>
            Base class of Pex settings store.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Settings.PexSettingsStoreAttributeBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Settings.PexSettingsStoreAttributeBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Settings.PexSettingsStoreAttributeBase.Lock">
            <summary>
            Locks all properties of this instance.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Settings.PexSettingsStoreAttributeBase.SetValue(System.String,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.InvalidOperationException">the instance has been locked</exception>
        </member>
        <member name="M:Microsoft.Pex.Framework.Settings.PexSettingsStoreAttributeBase.GetValue``1(System.String,``0)">
            <summary>
            Gets a value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Settings.PexSettingsStoreAttributeBase.GetValue``1(System.String)">
            <summary>
            Gets a value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Settings.PexSettingsStoreAttributeBase.GetStringValue(System.String,System.String)">
            <summary>
            Gets the string value.
            </summary>
            <param name="name">The name.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Settings.PexSettingsStoreAttributeBase.GetEnumValue``1(System.String,``0)">
            <summary>
            Gets the enum value.
            </summary>
            <param name="name">The name.</param>
            <param name="defaultValue">The default value.</param>
            <typeparam name="T">must be enum</typeparam>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Settings.PexSettingsStoreAttributeBase.GetIntValue(System.String,System.Int32)">
            <summary>
            Gets the int value.
            </summary>
            <param name="name">The name.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Settings.PexSettingsStoreAttributeBase.GetBoolValue(System.String)">
            <summary>
            Gets the bool value.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Settings.PexSettingsStoreAttributeBase.TryGetValue(System.String,System.Object@)">
            <summary>
            Tries to query the value.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Settings.PexSettingsStoreAttributeBase.OverrideSettings(Microsoft.Pex.Framework.Settings.PexSettingsStoreAttributeBase)">
            <summary>
            Overrides the settings.
            </summary>
            <param name="attribute">The attribute.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Settings.PexSettingsStoreAttributeBase.IntegrateSettings(Microsoft.Pex.Framework.Settings.PexSettingsStoreAttributeBase)">
            <summary>
            Integrates settings from attribute that have not been set in
            the current store yet
            </summary>
            <param name="attribute"></param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Settings.PexSettingsStoreAttributeBase.WriteXml(Microsoft.ExtendedReflection.Utilities.Safe.Xml.SafeSimpleXmlWriter)">
            <summary>
            Writes the settings as XML attributes
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Settings.PexSettingsStoreAttributeBase.CopyValues(Microsoft.Pex.Framework.Settings.PexSettingsStoreAttributeBase)">
            <summary>
            Copies the values to <paramref name="attribute"/>
            </summary>
            <param name="attribute">The attribute.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Settings.PexSettingsStoreAttributeBase.ToCustomAttribute">
            <summary>
            Creates a custom attribute
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.Settings.PexSettingsStoreAttributeBase.ContainsSettings">
            <summary>
            Gets a value indicating whether this instance has settings that
            have been set.
            </summary>
            <value><c>true</c> if it contains settings; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Settings.PexSettingsStoreAttributeBase.ActiveSettings">
            <summary>
            Gets the list of settings name that have been set
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Settings.PexSettingsAttributeBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Settings.PexSettingsAttributeBase"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Framework.Settings.PexSettingsAttributeBase.Categories">
            <summary>
            A named parameter that specifies the fixture categories.
            </summary>
            <value>The categories.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Settings.PexSettingsAttributeBase.MaxExecutionTreeNodes">
            <summary>
            A named parameter that specifies the maximum number of execution tree nodes.
            </summary>
            <value>The maximum number of nodes.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Settings.PexSettingsAttributeBase.MaxBranches">
            <summary>
            A named parameter that specifies the maximum number of branches that can be taken
            along a single execution path.
            </summary>
            <value>The maximum number of branches.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Settings.PexSettingsAttributeBase.MaxSequenceLength">
            <summary>
            A named parameter that specifies maximum number of method calls that can be performed
            to construct an object of a given type.
            </summary>
            <value>The maximmum number of method calls.</value>
            <remarks>This parameter applies only when no custom exploration strategy is configured.</remarks>
        </member>
        <member name="P:Microsoft.Pex.Framework.Settings.PexSettingsAttributeBase.MaxRuns">
            <summary>
            A named parameter that specifies maximum number of runs that will be tried during an exploration.
            </summary>
            <value>The maximum number of runs.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Settings.PexSettingsAttributeBase.MaxRunsWithUniquePaths">
            <summary>
            A named parameter that specifies the maximum number of runs that Pex will attempt which
            result in distinct execution paths.
            </summary>
            <value>The maximum number of distinct paths.</value>
            <remarks>If the program is non-deterministic, or Pex cannot capture all constraints,
            some runs may follow the same execution paths.</remarks>
        </member>
        <member name="P:Microsoft.Pex.Framework.Settings.PexSettingsAttributeBase.MaxRunsWithoutNewTests">
            <summary>
            A named parameter that specifies the maximum number of .
            </summary>
            <value>The maximum number of consecutive runs that do not yield any new tests.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Settings.PexSettingsAttributeBase.MaxCalls">
            <summary>
            A named parameter that specifies the maximum number of method calls during an exploration.
            </summary>
            <value>The maximum number of method calls.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Settings.PexSettingsAttributeBase.MaxStack">
            <summary>
            A named parameter that specifies the maximum stack size during an exploration
            </summary>
            <value>The maximum stack size.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Settings.PexSettingsAttributeBase.MaxConditions">
            <summary>
            A named parameter that specifies the maximum number of conditions
            over the inputs that can be checked during a single execution path.
            </summary>
            <value>The maximum conditions that can be checked during a single execution path.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Settings.PexSettingsAttributeBase.MaxExceptions">
            <summary>
            A named parameter that specifies the maximum number of new exceptions before stopping.
            </summary>
            <value>The maximum number of new exceptions before stopping.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Settings.PexSettingsAttributeBase.MaxWorkingSet">
            <summary>
            A named parameter that specifies the maximum working set.
            </summary>
            <value>The max working set, in MB.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Settings.PexSettingsAttributeBase.MaxConstraintSolverTime">
            <summary>
            A named parameter that specifies the constraint solver's time out value.
            </summary>
            <value>The constraint solver's time out value, in seconds.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Settings.PexSettingsAttributeBase.MaxConstraintSolverMemory">
             <summary>
            A named parameter that specifies the constraint solver's memory limit.
             </summary>
             <value>The constraint solver's memory limit, in MB.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Settings.PexSettingsAttributeBase.Timeout">
            <summary>
            A named parameter that specifies the exploration time out value.
            </summary>
            <value>The time out value, in seconds.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Settings.PexSettingsAttributeBase.NoFixSuggestions">
            <summary>
            A named parameter that specifies whether to disable the computation of suggested fixes.
            </summary>
            <value>Set to <c>true</c> to disable the computation of suggested fixes and <c>false</c> otherwise.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Settings.PexSettingsAttributeBase.DisablePostAnalysis">
            <summary>
            A named parameter that specifies whether to disable the post analysis.
            </summary>
            <value>Set to <c>true</c> to disable the post analysis and <c>false</c> otherwise.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Settings.PexSettingsAttributeBase.TestClassName">
            <summary>
            A named parameter that specifies the format string for the the test class name.
            </summary>
            <value>The test class name's format string.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Settings.PexSettingsAttributeBase.TestExcludePathBoundsExceeded">
            <summary>
            A named parameter that specifies whether to ignore execution paths that exceed <see cref="P:Microsoft.Pex.Framework.Settings.PexSettingsAttributeBase.MaxCalls"/>,
            <see cref="P:Microsoft.Pex.Framework.Settings.PexSettingsAttributeBase.MaxBranches"/> or <see cref="P:Microsoft.Pex.Framework.Settings.PexSettingsAttributeBase.MaxConditions"/>.
            </summary>
            <value>Set this value to <c>true</c> to ignore execution paths that exceed <see cref="P:Microsoft.Pex.Framework.Settings.PexSettingsAttributeBase.MaxCalls"/>,
            <see cref="P:Microsoft.Pex.Framework.Settings.PexSettingsAttributeBase.MaxBranches"/> or <see cref="P:Microsoft.Pex.Framework.Settings.PexSettingsAttributeBase.MaxConditions"/> and <c>false</c> otherwise.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Settings.PexSettingsAttributeBase.TestEmissionFilter">
            <summary>
            A named parameter that specifies grounds on which Pex should generate test cases.
            </summary>
            <value>Which test cases Pex should emit.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Settings.PexSettingsAttributeBase.IncludeNonFinalSegmentCoverage">
            <summary>
            A named parameter that specifies whether Pex should include non-final segment coverage
            in coverage reports and when deciding whether to emit tests.
            </summary>
            <value>Set this value to <c>true</c> to include non-final segment coverage and <c>false</c> otherwise.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Settings.PexSettingsAttributeBase.TestEmissionBranchHits">
            <summary>
            A named parameter that specifies whether Pex can emit a new test case if the branch coverage increases, 
            considering how often branches have been hit, capped by this option.
            </summary>
            <value>The max branch hits.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Settings.PexSettingsAttributeBase.ObserveChoices">
            <summary>
            A value that indicates whether choices should be observed in the parameter table.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Framework.Settings.PexSettingsAttributeBase.NoSoftSubstitutions">
            <summary>
            Experimental.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Framework.Settings.PexSettingsAttributeBase.ThreadApartmentState">
            <summary>
            A named parameter that specifies in which apartment state the test thread should be.
            </summary>
            <value>The test thread's apartment state, STA or MTA.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Settings.PexSettingsAttributeBase.NotReproducible">
            <summary>
            A named parameter that specifies whether generated tests are not reproducible
            </summary>
            <value>Set this parameter to <c>true</c> to specify that generated tests are not
            reproducible and <c>false</c> otherwise.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Settings.PexSettingsAttributeBase.DisableObservableAssertions">
            <summary>
            A named parameter that specifies whether observed values should not be asserted
            </summary>
            <value>Set this parameter to <c>true</c> to specify that Pex should not assert observed values
            and <c>false</c> otherwise.</value>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexClassAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.PexClassAttribute"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexClassAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.PexClassAttribute"/> class.
            </summary>
            <param name="typeUnderTest">The type under test.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexClassAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.PexClassAttribute"/> class.
            </summary>
            <param name="typeUnderTestAssemblyName">the type under test assembly name</param>
            <param name="typeUnderTestFullName">the type under test type name</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexClassAttribute.CreateFixtures(Microsoft.Pex.Engine.PexAssembly,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Creates the fixtures.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.PexClassAttribute.TypeUnderTest">
            <summary>
            Gets or sets the type under test.
            </summary>
            <value>The type under test.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.PexClassAttribute.Suite">
            <summary>
            Gets or sets the fixture suite.
            </summary>
            <value>The suite.</value>
        </member>
        <member name="T:Microsoft.Pex.Framework.Validation.PexExpectedCoverageAttribute">
            <summary>
            Exploration decorator that verifies that a coverage level is achieved
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexExpectedCoverageAttribute.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Validation.PexExpectedCoverageAttribute"/> class.
            </summary>
            <param name="expectedRelativeCoveragePercentage">The expected coverage.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexExpectedCoverageAttribute.TryCreateExplorationGoal(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,Microsoft.Pex.Engine.Goals.IPexExplorationGoal@)">
            <summary>
            Tries to create an exploration goal instance
            </summary>
            <param name="host"></param>
            <param name="goal"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.Validation.PexExpectedCoverageAttribute.ExpectedDynamicCoveragePercentile">
            <summary>
            Gets the expected coverage.
            </summary>
            <value>The expected coverage.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Validation.PexExpectedCoverageAttribute.Operator">
            <summary>
            Gets or sets the operator.
            </summary>
            <value>The operator.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Validation.PexExpectedCoverageAttribute.Unit">
            <summary>
            Gets or sets the unit.
            </summary>
            <value>The unit.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Validation.PexExpectedCoverageAttribute.DebugOnly">
            <summary>
            Gets or sets a value indicating whether this attribute should only be applied in debug builds.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Framework.Validation.PexExpectedCoverageAttribute.ReleaseOnly">
            <summary>
            Gets or sets a value indicating whether this attribute should only be applied in release builds.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Validation.PexExpectedCoverageOperator">
            <summary>
            Comparison available for coverage data
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Validation.PexExpectedCoverageOperator.GreaterThanOrEquals">
            <summary>
            Coverage must be greater than or equal to the given coverage target
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Validation.PexExpectedCoverageOperator.LessThanOrEquals">
            <summary>
            Coverage must be less than or equal to the given coverage target
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Validation.PexExpectedTestsAttribute">
            <summary>
            Attribute to specify expected numbers of tests
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexExpectedTestsAttribute.TryCreateExplorationGoal(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,Microsoft.Pex.Engine.Goals.IPexExplorationGoal@)">
            <summary>
            Tries to create an exploration goal instance
            </summary>
            <param name="host"></param>
            <param name="goal"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.Validation.PexExpectedTestsAttribute.TotalCount">
            <summary>
            Gets or sets the total count.
            </summary>
            <value>The total count.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Validation.PexExpectedTestsAttribute.TotalMinimumCount">
            <summary>
            Gets or sets the total minimum count.
            </summary>
            <value>The total count.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Validation.PexExpectedTestsAttribute.DuplicateCount">
            <summary>
            Gets or sets the duplicate count.
            </summary>
            <value>The duplicate count.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Validation.PexExpectedTestsAttribute.FailureCount">
            <summary>
            Gets or sets the failure count.
            </summary>
            <value>The failure count.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Validation.PexExpectedTestsAttribute.NewCount">
            <summary>
            Gets or sets the new count.
            </summary>
            <value>The new count.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Validation.PexExpectedTestsAttribute.InconclusiveCount">
            <summary>
            Gets or sets the inconclusive count.
            </summary>
            <value>The inconclusive count.</value>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexPlatform">
            <summary>
            Supported bitness for an exploration
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.PexPlatform.AnyCPU">
            <summary>
            Any process bitness
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.PexPlatform.I386">
            <summary>
            32-bit only processes
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.PexPlatform.Amd64">
            <summary>
            64-bit only processes
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexExplorationAttributeBase">
            <summary>
            Abstract base class for exploration attributes
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexExplorationAttributeBase.ValidateMethod(Microsoft.Pex.Engine.Logging.IPexLog,Microsoft.ExtendedReflection.Metadata.MethodDefinition)">
            <summary>
            Validates the method.
            </summary>
            <param name="log">The log.</param>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexExplorationAttributeBase.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexExplorationAttributeBase.CreateEmptyClone">
            <summary>
            Creates a empty clone of the attribute
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.PexExplorationAttributeBase.SupportedPlatform">
            <summary>
            Speficies the supported bitness for this test
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexFactoryMethodAttribute">
            <summary>
            Tags factory methods used to instantiate objects. The method must be visible, static in a static class.
            </summary>
            <remarks>
            This attribute is attached to a method to indicate
            the actual type of the values returned by the method.
            </remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexFactoryMethodAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.PexFactoryMethodAttribute"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexFactoryMethodAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.PexFactoryMethodAttribute"/> class.
            </summary>
            <param name="factoredType">Type of the factored.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexFactoryMethodAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.PexFactoryMethodAttribute"/> class.
            </summary>
            <param name="factoredTypeAssembly">The factored type assembly.</param>
            <param name="factoredTypeFullName">Full name of the factored type.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexFactoryMethodAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.PexFactoryMethodAttribute"/> class.
            </summary>
            <param name="factoredTypeAssembly">The factored type assembly.</param>
            <param name="factoredTypeFullName">Full name of the factored type.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexFactoryMethodAttribute.TryGetFactoredType(Microsoft.ExtendedReflection.Metadata.TypeEx@)">
            <summary>
            Gets the factored type.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Suppression.PexIgnoreAttribute">
            <summary>
            Marks a fixture or exploration to be ignored from the execution
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Suppression.PexIgnoreAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Suppression.PexIgnoreAttribute"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Suppression.PexIgnoreAttribute.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.Suppression.PexIgnoreAttribute.Message">
            <summary>
            Gets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Suppression.PexIgnoreAttribute.WorkItemId">
            <summary>
            Gets or sets the work item id.
            </summary>
            <value>The work item id.</value>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexMethodAttribute">
            <summary>
            Identifies a method as a Pex parameterized unit test.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexMethodAttribute.CreateEmptyClone">
            <summary>
            Creates a empty clone of the attribute
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexMethodAttribute.ValidateMethod(Microsoft.Pex.Engine.Logging.IPexLog,Microsoft.ExtendedReflection.Metadata.MethodDefinition)">
            <summary>
            Validates the method.
            </summary>
            <param name="log">The log.</param>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexChoose">
            <summary>
            Supplies auxiliary input values to a test method.
            </summary>
            <remarks>
            <para>
            <c>PexChoose</c> methods do not determine whether a test passes or fails, they simply
            specify input values. You must still use <see cref="T:Microsoft.Pex.Framework.PexAssume"/> and
            <see cref="T:Microsoft.Pex.Framework.PexAssert"/> to restrict input values and define whether a test passes or fails.
            </para>
            <para>
            All <c>PexChoose</c> methods have a user-defined assigned name, which is used for purposes
            such as column headings in a parameter table. Some methods take a "short" name which is passed to a user-implemented
            object that supports <c>INamed</c>. The object converts the short name into a full name that is then used by Pex.
            The object could be used, for example, to create a scoped name from a short name, such as converting shortName
            to A.B.shortName.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexChoose.EnumValue``1(Microsoft.Moles.Framework.Behaviors.INamed,System.String)">
            <summary>
            Gets a value from a specified <c>enum</c> type.
            </summary>
            <overloads>Gets a value from a specified <c>enum</c> type.</overloads>
            <typeparam name="T">The <c>enum</c> type.</typeparam>
            <param name="parent">A user-implemented object that converts <paramref name="shortName"/> to
            the full name that is used by Pex.</param>
            <param name="shortName">A short name, which is converted to a full name by
            <paramref name="parent"/>.</param>
            <returns>Returns a value from the enum.</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexChoose.EnumValue``1(System.String)">
            <summary>
            Gets a value from a specified <c>enum</c> type.
            </summary>
            <typeparam name="T">The <c>enum</c> type.</typeparam>
            <param name="name">A name.</param>
            <returns>Returns a value from the enum.</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexChoose.Value``1(Microsoft.Moles.Framework.Behaviors.INamed,System.String)">
            <summary>
            Gets a value of a specified type. 
            </summary>
            <overloads>Gets a value of a specified type. </overloads>
            <typeparam name="T">The value's type.</typeparam>
            <param name="parent">A user-implemented object that converts <paramref name="shortName"/> to
            the full name that is used by Pex.</param>
            <param name="shortName">A short name, which is converted to a full name by
            <paramref name="parent"/>.</param>
            <returns>Returns a value of type T.</returns>
            <remarks>Uses the owner and the property name to generate a choice key.</remarks>
            <seealso cref="M:Microsoft.Pex.Framework.PexChoose.ValueNotNull``1(Microsoft.Moles.Framework.Behaviors.INamed,System.String)"/>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexChoose.Value``1(System.String)">
            <summary>
            Gets a value of a specified type.
            </summary>
            <typeparam name="T">The value's type.</typeparam>
            <param name="name">The value's name.</param>
            <returns>Returns a value of type T.</returns>
            <seealso cref="M:Microsoft.Pex.Framework.PexChoose.ValueNotNull``1(System.String)"/>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexChoose.ValueNotNull``1(Microsoft.Moles.Framework.Behaviors.INamed,System.String)">
            <summary>
            Gets a non-null value of a specified type.
            </summary>
            <overloads>Gets a non-null value of a specified type.</overloads>
            <typeparam name="T">The value's type.</typeparam>
            <param name="parent">A user-implemented object that converts <paramref name="shortName"/> to
            the full name that is used by Pex.</param>
            <param name="shortName">A short name, which is converted to a full name by
            <paramref name="parent"/>.</param>
            <returns>Returns a non-null value of type T.</returns>
            <seealso cref="M:Microsoft.Pex.Framework.PexChoose.Value``1(Microsoft.Moles.Framework.Behaviors.INamed,System.String)"/>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexChoose.ValueNotNull``1(System.String)">
            <summary>
            Gets a non-null value of a specified type.
            </summary>
            <typeparam name="T">The value's type.</typeparam>
            <param name="name">The value's name.</param>
            <returns>Returns a non-null value of type T.</returns>
            <seealso cref="M:Microsoft.Pex.Framework.PexChoose.Value``1(Microsoft.Moles.Framework.Behaviors.INamed,System.String)"/>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexChoose.ValueFrom``1(Microsoft.Moles.Framework.Behaviors.INamed,System.String,``0[])">
            <summary>
            Gets a value from an argument list.
            </summary>
            <overloads>Gets a value from an argument list.</overloads>
            <typeparam name="T">The value's type.</typeparam>
            <param name="parent">A user-implemented object that converts <paramref name="shortName"/> to
            the full name that is used by Pex.</param>
            <param name="shortName">A short name, which is converted to a full name by
            <paramref name="parent"/>.</param>
            <param name="values">One or more arguments of type T.</param>
            <returns>Returns a value from the argument list.</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexChoose.ValueFrom``1(System.String,``0[])">
            <summary>
            Gets a value from an argument list.
            </summary>
            <typeparam name="T">The value's type.</typeparam>
            <param name="name">The value's name.</param>
            <param name="values">One or more arguments of type T.</param>
            <returns>Returns a value from the argument list.</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexChoose.ValueFromRange(Microsoft.Moles.Framework.Behaviors.INamed,System.String,System.Int32,System.Int32)">
            <summary>
            Gets an integer from a specified range.
            </summary>
            <overloads>Gets a integer from a specified range.</overloads>
            <param name="parent">A user-implemented object that converts <paramref name="shortName"/> to
            the full name that is used by Pex.</param>
            <param name="shortName">A short name, which is converted to a full name by
            <paramref name="parent"/>.</param>
            <param name="minInclusive">The range's lower bound, which is inclusive.</param>
            <param name="maxExclusive">The range's upper bound, which is exclusive.</param>
            <returns>Returns an integer from the specified range.</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexChoose.ValueFromRange(System.String,System.Int32,System.Int32)">
            <summary>
            Gets an integer from a specified range.
            </summary>
            <param name="name">The value's name</param>
            <param name="minInclusive">The range's lower bound, which is inclusive.</param>
            <param name="maxExclusive">The range's upper bound, which is exclusive.</param>
            <returns>Returns an integer from the specified range.</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexChoose.IndexValue``1(Microsoft.Moles.Framework.Behaviors.INamed,System.String,``0[])">
            <summary>
            Gets an index value from a specified array.
            </summary>
            <overloads>Gets an index value from a specified array.</overloads>
            <typeparam name="T">The array type.</typeparam>
            <param name="parent">A user-implemented object that converts <paramref name="shortName"/> to
            the full name that is used by Pex.</param>
            <param name="shortName">A short name, which is converted to a full name by
            <paramref name="parent"/>.</param>
            <param name="values">An array of type T.</param>
            <returns>Returns an index value from the array.</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexChoose.IndexValue``1(System.String,``0[])">
            <summary>
            Gets an index value from a specified array.
            </summary>
            <typeparam name="T">The array type.</typeparam>
            <param name="name">The value's name.</param>
            <param name="values">An array of type T.</param>
            <returns>Returns an index value from the array.</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexChoose.Value``1(Microsoft.Moles.Framework.Behaviors.INamed,System.String,System.Boolean,System.Boolean,System.Type[])">
            <summary>
            Gets a value from an argument list that is compatible with the specified type.
            </summary>
            <param name="parent">A user-implemented object that converts <paramref name="shortName"/> to
            the full name that is used by Pex.</param>
            <param name="shortName">A short name, which is converted to a full name by
            <paramref name="parent"/>.</param>
            <param name="nonNull">Set to <c>true</c> if the value must be non-null, an <c>false</c> otherwise.</param>
            <param name="allowSubtypes">Set to <c>true</c> to allow <c>Value</c> to also return subtypes of the specified type
            and <c>false</c> otherwise.</param>
            <param name="types">One or more <c>Type</c> objects.</param>
            <returns>Returns a value from one of the types in the argument list, including subtypes of those arguments if <paramref name="nonNull"/>
            set to <c>true</c>.</returns>
            <typeparam name="T">The value's type.</typeparam>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexChoose.Value``1(System.String,System.Boolean,System.Boolean,System.Type[])">
            <summary>
            Gets a value from an argument list that is compatible with the specified type.
            </summary>
            <typeparam name="T">The value's type.</typeparam>
            <param name="name">The value's name.</param>
            <param name="nonNull">Set to <c>true</c> if the value must be non-null, an <c>false</c> otherwise.</param>
            <param name="allowSubtypes">Set to <c>true</c> to allow <c>Value</c> to also return subtypes of the specified type
            and <c>false</c> otherwise.</param>
            <param name="types">One or more <c>Type</c> objects.</param>
            <returns>Returns a value from one of the types in the argument list, including subtypes of those arguments if
            <paramref name="nonNull"/> set to <c>true</c>.</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexChoose.Array``1(System.String,System.Int32)">
            <summary>
            Gets an array of a specified type and length.
            </summary>
            <overloads>Gets an array of a specified type and length.</overloads>
            <typeparam name="T">The array type.</typeparam>
            <param name="name">The array's name.</param>
            <param name="length">The array length.</param>
            <returns>Returns an array of the specified type and length.</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexChoose.Array``1(Microsoft.Moles.Framework.Behaviors.INamed,System.String,System.Int32)">
            <summary>
            Gets an array of a specified type and length.
            </summary>
            <typeparam name="T">The array type.</typeparam>
            <param name="named">A user-implemented object that converts <paramref name="shortName"/> to
            the full name that is used by Pex.</param>
            <param name="shortName">A short name, which is converted to a full name by
            <paramref name="named"/>.</param>
            <param name="length">The array length.</param>
            <returns>Returns an array of the specified type and length.</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexChoose.ThrowMaybe``1(Microsoft.Moles.Framework.Behaviors.INamed,System.String)">
            <summary>
            Allows Pex to throw an exception of a specified type.
            </summary>
            <overloads>Allows Pex to throw an exception of a specified type.</overloads>
            <typeparam name="TException">The exception type.</typeparam>
            <param name="parent">A user-implemented object that converts <paramref name="shortName"/> to
            the full name that is used by Pex.</param>
            <param name="shortName">A short name, which is converted to a full name by
            <paramref name="parent"/>.</param>
            <remarks><typeparamref name="TException"/> must have a public default constructor.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexChoose.ThrowMaybe``1(System.String)">
            <summary>
            Allows Pex to throw an exception of a specified type.
            </summary>
            <typeparam name="TException">The exception type.</typeparam>
            <param name="name">The exception's name.</param>
            <remarks><typeparamref name="TException"/> must have a public default constructor.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexChoose.ThrowMaybe(Microsoft.Moles.Framework.Behaviors.INamed,System.String,System.Type[])">
            <summary>
            Allows Pex to throw an exception from a list of exception types.
            </summary>
            <param name="parent">A user-implemented object that converts <paramref name="shortName"/> to
            the full name that is used by Pex.</param>
            <param name="shortName">A short name, which is converted to a full name by
            <paramref name="parent"/>.</param>
            <param name="exceptionTypes">One or more exception types.</param>
            <remarks>The types in <paramref name="exceptionTypes"/> must have public default constructors.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexChoose.ThrowMaybe(System.String,System.Type[])">
            <summary>
            Allows Pex to throw an exception from a list of exception types.
            </summary>
            <param name="name">The exception's name.</param>
            <param name="exceptionTypes">One or more exception types.</param>
            <remarks>The types in <paramref name="exceptionTypes"/> must have public default constructors.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexChoose.ThrowMaybe(System.String,Microsoft.Pex.Framework.PexChoose.ExceptionFactory[])">
            <summary>
            Allows Pex to throw one of the exceptions provided by a list of exception factories.
            </summary>
            <param name="name">The exception's name.</param>
            <param name="exceptionFactories">One or more user-implemented exception factory delegates.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexChoose.ThrowMaybe(Microsoft.Moles.Framework.Behaviors.INamed,System.String,Microsoft.Pex.Framework.PexChoose.ExceptionFactory[])">
            <summary>
            Allows Pex to throw one of the exceptions provided by a list of exception factories.
            </summary>
            <param name="parent">A user-implemented object that converts <paramref name="shortName"/> to
            the full name that is used by Pex.</param>
            <param name="shortName">A short name, which is converted to a full name by
            <paramref name="parent"/>.</param>
            <param name="exceptionFactories">One or more user-implemented exception factory delegates.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexChoose.CreateDelegate``1">
            <summary>
            Creates a delegate of type <typeparamref name="TDelegate"/>.
            </summary>
            <typeparam name="TDelegate">The delegate type.</typeparam>
            <returns>Returns the delegate.</returns>
            <remarks>The delegate cannot support <c>out</c> or <c>ref</c> parameters.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexChoose.TryCreateDelegate(Microsoft.ExtendedReflection.Metadata.TypeEx,System.Object@)">
            <summary>
            Attempts to create a delegate of a specified type.
            </summary>
            <param name="delegateType">The delegate's type.</param>
            <param name="delegate">Receives the delegate.</param>
            <returns>Returns <c>true</c> if the delegate was successfully created and <c>false</c> otherwise.</returns>
            <remarks>The delegate cannot support <c>out</c> or <c>ref</c> parameters.</remarks>
        </member>
        <member name="P:Microsoft.Pex.Framework.PexChoose.Behavior">
            <summary>
            Gets the 'choice' enabled behavior
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Framework.PexChoose.MoleBehavior">
            <summary>
            Gets the 'choice' enable mole behavior
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexChoose.Replay">
            <summary>
            Helper methods to support test execution.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexChoose.Replay.Setup">
            <summary>
            Initializes for test.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexChoose.Internal">
            <summary>
            Helper methods to support the infrastucture.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexChoose.Internal.Initialize(Microsoft.Pex.Engine.Choices.IPexChoiceProvider)">
            <summary>
            Initialization of the oracle with a particular provider.
            </summary>
            <param name="provider"></param>
        </member>
        <member name="P:Microsoft.Pex.Framework.PexChoose.Internal.Provider">
            <summary>
            Retrieves a method-call specific oracle.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexChoose.ExceptionFactory">
            <summary>
            A user-implemented delegate that creates an exception object.
            </summary>
            <returns>Returns an exception object.</returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexChoose.DelegateCompiler.PexChooseDelegateCompiler">
            <summary>
            This helper class takes care of compiling delegates in
            a protected setting.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexSymbolicValue">
            <summary>
            Helper functions to deal with 
            symbolic inputs
            </summary>
            <remarks>
            DOT NOT INSTRUMENT THIS CLASS
            </remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexSymbolicValue.Ignore``1(``0)">
            <summary>
            Forgets all constraints associated with passed value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexSymbolicValue.IgnoreComputation``1(Microsoft.Pex.Framework.PexSymbolicValue.Function{``0})">
            <summary>
            Evaluates a given function, but forgets all constraints associated with the computation of the result.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="function">The function.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexSymbolicValue.IgnoreComputation(Microsoft.Pex.Framework.PexSymbolicValue.Action)">
            <summary>
            Performs a given action, but forgets all constraints associated with the computation.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexSymbolicValue.IgnoreEnumeration``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Forgets all constraints associated with the enumeration
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexSymbolicValue.Derive``1(``0,System.Double)">
            <summary>
            Computes the derivative of formula with respect to variable
            </summary>
            <typeparam name="TFormula"></typeparam>
            <param name="formula"></param>
            <param name="variable"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexSymbolicValue.ToString``1(``0)">
            <summary>
            Turns a value into a string that represents the symbolic value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexSymbolicValue.IsSymbolic``1(``0)">
            <summary>
            Checks whether the given value has any symbolic information attached to it.
            In other words, it checks whether the value was derived from the test inputs.
            Note that this check only applies to the given value itself,
            and not to its fields if it is an object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexSymbolicValue.ToRawString``1(``0)">
            <summary>
            Turns a value into a string that represents the symbolic value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexSymbolicValue.GetPathConditionString">
            <summary>
            Gets a textual representation of the path condition at this point.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexSymbolicValue.GetRawPathConditionString">
            <summary>
            Gets a textual representation of the path condition at this point.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexSymbolicValue.GetRelevantInputNames``1(``0)">
            <summary>
            Gets a textual representation of inputs directly or indirect affecting the given value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexSymbolicValue.Minimize(System.UInt32)">
            <summary>
            Instruct Pex to minimize a particular value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexSymbolicValue.Minimize(System.UInt64)">
            <summary>
            Instruct Pex to minimize a particular value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexSymbolicValue.Minimize(System.Int32)">
            <summary>
            Instruct Pex to minimize a particular value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexSymbolicValue.Minimize(System.Int64)">
            <summary>
            Instruct Pex to minimize a particular value.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexSymbolicValue.Function`1">
            <summary>
            A delegate representing a nullary function.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexSymbolicValue.Action">
            <summary>
            A delegate representing a nullary method.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexSymbolicValue.Assert">
            <summary>
            Assertions without constraints
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexSymbolicValue.Assert.True(System.Boolean)">
            <summary>
            Unmonitored assert
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexSymbolicValue.Internal">
            <summary>
            Internal helper methods
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexSymbolicValue.Internal.LoopVar``1(System.String,``0)">
            <summary>
            Identity; associates a value with a symbolic name.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns></returns>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexSymbolicValue.Internal.CheckArgument(System.Boolean,System.String)">
            <summary>
            Checks the argument predicate.
            </summary>
            <param name="value">The value.</param>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexSymbolicValue.Internal.CheckArgumentNotNull(System.Object,System.String)">
            <summary>
            Checks the argument is not null.
            </summary>
            <param name="value">The value.</param>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexSymbolicValue.Internal.CheckArgumentElementsNotNull``1(``0[],System.String)">
            <summary>
            Checks the argument is not null.
            </summary>
            <param name="value">The value.</param>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexSymbolicValue.Internal.CheckArgumentNotNullOrEmpty``1(``0[],System.String)">
            <summary>
            Checks the argument is not null.
            </summary>
            <param name="value">The value.</param>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexSymbolicValue.Internal.CheckArgumentNotNullOrEmpty(System.String,System.String)">
            <summary>
            Checks the argument is not null.
            </summary>
            <param name="value">The value.</param>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexSymbolicValue.Internal.CheckArgumentOutOfRange(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Checks indices whitin bounds.
            </summary>
            <param name="index"></param>
            <param name="count"></param>
            <param name="length"></param>
            <param name="parameterNames"></param>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexAssumeUnderTestAttribute">
            <summary>
            Defines a test target: not null and precise type matching.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssumeUnderTestAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.PexAssumeUnderTestAttribute"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssumeUnderTestAttribute.TryGetInvariant(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,Microsoft.ExtendedReflection.Metadata.Layout,System.Converter{Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term}@)">
            <summary>
            Tries to get an invariant.
            </summary>
            <param name="host">The host.</param>
            <param name="layout">The layout.</param>
            <param name="invariantBuilder">The invariant builder.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssumeUnderTestAttribute.Validate(Microsoft.Pex.Engine.Logging.IPexLog,Microsoft.ExtendedReflection.Metadata.ICustomAttributeProviderEx,Microsoft.ExtendedReflection.Metadata.VisibilityContext)">
            <summary>
            Validates the domain against the target
            </summary>
            <param name="log"></param>
            <param name="target"></param>
            <param name="visibilityContextOfGeneratedTest"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.Sequences.PexRandomTargetStrategyAttribute">
            <summary>
            Random target strategy
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Sequences.PexTargetStrategyFactoryAttributeBase">
            <summary>
            Abstract base class to define target strategy factories.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Sequences.PexTargetStrategyFactoryAttributeBase.CreateStrategy(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,Microsoft.ExtendedReflection.Metadata.CodeBranch)">
            <summary>
            Creates the strategy.
            </summary>
            <param name="host">The host.</param>
            <param name="codeBranch">The code branch.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Sequences.PexTargetStrategyFactoryAttributeBase.BeforeExploration(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent)">
            <summary>
            Callback that is executed before the exploration starts.
            </summary>
            <param name="host">The host.</param>
            <returns>some data</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Sequences.PexRandomTargetStrategyAttribute.CreateStrategy(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,Microsoft.ExtendedReflection.Metadata.CodeBranch)">
            <summary>
            Creates the strategy.
            </summary>
            <param name="host">The host.</param>
            <param name="codeBranch">The code branch.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.Settings.PexAssemblySettingsAttribute">
            <summary>
            Assembly level settings attribute
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Settings.PexAssemblySettingsAttribute.testCopyright">
            <summary>
            Gets the copyright header to be added on generated files
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Settings.PexAssemblySettingsAttribute.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.Settings.PexAssemblySettingsAttribute.TestFramework">
            <summary>
            Gets or sets the test framework.
            </summary>
            <value>The test framework.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Settings.PexAssemblySettingsAttribute.TestLanguage">
            <summary>
            Gets or sets the test language.
            </summary>
            <value>The test language.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Settings.PexAssemblySettingsAttribute.TestNoPartialClasses">
            <summary>
            Gets or sets a value indicating whether no partial classes should be emitted.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Framework.Settings.PexAssemblySettingsAttribute.TestNoClassAttribute">
            <summary>
            Gets or sets a value indicating whether no test classes should be emitted.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Framework.Settings.PexAssemblySettingsAttribute.TestOverrideReadonly">
            <summary>
            Gets or sets a value indicating whether readonly files should be overridden.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Framework.Settings.PexAssemblySettingsAttribute.TestGenerateDuplicates">
            <summary>
            Gets or sets a value indicating whether duplicate tests should be emitted.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Framework.Settings.PexAssemblySettingsAttribute.TestRootNamespace">
            <summary>
            Gets or sets the test root namespace.
            </summary>
            <value>The test root namespace.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Settings.PexAssemblySettingsAttribute.TestForceFixtureSetupTeardown">
            <summary>
            Gets or sets a value indicating whether 
            fixture setup and teardown methods 
            should be executed on each test.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Framework.Settings.PexAssemblySettingsAttribute.TestCopyright">
            <summary>
            Gets or sets the test copyright that is inserted into all generated test case files.
            </summary>
            <value>The test copyright.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Settings.PexAssemblySettingsAttribute.RequiredDynamicCoveragePercentile">
            <summary>
            Gets or sets the required coverage percentile.
            </summary>
            <value>The required coverage percentile.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Settings.PexAssemblySettingsAttribute.SeparateAppDomain">
            <summary>
            Gets or sets a value indicating whether a separate app domain should be used.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Framework.Settings.PexAssemblySettingsAttribute.Trust">
            <summary>
            Gets or sets the sandboxing security level. See <see cref="T:Microsoft.ExtendedReflection.Monitoring.SandboxTrust"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Settings.PexSettingCategories">
            <summary>
            Design time settings categories
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Settings.PexSettingCategories.Boundaries">
            <summary>
            Boundaries
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Settings.PexSettingCategories.Tests">
            <summary>
            Tests
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Settings.PexSettingCategories.Experimental">
            <summary>
            Experimental
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Settings.PexSettingCategories.Miscellaneous">
            <summary>
            Miscellaneous
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Settings.PexSettingCategories.Strategy">
            <summary>
            Strategy
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Settings.PexSettingCategories.Coverage">
            <summary>
            Coverage
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Settings.PexSettingCategories.Main">
            <summary>
            Main
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Settings.PexSettingCategories.Filters">
            <summary>
            Filters
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Settings.PexApartmentState">
            <summary>
            Thread appartment state for the explorations
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Settings.PexApartmentState.STA">
            <summary>
            The System.Threading.Thread will create and enter a single-threaded apartment.
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Settings.PexApartmentState.MTA">
            <summary>
            The System.Threading.Thread will create and enter a multithreaded apartment.
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Settings.PexApartmentState.Unknown">
            <summary>
            The System.Threading.Thread.ApartmentState property has not been set.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Settings.PexSettingsMixAttribute">
            <summary>
            Attribute that defines a variation of settings
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Settings.PexSettingsMixAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Settings.PexSettingsMixAttribute"/> class.
            </summary>
            <param name="mixName">Name of the mix.</param>
        </member>
        <member name="P:Microsoft.Pex.Framework.Settings.PexSettingsMixAttribute.MixName">
            <summary>
            Gets or sets the name of the mix.
            </summary>
            <value>The name of the mix.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Settings.PexSettingsMixAttribute.MixReportOrder">
            <summary>
            Gets or sets the mix report order.
            </summary>
            <value>The mix report order.</value>
        </member>
        <member name="T:Microsoft.Pex.Framework.Settings.PexTestEmissionFilter">
            <summary>
            Test filter strategies
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Settings.PexTestEmissionFilter.Failures">
            <summary>
            All unique failures
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Settings.PexTestEmissionFilter.FailuresAndIncreasedBranchHits">
            <summary>
            All unique failures or increased coverage tests
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Settings.PexTestEmissionFilter.FailuresAndIncreasedBranchHitsIncludedOrExcluded">
            <summary>
            All unique failures or increased filtered coverage tests
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Settings.PexTestEmissionFilter.FailuresAndUniquePaths">
            <summary>
            All unique failures or unique paths
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Settings.PexTestEmissionFilter.All">
            <summary>
            All
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Strategies.IPexExplorationStrategy">
            <summary>
            Search strategy for a single exploration
            </summary>
            <remarks>
            A single exploration consists of several execution paths.
            </remarks>
        </member>
        <member name="M:Microsoft.Pex.Engine.Strategies.IPexExplorationStrategy.IncludeInSearch(Microsoft.Pex.Engine.PathExecution.IPexPathExecutionResult,Microsoft.Pex.Engine.Strategies.PexPathAbandoningReason@)">
            <summary>
            Should this path be included in the search?
            If not, it is abandoned.
            </summary>
            <param name="result">The result.</param>
            <param name="reason">The reason.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.Strategies.IPexExplorationStrategyFactory">
            <summary>
            Pex exploration strategy factory
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Strategies.IPexExplorationStrategyFactory.CreateExplorationStrategy">
            <summary>
            Creates the exploration strategy.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.Strategies.PexExplorationStrategyFactory">
            <summary>
            Factory of exploration strateges
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Strategies.PexExplorationStrategyFactory.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Strategies.PexExplorationStrategyFactory.CreateExplorationStrategy">
            <summary>
            Creates the exploration strategy.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.Strategies.PexPathAbandoningReason">
            <summary>
            Reason for abandoning a path
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Strategies.PexPathAbandoningReason.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Strategies.PexPathAbandoningReason.AssumptionViolation">
            <summary>
            assumption violation
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Strategies.PexPathAbandoningReason.BoundsExceeded">
            <summary>
            Bounds exceeded
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Strategies.PexPathAbandoningReason.DuplicatePath">
            <summary>
            Duplicate path
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.PathExecution.PexPathExecutionResultKind">
            <summary>
            Pex path execution result kind
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PathExecution.PexPathExecutionResultKind.NormalTermination">
            <summary>
            Normal termination
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PathExecution.PexPathExecutionResultKind.Exception">
            <summary>
            Exception
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PathExecution.PexPathExecutionResultKind.MonitoringStopped">
            <summary>
            Monitoring stopped
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PathExecution.PexPathExecutionResultKind.AssumptionViolation">
            <summary>
            Assumption violation
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PathExecution.PexPathExecutionResultKind.Retry">
            <summary>
            Retry
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PathExecution.PexPathExecutionResultKind.MinimizationRequest">
            <summary>
            Minimization request
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Suppression.PexSuppressUninstrumentedMethodFromAssemblyAttribute">
            <summary>
            Suppresses uninstrumented call messages from a particular assembly
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Suppression.PexSuppressUninstrumentedMethodFromAssemblyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Suppression.PexSuppressUninstrumentedMethodFromAssemblyAttribute"/> class.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Suppression.PexSuppressUninstrumentedMethodFromAssemblyAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Suppression.PexSuppressUninstrumentedMethodFromAssemblyAttribute"/> class.
            </summary>
            <param name="typeOfAssembly">The type of assembly.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Suppression.PexSuppressUninstrumentedMethodFromAssemblyAttribute.CreateFilter">
            <summary>
            Creates the filter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Suppression.PexSuppressUninstrumentedMethodFromAssemblyAttribute.CreateFilter(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent)">
            <summary>
            Creates the filter
            </summary>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.Suppression.PexSuppressUninstrumentedMethodFromAssemblyAttribute.AssemblyName">
            <summary>
            Gets the name of the assembly.
            </summary>
            <value>The name of the assembly.</value>
        </member>
        <member name="T:Microsoft.Pex.Framework.Suppression.PexSuppressUninstrumentedMethodFromNamespaceAttribute">
            <summary>
            Suppresses uninstrumented call for any type in namespace
            and subnamespaces
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Suppression.PexSuppressUninstrumentedMethodFromNamespaceAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Suppression.PexSuppressUninstrumentedMethodFromNamespaceAttribute"/> class.
            </summary>
            <param name="namespaces">The @namespace.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Suppression.PexSuppressUninstrumentedMethodFromNamespaceAttribute.#ctor(System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Suppression.PexSuppressUninstrumentedMethodFromNamespaceAttribute"/> class.
            </summary>
            <param name="typesOfNamespace">The type of namespace.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Suppression.PexSuppressUninstrumentedMethodFromNamespaceAttribute.CreateFilter(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent)">
            <summary>
            Creates the filter
            </summary>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.Suppression.PexSuppressUninstrumentedMethodFromNamespaceAttribute.Namespaces">
            <summary>
            Gets the namespace.
            </summary>
            <value>The namespace.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Suppression.PexSuppressUninstrumentedMethodFromNamespaceAttribute.IgnoreNullNamespace">
            <summary>
            Gets a value indicating whether methods defined in classes that are not part of any namespace should be reported.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Suppression.PexSuppressUninstrumentedMethodFromTypeAttribute">
            <summary>
            Suppresses uninstrumented call for any type in namespace
            and subnamespaces
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Suppression.PexSuppressUninstrumentedMethodFromTypeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Suppression.PexSuppressUninstrumentedMethodFromTypeAttribute"/> class.
            </summary>
            <param name="typeFullName">Full name of the type.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Suppression.PexSuppressUninstrumentedMethodFromTypeAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Suppression.PexSuppressUninstrumentedMethodFromTypeAttribute"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Suppression.PexSuppressUninstrumentedMethodFromTypeAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Suppression.PexSuppressUninstrumentedMethodFromNamespaceAttribute"/> class.
            </summary>
            <param name="typeFullNames">The type full names.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Suppression.PexSuppressUninstrumentedMethodFromTypeAttribute.#ctor(System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Suppression.PexSuppressUninstrumentedMethodFromTypeAttribute"/> class.
            </summary>
            <param name="types">The types.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Suppression.PexSuppressUninstrumentedMethodFromTypeAttribute.CreateFilter(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent)">
            <summary>
            Creates the filter
            </summary>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.Suppression.PexSuppressUninstrumentedMethodFromTypeAttribute.TypeFullNames">
            <summary>
            Gets the type full names.
            </summary>
            <value>The type full names.</value>
        </member>
        <member name="T:Microsoft.Pex.Framework.Suppression.PexLogEventFilterAttributeBase">
            <summary>
            Abstract base class for log event filters
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Suppression.PexLogEventFilterAttributeBase.CreateFilter(Microsoft.Pex.Engine.ComponentModel.IPexComponent)">
            <summary>
            Creates a <see cref="T:Microsoft.ExtendedReflection.Logging.ILogEventFilter"/> instance.
            </summary>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Suppression.PexLogEventFilterAttributeBase.BeforeExecution(Microsoft.Pex.Engine.ComponentModel.IPexComponent)">
            <summary>
            Callback that is executed before the execution  starts.
            </summary>
            <param name="host">The host.</param>
            <returns>some data</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Suppression.PexLogEventFilterAttributeBase.AfterExecution(Microsoft.Pex.Engine.ComponentModel.IPexComponent,System.Object)">
            <summary>
            Callback that is executed after the execution ends.
            </summary>
            <param name="host">The host.</param>
            <param name="data">The data returned by <see cref="M:Microsoft.Pex.Framework.Suppression.PexLogEventFilterAttributeBase.BeforeExecution(Microsoft.Pex.Engine.ComponentModel.IPexComponent)"/>.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Suppression.PexLogEventFilterAttributeBase.Initialize(Microsoft.ExtendedReflection.ComponentModel.IEngine)">
            <summary>
            this method provides the opportunity to query services and interact with them.
            </summary>
            <param name="engine">The engine.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Suppression.PexLogEventFilterAttributeBase.Load(Microsoft.ExtendedReflection.ComponentModel.IContainer)">
            <summary>
            This method provides the opportunity install or substitute services.
            </summary>
            <param name="engineContainer">The exploration container.</param>
        </member>
        <member name="T:Microsoft.Pex.Framework.TestFrameworks.PexTestFrameworkAttributeBase">
            <summary>
            Attribute used to register a custom <see cref="T:Microsoft.Pex.Engine.TestFrameworks.IPexTestFramework"/>
            implementation. 
            Use TestFramework option of PexAssemblySettingsAttribute to activate custom framework.
            </summary>
            <remarks>
            This attribute by itself does not cause Pex to generate test cases for the custom test framework.
            </remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.TestFrameworks.PexTestFrameworkAttributeBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.TestFrameworks.PexTestFrameworkAttributeBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.TestFrameworks.PexTestFrameworkAttributeBase.Initialize(Microsoft.ExtendedReflection.ComponentModel.IEngine)">
            <summary>
            this method provides the opportunity to query services and interact with them.
            </summary>
            <param name="engine">The engine.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.TestFrameworks.PexTestFrameworkAttributeBase.CreateTestFramework(Microsoft.ExtendedReflection.ComponentModel.IComponent)">
            <summary>
            Creates the test framework.
            </summary>
            <param name="host">The host.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.TestFrameworks.PexTestFrameworkAttributeBase.SetAsDefault">
            <summary>
            Gets or sets a value indicating wheter this test framework
            should be set as the default
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Using.PexGenericArgumentsProviderAttributeBase">
            <summary>
            Attribute base class for generic argument providers.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Using.PexGenericArgumentsProviderAttributeBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Using.PexGenericArgumentsProviderAttributeBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Using.PexGenericArgumentsProviderAttributeBase.GetGenericArgumentTuples(Microsoft.ExtendedReflection.Metadata.MethodDefinition)">
            <summary>
            Gets the generic argument tuples.
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexGenericArgumentsAttribute">
            <summary>
            Defines a single type tuple that will be used to instantiate
            generic test methods.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexGenericArgumentsAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.PexGenericArgumentsAttribute"/> class.
            </summary>
            <param name="genericArgument">The generic argument.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexGenericArgumentsAttribute.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.PexGenericArgumentsAttribute"/> class.
            </summary>
            <param name="genericArgument1">The first generic argument.</param>
            <param name="genericArgument2">The second generic argument.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexGenericArgumentsAttribute.#ctor(System.Type,System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.PexGenericArgumentsAttribute"/> class.
            </summary>
            <param name="genericArgument1">The first generic argument.</param>
            <param name="genericArgument2">The second generic argument.</param>
            <param name="genericArgument3">The third generic argument.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexGenericArgumentsAttribute.#ctor(System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.PexGenericArgumentsAttribute"/> class.
            </summary>
            <param name="genericArguments">The generic arguments.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexGenericArgumentsAttribute.GetGenericArgumentTuples(Microsoft.ExtendedReflection.Metadata.MethodDefinition)">
            <summary>
            Gets the generic argument tuples.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.Wizard.PexCodePatternAttribute">
            <summary>
            Tags a method as a pattern checker that can be used by the wizard
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Wizard.PexCodePatternAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Wizard.PexCodePatternAttribute"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.PexGeneratedTestResult">
            <summary>
            Generated test results
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexGeneratedTestResult.#ctor(Microsoft.Pex.Engine.PexResultObserver,Microsoft.Pex.Engine.PexResultObserver,Microsoft.Pex.Engine.PexResultObserver)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Engine.PexGeneratedTestResult"/> class.
            </summary>
            <param name="setup">The setup.</param>
            <param name="test">The test.</param>
            <param name="teardown">The teardown.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexGeneratedTestResult.TryGetSetup(Microsoft.Pex.Engine.PexResult@)">
            <summary>
            Tries to get the setup result.
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexGeneratedTestResult.TryGetTest(Microsoft.Pex.Engine.PexResult@)">
            <summary>
            Tries to get the test result.
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexGeneratedTestResult.TryGetTeardown(Microsoft.Pex.Engine.PexResult@)">
            <summary>
            Tries to get the teardown result.
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexGeneratedTestResult.TryGetDumpTree(Microsoft.ExtendedReflection.Logging.DumpTree@)">
            <summary>
            Tries to query the dump tree.
            </summary>
            <param name="tree">The tree.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.Domains.IPexTypeHintProvider">
            <summary>
            An on-demand type hint provider
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Domains.IPexTypeHintProvider.TryGetTypeHints(Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.ExtendedReflection.Metadata.TypeDefinition}@)">
            <summary>
            Given a type populates the domain manager with hints
            </summary>
            <param name="type"></param>
            <param name="hints"></param>
        </member>
        <member name="T:Microsoft.Pex.Engine.Drivers.IPexPostAnalysisDriver">
            <summary>
            Post analysis driver
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Drivers.IPexPostAnalysisDriver.Run">
            <summary>
            Runs this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.Engines.IPexPostAnalysisEngine">
            <summary>
            The engine for running post analysis 
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.Engines.IPexPostAnalysisEngine.Driver">
            <summary>
            Get the driver for the post analysis
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Explorable.IPexExplorableInsufficienyObserver">
            <summary>
            Interface to observe explorable insufficiencies
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Explorable.IPexExplorableInsufficienyObserver.LogExplorableInsufficiency(Microsoft.ExtendedReflection.Reasoning.ExecutionNodes.IExecutionNode,Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Logs an explorable insufficiency.
            </summary>
            <param name="executionNode">The execution node that we couldn't flip.</param>
            <param name="explorableType">Explorable type whose factory was insufficient.</param>
        </member>
        <member name="T:Microsoft.Pex.Engine.FixIt.IPexFixItMethodFilter">
            <summary>
            An interface to define FixIt method filters
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.FixIt.IPexFixItMethodFilter.SkipFixesFromMethod(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Gets a value indicating whether Pex should not emit fixes for a particular method
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.Generated.IPexDisposableContextManager">
            <summary>
            A manager for PexDisposableContext
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Generated.IPexDisposableContextManager.TryGetDisposableContext(Microsoft.Pex.Framework.Generated.PexDisposableContext@)">
            <summary>
            Gets the disposable context if allocated
            </summary>
            <param name="contex"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.Generated.IPexDisposableContextManager.DisposableContext">
            <summary>
            Gets the disposable context and allocates on demand
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.IPexEngineOptions">
            <summary>
            Options for the Pex engine
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.IPexEngineOptions.TryGetAssembliesUnderTest(Microsoft.ExtendedReflection.Collections.IFiniteSet{System.String}@)">
            <summary>
            Tries to get additional assemblies under test
            </summary>
            <param name="assemblyNames"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.IPexEngineOptions.TryGetBehaviorDirectories(Microsoft.ExtendedReflection.Collections.IIndexable{System.String}@)">
            <summary>
            Tries to get a list of paths where behavior and moles assemblies
            should be loaded from.
            </summary>
            <param name="directories">directories if any</param>
        </member>
        <member name="P:Microsoft.Pex.Engine.IPexEngineOptions.Publish">
            <summary>
            Url to the build server
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.IPexEngineOptions.PublishBuild">
            <summary>
            Build associated to this test run
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.IPexEngineOptions.PublishFlavor">
            <summary>
            Gets the build flavor
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.IPexEngineOptions.PublishPlatform">
            <summary>
            Gets the publish platform
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.IPexEngineOptions.PublishProject">
            <summary>
            Gets the team project
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.IPexProgressManager">
            <summary>
            Manages sending progress messages
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.IPexProgressManager.LogProgress(System.String)">
            <summary>
            Creates a progress messages and sends it to the log.
            </summary>
            <param name="status">message describing the progress</param>
        </member>
        <member name="T:Microsoft.Pex.Framework.Moles.PexMolesAssembliesFromDirectoryAttributeBase">
            <summary>
            Abstract base attribute for loading moles assemblies from directory locations
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Moles.PexMolesAssembliesFromDirectoryAttributeBase.#ctor">
            <summary>
            Initializes a new instance of the attribute
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Moles.PexMolesAssembliesFromDirectoryAttributeBase.GetDirectories(Microsoft.Pex.Engine.ComponentModel.IPexComponent)">
            <summary>
            Gets the directories that should be probed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Moles.PexMolesAssembliesFromDirectoryAttributeBase.BeforeExecution(Microsoft.Pex.Engine.ComponentModel.IPexComponent)">
            <summary>
            
            </summary>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Moles.PexMolesAssembliesFromDirectoryAttributeBase.LoadMolesFromDirectory(Microsoft.Pex.Engine.ComponentModel.IPexComponent,System.String)">
            <summary>
            Loads the moles from a given directory
            </summary>
            <param name="host"></param>
            <param name="directory"></param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Libraries.MolesLibrary.MolesAssembliesFromOptionsAttribute.#ctor">
            <summary>
            Initializes a new instance of the attribute
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Libraries.MolesLibrary.MolesAssembliesFromOptionsAttribute.GetDirectories(Microsoft.Pex.Engine.ComponentModel.IPexComponent)">
            <summary>
            Gets the directories that should be probed
            </summary>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.Libraries.MolesLibrary.MolesAssembliesFromTestDirectoryAttribute">
            <summary>
            Attributes that specifies that any assembly with suffix '.Moles.dll' or
            '.Behaviors.dll' should be probed for moles, stubs and behaved types.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Libraries.MolesLibrary.MolesAssembliesFromTestDirectoryAttribute.#ctor">
            <summary>
            Initializes a new instance of the attribute
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Libraries.MolesLibrary.MolesAssembliesFromTestDirectoryAttribute.GetDirectories(Microsoft.Pex.Engine.ComponentModel.IPexComponent)">
            <summary>
            Gets the directories that should be probed
            </summary>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.Preparable.IPexPreparableProvider">
            <summary>
            A provider of preparable definitions
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Preparable.IPexPreparableProvider.TryGetPreparables(Microsoft.ExtendedReflection.Metadata.TypeDefinition,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.Pex.Engine.Preparable.IPexPreparableDefinition}@)">
            <summary>
            Tries to get the preparables for the given type to the provider
            </summary>
            <param name="type"></param>
            <param name="preparables"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Libraries.MolesLibrary.StubExplorableGuesserAttribute.BeforeExecution(Microsoft.Pex.Engine.ComponentModel.IPexComponent)">
            <summary>
            Callback that is executed before the execution  starts.
            </summary>
            <param name="host">The host.</param>
            <returns>some data</returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Libraries.MolesLibrary.BehavedExplorableGuesserAttribute.CreateExplorableGuessers(Microsoft.Pex.Engine.ComponentModel.IPexComponent)">
            <summary>
            Creates the moles guesser
            </summary>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.Logging.IPexExplorableEventFilter">
            <summary>
            A filter of explorable events.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Logging.IPexExplorableEventFilter.Ignore(Microsoft.ExtendedReflection.Metadata.Names.TypeName,Microsoft.Pex.Engine.Logging.PexExplorableEventKind)">
            <summary>
            Applies the filter
            </summary>
            <param name="explorableType">Type of the explorable.</param>
            <param name="kind">The kind.</param>
            <returns>whether to filter out this event</returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.PostAnalysis.IPexPostAnalysisController">
            <summary>
            Post analysis controller
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.IPexPostAnalysisController.AddComponents(Microsoft.Pex.Engine.Engines.IPexPostAnalysisEngine)">
            <summary>
            Add the necessary components for executing this post analysis step
            </summary>
            <param name="engine">the engine</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.IPexPostAnalysisController.ShouldBeRun(System.Boolean,Microsoft.Pex.Engine.PexGeneratedTestResultStatus,Microsoft.Pex.Engine.PathExecution.IPexPathExecutionResult,System.Boolean)">
            <summary>
            Checks whether this controller should be run
            </summary>
            <param name="failure">Whether the test path is a failure or not</param>
            <param name="status">The status of the test</param>
            <param name="result">The result of the path execution</param>
            <param name="anythingInjected">Whether something has been injecter or not</param>
        </member>
        <member name="T:Microsoft.Pex.Engine.Metrics.IPexMetricValue">
            <summary>
            A metric value
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Metrics.IPexMetricValue.GetValue(Microsoft.ExtendedReflection.Metadata.MethodDefinition)">
            <summary>
            Gets the metric value for a particular method.
            </summary>
            <param name="method">The method</param>
            <returns>The result value</returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Metrics.IPexMetricValue.Combine(Microsoft.Pex.Engine.Metrics.IPexMetricValue)">
            <summary>
            Combines the current metric value with the specified metric value.
            </summary>
            <param name="value">The value.</param>
            <remarks>The type should be the same as the actual type of this metric value</remarks>
        </member>
        <member name="M:Microsoft.Pex.Engine.Metrics.IPexMetricValue.Dump(Microsoft.ExtendedReflection.Logging.DumpTreeWriter,System.Boolean)">
            <summary>
            Dump the internal state of this metric to the writer
            </summary>
            <param name="writer">The writer.</param>
            <param name="verbose">Verbosity.</param>
        </member>
        <member name="P:Microsoft.Pex.Engine.Metrics.IPexMetricValue.Summary">
            <summary>
            Gets the summary of this metric.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.Metrics.IPexMetricValue.PreviousSummary">
            <summary>
            Gets the previous summary.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.Metrics.IPexMetricValue.AllValues">
            <summary>
            Gets the metric values for all methods.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.Metrics.IPexMetricValue.MissingTags">
            <summary>
            Gets the tags that explain why the covered value is less than the total value.
            </summary>
            <value>The missing tags.</value>
        </member>
        <member name="T:Microsoft.Pex.Engine.Metrics.IPexFixtureMetricManager">
            <summary>
            An execution level manager for metrics
            </summary> 
        </member>
        <member name="T:Microsoft.Pex.Engine.Metrics.IPexMetricManagerBase">
            <summary>
            An base inferface for metric managers
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Metrics.IPexMetricManagerBase.AddMetricValue(Microsoft.Pex.Engine.Metrics.IPexMetricId,Microsoft.Pex.Engine.Metrics.IPexMetricValue)">
            <summary>
            Add the value for a metric.
            </summary>
            <param name="identifier">The identifier.</param>
            <param name="value">The metric value.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Metrics.IPexMetricManagerBase.TryGetMetricValue``1(Microsoft.Pex.Engine.Metrics.IPexMetricId,``0@)">
            <summary>
            Tries to get the value for a the metric with the given identifier.
            </summary>
            <typeparam name="T">The type</typeparam>
            <param name="identifier">The identifier.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Metrics.IPexMetricManagerBase.CombineWithLowerLevelValues(Microsoft.Pex.Engine.Metrics.IPexMetricManagerBase)">
            <summary>
            Combines the metric values with the given lower level values.
            </summary>
            <param name="manager">The manager of that lower level.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Metrics.IPexMetricManagerBase.Dump(Microsoft.ExtendedReflection.Logging.DumpTreeWriter)">
            <summary>
            Dump the internal state
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Metrics.IPexMetricManagerBase.NotifyEnd">
            <summary>
            Notifies the manager that the current stage has ended
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Metrics.IPexMetricManagerBase.LogTrajectorySnapshots">
            <summary>
            Logs the current metric values as trajectory snapshots
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Metrics.IPexMetricManagerBase.GetRunningCoverages">
            <summary>
            Get the current running coverage entries
            </summary>
            <returns>The current running coverage entries</returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Metrics.IPexMetricManagerBase.GetCoverageSummaries">
            <summary>
            Get the current coverage summaries as coverage entries
            </summary>
            <returns>The current running coverage entries</returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.Metrics.IPexMetricManagerBase.MetricValues">
            <summary>
            List all metrics and their values.
            </summary>
        </member>
        <member name="E:Microsoft.Pex.Engine.Metrics.IPexMetricManagerBase.BeforeMetricPublishing">
            <summary>
            Raised before publishing (and forgetting) the metric values
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Creatable.PexCreatableFactoryForSummarizedConstructorsAndSetters">
            <summary>
            Pex infers constructors and setters invariant.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.PexCreatableFactoryForSummarizedConstructorsAndSetters.TryCreateCreatableFactory(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,Microsoft.Pex.Engine.Creatable.IPexCreatableFactory@)">
            <summary>
            Creates a creatable factory.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Framework.Creatable.PexCreatableFactoryForSummarizedConstructorsAndSetters.IsRestrictive">
            <summary>
            Summarization gives up if Pex finds setters that do not start with "Set", "Add" or "set_".
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Framework.Creatable.PexCreatableFactoryForSummarizedConstructorsAndSetters.Factory.Restrictive">
            <summary>
            Summarization give up if Pex finds setters that do not start with "Set", "Add" or "set_".
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexLogMissedObjectSensitiveStateCoverageAttribute">
            <summary>
            Attribute to check that the expected state coverage has been achieved.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexLogMissedObjectSensitiveStateCoverageAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.PexExpectedStateCoverageAttribute"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexLogMissedObjectSensitiveStateCoverageAttribute.AfterExploration(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,System.Object)">
            <summary>
            Callback that is executed after the exploration ends.
            </summary>
            <param name="host">The host.</param>
            <param name="data">The data returned by BeforeExploration.</param>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexExpectedObjectSensitiveStateCoverageAttribute">
            <summary>
            Attribute to check that the expected state coverage has been achieved.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexExpectedObjectSensitiveStateCoverageAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.PexExpectedStateCoverageAttribute"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexExpectedObjectSensitiveStateCoverageAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.PexExpectedStateCoverageAttribute"/> class.
            </summary>
            <param name="covered">The minimum of covered assertion locations.</param>
            <param name="total">The minimum of total assertion locations.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexExpectedObjectSensitiveStateCoverageAttribute.ToString">
            <summary>
            Gets a string repsentation of the attribute
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexExpectedObjectSensitiveStateCoverageAttribute.TryCreateExplorationGoal(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,Microsoft.Pex.Engine.Goals.IPexExplorationGoal@)">
            <summary>
            Tries to create an exploration goal instance
            </summary>
            <param name="host">the host</param>
            <param name="goal">the resulting goal</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.PexExpectedObjectSensitiveStateCoverageAttribute.CoveredCount">
            <summary>
            Gets or sets the minimum of covered assertion locations
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Framework.PexExpectedObjectSensitiveStateCoverageAttribute.TotalCount">
            <summary>
            Gets or sets the minimum of total assertion locations
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexExpectedObjectSensitiveStateCoverageAttribute.ExplorationGoal.GetOutcome">
            <summary>
            Gets the current outcome of the goal
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexExpectedObjectSensitiveStateCoverageAttribute.ExplorationGoal.IsReached(System.Boolean)">
            <summary>
            Gets a value indicating whether the goal has been reached
            </summary>
            <param name="explorationFinished">a value that determines if it is the last call for this exploration</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.PexExpectedObjectSensitiveStateCoverageAttribute.ExplorationGoal.Kind">
            <summary>
            Gets the kind of goal
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Pex.Framework.Creatable.Summarizer.Light.States.MetaState">
            <summary>
            MetaState
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.Summarizer.Light.States.MetaState.TryMakeStep(Microsoft.Pex.Framework.Creatable.Summarizer.Light.States.MetaState@)">
            <summary>
            TryMakeStep
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.Summarizer.Light.States.MetaState.TryPrepare(Microsoft.ExtendedReflection.ComponentModel.Engine,System.Int32@)">
            <summary>
            TryPrepare
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.Summarizer.Light.States.MetaState.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Framework.Creatable.Summarizer.Light.States.MetaState.IsExhausted">
            <summary>
            IsExhausted
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Creatable.Summarizer.Light.Stepper">
            <summary>
            Stepper
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.Summarizer.Light.Stepper.TrySingleStep(System.Int32,Microsoft.ExtendedReflection.Metadata.Instruction@)">
            <summary>
            TrySingleStep
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.Summarizer.Light.Stepper.TryManySteps(System.Int32,Microsoft.ExtendedReflection.Metadata.Instruction@,Microsoft.Pex.Framework.Creatable.Summarizer.Light.States.MetaState,Microsoft.ExtendedReflection.ComponentModel.Engine)">
            <summary>
            TryManySteps
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Metrics.PexObjectSensitiveStateCoverageAttribute">
            <summary>
            Attribute to enable the state coverage metric
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Metrics.PexObjectSensitiveStateCoverageAttribute.BeforeRun(Microsoft.Pex.Engine.ComponentModel.IPexPathComponent)">
            <summary>
            Callback that is executed before the path starts.
            </summary>
            <param name="host">The host.</param>
            <returns>some data</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Metrics.PexObjectSensitiveStateCoverageAttribute.AfterRun(Microsoft.Pex.Engine.ComponentModel.IPexPathComponent,System.Object)">
            <summary>
            Callback that is executed after the path ends.
            </summary>
            <param name="host">The host.</param>
            <param name="data">The data returned by BeforeRun.</param>
        </member>
        <member name="T:Microsoft.Pex.Engine.Metrics.IPexMetricId">
            <summary>
            An identifier for a metric
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.Metrics.IPexMetricId.ShortName">
            <summary>
            Gets the short name for this metric.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.Metrics.IPexMetricId.FullName">
            <summary>
            Gets the full name for this metric.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexExpectedStateCoverageAttribute">
            <summary>
            Attribute to check that the expected state coverage has been achieved.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexExpectedStateCoverageAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.PexExpectedStateCoverageAttribute"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexExpectedStateCoverageAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.PexExpectedStateCoverageAttribute"/> class.
            </summary>
            <param name="covered">The minimum of covered assertion locations.</param>
            <param name="total">The minimum of total assertion locations.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexExpectedStateCoverageAttribute.ToString">
            <summary>
            Gets a string repsentation of the attribute
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexExpectedStateCoverageAttribute.TryCreateExplorationGoal(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,Microsoft.Pex.Engine.Goals.IPexExplorationGoal@)">
            <summary>
            Tries to create an exploration goal instance
            </summary>
            <param name="host">the host</param>
            <param name="goal">the resulting goal</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.PexExpectedStateCoverageAttribute.CoveredCount">
            <summary>
            Gets or sets the minimum of covered assertion locations
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Framework.PexExpectedStateCoverageAttribute.TotalCount">
            <summary>
            Gets or sets the minimum of total assertion locations
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexExpectedStateCoverageAttribute.ExplorationGoal.GetOutcome">
            <summary>
            Gets the current outcome of the goal
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexExpectedStateCoverageAttribute.ExplorationGoal.IsReached(System.Boolean)">
            <summary>
            Gets a value indicating whether the goal has been reached
            </summary>
            <param name="explorationFinished">a value that determines if it is the last call for this exploration</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.PexExpectedStateCoverageAttribute.ExplorationGoal.Kind">
            <summary>
            Gets the kind of goal
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Pex.Engine.Metrics.PexMetricEntry">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Metrics.PexMetricEntry.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new metric entry with the given covered and total
            </summary>
            <param name="covered">the covered</param>
            <param name="total">the total</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Metrics.PexMetricEntry.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.Metrics.PexMetricEntry.Covered">
            <summary>
            Gets the covered
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.Metrics.PexMetricEntry.Total">
            <summary>
            Gets the total
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Metrics.PexStateCoverageAttribute">
            <summary>
            Attribute to enable the state coverage metric
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Metrics.PexStateCoverageAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Metrics.PexStateCoverageAttribute"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Metrics.PexStateCoverageAttribute.BeforeRun(Microsoft.Pex.Engine.ComponentModel.IPexPathComponent)">
            <summary>
            Callback that is executed before the path starts.
            </summary>
            <param name="host">The host.</param>
            <returns>some data</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Metrics.PexStateCoverageAttribute.AfterRun(Microsoft.Pex.Engine.ComponentModel.IPexPathComponent,System.Object)">
            <summary>
            Callback that is executed after the path ends.
            </summary>
            <param name="host">The host.</param>
            <param name="data">The data returned by BeforeRun.</param>
        </member>
        <member name="T:Microsoft.Pex.Framework.Metrics.PexAssertMethodAttribute">
            <summary>
            Attribute to register a method as an assert method
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Metrics.PexAssertMethodAttribute.#ctor(System.Type,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Metrics.PexAssertMethodAttribute"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Metrics.PexAssertMethodAttribute.#ctor(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Metrics.PexAssertMethodAttribute"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Metrics.PexAssertMethodAttribute.BeforeExecution(Microsoft.Pex.Engine.ComponentModel.IPexComponent)">
            <summary>
            Callback that is executed before the execution  starts.
            </summary>
            <param name="host">The host.</param>
            <returns>some data</returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexExpectedAssertionsAttribute">
            <summary>
            Attribute to check that the expected assert coverage has been achieved.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexExpectedAssertionsAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.PexExpectedAssertionsAttribute"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexExpectedAssertionsAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.PexExpectedAssertionsAttribute"/> class.
            </summary>
            <param name="covered">The minimum of covered assertion locations.</param>
            <param name="total">The minimum of total assertion locations.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexExpectedAssertionsAttribute.ToString">
            <summary>
            Gets a string repsentation of the attribute
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexExpectedAssertionsAttribute.TryCreateExplorationGoal(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,Microsoft.Pex.Engine.Goals.IPexExplorationGoal@)">
            <summary>
            Tries to create an exploration goal instance
            </summary>
            <param name="host">the host</param>
            <param name="goal">the resulting goal</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.PexExpectedAssertionsAttribute.CoveredCount">
            <summary>
            Gets or sets the minimum of covered assertion locations
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Framework.PexExpectedAssertionsAttribute.TotalCount">
            <summary>
            Gets or sets the minimum of total assertion locations
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexExpectedAssertionsAttribute.ExplorationGoal.GetOutcome">
            <summary>
            Gets the current outcome of the goal
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexExpectedAssertionsAttribute.ExplorationGoal.IsReached(System.Boolean)">
            <summary>
            Gets a value indicating whether the goal has been reached
            </summary>
            <param name="explorationFinished">a value that determines if it is the last call for this exploration</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.PexExpectedAssertionsAttribute.ExplorationGoal.Kind">
            <summary>
            Gets the kind of goal
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Pex.Framework.Metrics.PexAssertCoverageAttribute">
            <summary>
            Attribute to enable the assert coverage metric
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Metrics.PexAssertCoverageAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Metrics.PexAssertCoverageAttribute"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Metrics.PexAssertCoverageAttribute.BeforeRun(Microsoft.Pex.Engine.ComponentModel.IPexPathComponent)">
            <summary>
            Callback that is executed before the path starts.
            </summary>
            <param name="host">The host.</param>
            <returns>some data</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Metrics.PexAssertCoverageAttribute.AfterRun(Microsoft.Pex.Engine.ComponentModel.IPexPathComponent,System.Object)">
            <summary>
            Callback that is executed after the path ends.
            </summary>
            <param name="host">The host.</param>
            <param name="data">The data returned by BeforeRun.</param>
        </member>
        <member name="T:Microsoft.Pex.Engine.Metrics.IPexExplorationMetricManager">
            <summary>
            An exploration level manager for metrics
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Metrics.IPexMetricManager">
            <summary>
            An execution level manager for metrics
            </summary> 
        </member>
        <member name="T:Microsoft.Pex.Engine.Metrics.IPexPathMetricManager">
            <summary>
            A path level manager for metrics
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Metrics.PexMetricLevel">
            <summary>
            The level of a metric
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Metrics.PexMetricLevel.Path">
            <summary>
            Metric is computed for each path
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Metrics.PexMetricLevel.Exploration">
            <summary>
            Metric is computed for each exploration
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Metrics.PexMetricLevel.Execution">
            <summary>
            Metric is computed for each execution
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.PostAnalysis.IPexPostAnalysisManager">
            <summary>
            A manager for post analysis
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.IPexPostAnalysisManager.Register(Microsoft.Pex.Engine.PostAnalysis.IPexPostAnalysisController)">
            <summary>
            Register a controller for the post analysis
            </summary>
            <param name="controller">the post analysis controller</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.IPexPostAnalysisManager.RunAll(System.Boolean,Microsoft.Pex.Engine.PexGeneratedTestResultStatus,Microsoft.Pex.Engine.PathExecution.IPexPathExecutionResult,System.Boolean)">
            <summary>
            Execute all post analysis
            </summary>
            <param name="failure">Whether the test path is a failure or not</param>
            <param name="status">The status of the test</param>
            <param name="result">The result of the path execution</param>
            <param name="anythingInjected">Whether something has been injecter or not</param>
        </member>
        <member name="T:Microsoft.Pex.Engine.PostAnalysis.PexResultTracking">
            <summary>
            Result tracking mode
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PostAnalysis.PexResultTracking.ConcreteOrDerived">
            <summary>
            Use concrete argument values, 
            or, when available, argument values derived from the computations of the calling context
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PostAnalysis.PexResultTracking.Track">
            <summary>
            Introduce new symbols to track the results of this method
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.PostAnalysis.PexTrackedResultId">
            <summary>
            Id for tracked values.
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PostAnalysis.PexTrackedResultId.CallerMethod">
            <summary>
            The caller method.
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PostAnalysis.PexTrackedResultId.CallerOffset">
            <summary>
            The caller MSIL offset.
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PostAnalysis.PexTrackedResultId.MethodSignature">
            <summary>
            Tracked method signature.
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.PostAnalysis.PexTrackedResultId.VarArgTypes">
            <summary>
            Tracked var-arg types; can be null if the <see cref="F:Microsoft.Pex.Engine.PostAnalysis.PexTrackedResultId.MethodSignature"/> does not have var arg calling convention.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackedResultId.#ctor(Microsoft.ExtendedReflection.Metadata.Method,System.Int32,Microsoft.ExtendedReflection.Metadata.IMethodSignature,Microsoft.ExtendedReflection.Metadata.TypeEx[])">
            <summary>
            Creates an instance of this type.
            </summary>
            <param name="callerMethod">The caller method.</param>
            <param name="callerOffset">The caller MSIL offset.</param>
            <param name="methodSignature">The method signature.</param>
            <param name="varArgTypes">The var arg types.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackedResultId.GetPersistentHashCode">
            <summary>
            Gets a strong, persistent hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackedResultId.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackedResultId.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PostAnalysis.PexTrackedResultId.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.PostAnalysis.PexTrackedResultId.CallerLocation">
            <summary>
            Gets the caller location.
            </summary>
            <value>The caller location.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PostAnalysis.PexTrackedResultId.Description">
            <summary>
            Textual description of the symbol.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PostAnalysis.PexTrackedResultId.Microsoft#ExtendedReflection#Interpretation#ISymbolId#Layout">
            <summary>
            The layout of the symbol.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Pex.Engine.PostAnalysis.PexTrackedResultId.ObjectCreationTime">
            <summary>
            When the object (or all objects within this value) was created.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Pex.Engine.Preparable.IPexPathPreparableManager">
            <summary>
            Manager that handles prepared types along a path
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Preparable.IPexPathPreparableManager.ShouldPrepare(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Gets a value indicating if the type needs to be prepared
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.Preparable.IPexPreparableDefinition">
            <summary>
            A preparable instance
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Preparable.IPexPreparableDefinition.Instantiate(Microsoft.ExtendedReflection.Metadata.TypeEx[])">
            <summary>
            Instantiates the preparable method definition for the given generic context
            </summary>
            <param name="genericTypeArguments"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.Preparable.IPexPreparableDefinition.PreparableType">
            <summary>
            Gets the type definition for which this preparable is active
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.Preparable.IPexPreparableDefinition.PreparableMethod">
            <summary>
            Gets the method definition that should be added to the current
            method sequence
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Preparable.IPexPreparableManager">
            <summary>
            A manager for preparable types
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Preparable.IPexPreparableManager.AddPreparableProvider(Microsoft.Pex.Engine.Preparable.IPexPreparableProvider)">
            <summary>
            Adds a provider of preparable definitions (on demand)
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Preparable.IPexPreparableManager.AddPreparableDefinition(Microsoft.Pex.Engine.Preparable.IPexPreparableDefinition)">
            <summary>
            Adds a preparable to the manager
            </summary>
            <param name="preparable"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Preparable.IPexPreparableManager.IsPreparable(Microsoft.ExtendedReflection.Metadata.TypeDefinition)">
            <summary>
            Gets a value indicating if the type definition is preparable
            </summary>
            <param name="definition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Preparable.IPexPreparableManager.TryGetPreparable(Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.ExtendedReflection.Collections.ICountable{Microsoft.Pex.Engine.Preparable.PexPreparable}@)">
            <summary>
            Tries to get the preprables for the given type
            </summary>
            <param name="type"></param>
            <param name="preparables"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.Preparable.IPexPreparableManager.Providers">
            <summary>
            Gets the preparable providers
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.Preparable.IPexPreparableManager.Preparables">
            <summary>
            Gets the current list of preparables
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Preparable.PexPreparable">
            <summary>
            An instantiated preparable definition
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Preparable.PexPreparable.#ctor(Microsoft.Pex.Engine.Preparable.IPexPreparableDefinition,Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Initializes a new instance of the preparable
            </summary>
            <param name="definition"></param>
            <param name="method"></param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Preparable.PexPreparable.Equals(Microsoft.Pex.Engine.Preparable.PexPreparable)">
            <summary>
            Gets a value inicating if two preparables are equivalent
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Preparable.PexPreparable.GetHashCode">
            <summary>
            Gets an integer representing the instance
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.Preparable.PexPreparable.Definition">
            <summary>
            Gets the definition
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.Preparable.PexPreparable.Method">
            <summary>
            Gets the prepared method that should be added to the method sequence
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Preparable.PexPreparableDefinition">
            <summary>
            Default implementation of IPexPreparableDefinition
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.Preparable.PexPreparableDefinition.#ctor(Microsoft.ExtendedReflection.Metadata.TypeDefinition,Microsoft.ExtendedReflection.Metadata.MethodDefinition)">
            <summary>
            Initializes the instance
            </summary>
            <param name="preparableType"></param>
            <param name="preparableMethod"></param>
        </member>
        <member name="M:Microsoft.Pex.Engine.Preparable.PexPreparableDefinition.TryCreate(Microsoft.Pex.Engine.ComponentModel.IPexComponent,Microsoft.ExtendedReflection.Metadata.VisibilityContext,Microsoft.ExtendedReflection.Metadata.MethodDefinition,Microsoft.ExtendedReflection.Metadata.TypeDefinition,Microsoft.ExtendedReflection.Metadata.Names.TypeName,Microsoft.Pex.Engine.Preparable.IPexPreparableDefinition@)">
            <summary>
            Tries to create an preparable definition
            </summary>
            <param name="host"></param>
            <param name="visibility"></param>
            <param name="methodDefinition"></param>
            <param name="preparedType"></param>
            <param name="preparable"></param>
            <param name="attributeTypeName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Preparable.PexPreparableDefinition.Instantiate(Microsoft.ExtendedReflection.Metadata.TypeEx[])">
            <summary>
            Instantiates the preparation method for the given generic arguments
            </summary>
            <param name="genericTypeArguments"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Preparable.PexPreparableDefinition.Equals(System.Object)">
            <summary>
            Gets a value indicating if the instance
            is equal to obj
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Preparable.PexPreparableDefinition.Equals(Microsoft.Pex.Engine.Preparable.IPexPreparableDefinition)">
            <summary>
            Gets a value indicating if the other is equal 
            to the current instance
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.Preparable.PexPreparableDefinition.GetHashCode">
            <summary>
            Gets the hashcode of this particular instance
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.Preparable.PexPreparableDefinition.PreparableType">
            <summary>
            Gets the preparable type
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.Preparable.PexPreparableDefinition.PreparableMethod">
            <summary>
            Gets the preprable method
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.TestFrameworks.IPexTestAssemblyRunner">
            <summary>
            Executes setup and teardown methods of an assembly
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.IPexTestAssemblyRunner.TryGetAssemblySetup(Microsoft.ExtendedReflection.Metadata.Method@)">
            <summary>
            Executes the assembly setup steps
            </summary>        
            <param name="setupMethod"> The setup method</param>
            <returns>true if the steps succeeded; false otherwise</returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.IPexTestAssemblyRunner.TryGetAssemblyTearDown(Microsoft.ExtendedReflection.Metadata.Method@)">
            <summary>
            Executes the assembly tear down steps
            </summary>
            <param name="teardownMethod">The tear down method</param>
            <returns>true if the steps succeeded; false otherwise</returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.IPexTestAssemblyRunner.GetFixtureRunner(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Gets the fixture runner
            </summary>
            <param name="type"></param>         
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.IPexTestAssemblyRunner.Assembly">
            <summary>
            Gets the assembly
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.TestFrameworks.IPexTestExplorationRunner">
            <summary>
            Executes an exploration
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.IPexTestExplorationRunner.TryGetTestSetup(Microsoft.ExtendedReflection.Metadata.Method@)">
            <summary>
            Tries to execute the test method setup
            </summary>
            <param name="testSetupMethod">the test method</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.IPexTestExplorationRunner.TryGetTestTeardown(Microsoft.ExtendedReflection.Metadata.Method@)">
            <summary>
            Tries to execute the test tear down
            </summary>
            <param name="testTeardownMethod">the test method</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.TestFrameworks.IPexTestFixtureRunner">
            <summary>
            Executes a fixture
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.IPexTestFixtureRunner.TryGetFixtureSetup(Microsoft.ExtendedReflection.Metadata.Method@)">
            <summary>
            Executes the fixture setup steps
            </summary>        
            <param name="setupMethod">The setup method</param>
            <returns>true if the steps succeeded; false otherwise</returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.IPexTestFixtureRunner.TryGetFixtureTearDown(Microsoft.ExtendedReflection.Metadata.Method@)">
            <summary>
            Executes the fixture tear down steps
            </summary>
            <param name="tearDownMethod">The tear down method</param>
            <remarks>
            This method is guaranteed to be called if TryFixtureSetup succeeds and returns true.
            </remarks>
            <returns>true if the steps succeeded; false otherwise</returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.IPexTestFixtureRunner.GetExplorationRunner(Microsoft.ExtendedReflection.Metadata.Method)">
            <summary>
            Gets the exploration driver
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestFrameworks.IPexTestFixtureRunner.FixtureType">
            <summary>
            Gets the fixture type associated with this instance
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.TestFrameworks.IPexTestFrameworkDriver">
            <summary>
            Helper interface for test framework
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.IPexTestFrameworkDriver.ExecuteAssembly(Microsoft.ExtendedReflection.Metadata.AssemblyEx)">
            <summary>
            Executes an assembly
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.IPexTestFrameworkDriver.TryExecuteAssemblySetup">
            <summary>
            Executes assembly setup method.
            </summary>
            <returns>Returns false only when there is a setup method and it fails</returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.IPexTestFrameworkDriver.TryExecuteAssemblyTearDown">
            <summary>
            Executes assembly tear down method
            </summary>
            <returns>Returns false only when there is a teardown method and it fails</returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.IPexTestFrameworkDriver.TryExecuteFixtureSetup(System.Object,System.String)">
            <summary>
            Executes fixture setup method
            </summary>
            <returns>Returns false only when there is a setup method and it fails</returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.IPexTestFrameworkDriver.TryExecuteFixtureTearDown(System.Object,System.String)">
            <summary>
            Executes fixture tear down method
            </summary>
            <returns>Returns false only when there is a teardown method and it fails</returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.IPexTestFrameworkDriver.TryExecuteTestSetup(System.Object,System.String)">
            <summary>
            Executes test setup method
            </summary>
            <returns>Returns false only when there is a setup method and it fails</returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestFrameworks.IPexTestFrameworkDriver.TryExecuteTestTearDown(System.Object,System.String)">
            <summary>
            Executes test teardown method
            </summary>
            <returns>Returns false only when there is a teardown method and it fails</returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.TestGeneration.IPexAssertionFilter">
            <summary>
            A filter for member whose value could be asserted
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestGeneration.IPexAssertionFilter.SkipAssertMembers(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Gets a value indicating if the members of the type
            should *not* be asserted
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestGeneration.IPexAssertionFilter.SkipAssertFieldValue(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Gets a value indicating if the value of the field
            should *not* be asserted
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestGeneration.IPexAssertionFilter.SkipAssertPropertyValue(Microsoft.ExtendedReflection.Metadata.Property)">
            <summary>
            Gets a value indicating if the value of the property
            should *not* be asserted
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Engine.TestGeneration.IPexAssertionFilterManager">
            <summary>
            A manager for assertion filters
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestGeneration.IPexAssertionFilterManager.AddAssertionFilter(Microsoft.Pex.Engine.TestGeneration.IPexAssertionFilter)">
            <summary>
            Adds an assertion filter
            </summary>
            <param name="assertionFilter"></param>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestGeneration.IPexAssertionFilterManager.SkipAssertPropertyValue(Microsoft.ExtendedReflection.Metadata.Property)">
            <summary>
            Gets a value indicating if the value of the member
            should be not asserted
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestGeneration.IPexAssertionFilterManager.SkipAssertFieldValue(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Gets a value indicating if the value of the member
            should be not asserted
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestGeneration.IPexAssertionFilterManager.SkipAssertMembers(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Gets a value indicating if the value of the member should be not asserted
            </summary>
            <param name="actualValueType"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestGeneration.IPexAssertionFilterManager.AssertionFilters">
            <summary>
            Gets the assertion filters
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.PexExplorationName">
            <summary>
            A key that uniquely identifies an exploration
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexExplorationName.#ctor(Microsoft.ExtendedReflection.Metadata.Names.TypeName,Microsoft.ExtendedReflection.Metadata.Names.MethodName)">
            <summary>
            Initializes a new instance of PexExplorationKey
            </summary>
            <param name="fixture"></param>
            <param name="exploration"></param>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexExplorationName.GetHashCode">
            <summary>
            Gets the hashcode
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexExplorationName.Equals(Microsoft.Pex.Engine.PexExplorationName)">
            <summary>
            Gets a value indicating if both keys are equal
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexExplorationName.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Microsoft.Pex.Engine.PexExplorationName.ToString">
            <summary>
            Gets a string representation
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexExplorationName.Type">
            <summary>
            Gets the type of the exploration
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.PexExplorationName.Method">
            <summary>
            Gets the exploration method
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.RuntimeContexts.IPexRuntimeContextManager">
            <summary>
            Maintains the pool of runtime context.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.RuntimeContexts.IPexRuntimeContextManager.AddRuntimeContext(Microsoft.Pex.Engine.RuntimeContexts.IPexRuntimeContext)">
            <summary>
            Adds a runtime context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Microsoft.Pex.Engine.RuntimeContexts.IPexRuntimeContextManager.AddPathRuntimeContext(Microsoft.Pex.Engine.RuntimeContexts.IPexRuntimeContext)">
            <summary>
            Adds a runtiem context with a path lifetime.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.Pex.Engine.RuntimeContexts.IPexRuntimeContextManager.CreateContexts(Microsoft.Pex.Engine.ComponentModel.IPexPathComponent)">
            <summary>
            Returns a disposable instance that enables all runtime contexts
            </summary>
            <param name="pathHost">current path host</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Engine.RuntimeContexts.IPexRuntimeContextManager.RuntimeContexts">
            <summary>
            Gets the runtime contexts.
            </summary>
            <value>The runtime contexts.</value>
        </member>
        <member name="P:Microsoft.Pex.Engine.RuntimeContexts.IPexRuntimeContextManager.PathRuntimeContexts">
            <summary>
            Gets the runtime context with a path lifetime
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.RuntimeContexts.IPexRuntimeContextScope">
            <summary>
            A runtime context scope
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.RuntimeContexts.IPexRuntimeContextScope.Rollbacks">
            <summary>
            After the instance has been rolled back, get the list of rollback actions
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.Symbols.__TestabilityHelper">
            <summary>
            Internal class used by Pex
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Engine.Symbols.__TestabilityHelper.FloatingPointEquality">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.TestGeneration.IPexGeneratedTestSettings">
            <summary>
            Settings for the current generated test
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestGeneration.IPexGeneratedTestSettings.TryGetIgnored(System.String@)">
            <summary>
            Tries to get a value indicating if the test should be ignored
            </summary>
            <param name="ignoreMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestGeneration.IPexGeneratedTestSettings.Ignore(System.String)">
            <summary>
            Marks the test as ignored with a specific error message
            </summary>
            <param name="ignoreMessage"></param>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestGeneration.IPexGeneratedTestSettings.SetHosted">
            <summary>
            Markes the test as hosted
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Engine.TestGeneration.IPexGeneratedTestSettings.IsHosted">
            <summary>
            Gets a value indicating if the test should be hosted.
            This property can only be set to true.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Moles.PexMolesAssembliesFromDirectoryAttribute">
            <summary>
            Attributes that specifies that any assembly with suffix '.Moles.dll' or
            '.Behaviors.dll' should be probed for moles, stubs and behaved types.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Moles.PexMolesAssembliesFromDirectoryAttribute.#ctor(System.String[])">
            <summary>
            Initialies the attribute
            </summary>
            <param name="directories"></param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Moles.PexMolesAssembliesFromDirectoryAttribute.GetDirectories(Microsoft.Pex.Engine.ComponentModel.IPexComponent)">
            <summary>
            </summary>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.Moles.PexMolesAssembliesFromDirectoryAttribute.Directories">
            <summary>
            Gets the directories
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexPreparationMethodAttribute">
            <summary>
            Tags methods used to prepare types. 
            The method must be visible, static in a static class. It may have parameters.
            </summary>
            <remarks>
            This attribute is attached to a method to indicate
            the type that needs to be prepared.
            </remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexPreparationMethodAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.PexPreparationMethodAttribute"/> class.
            </summary>
            <param name="preparedTypeDefinition">Type that needs to be prepared.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexPreparationMethodAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.PexPreparationMethodAttribute"/> class.
            </summary>
            <param name="preparedTypeAssembly">The prepared type assembly.</param>
            <param name="preparedTypeFullName">Full name of the prepared type.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexPreparationMethodAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.PexPreparationMethodAttribute"/> class.
            </summary>
            <param name="preparedTypeAssembly">The prepared type assembly.</param>
            <param name="preparedTypeFullName">Full name of the prepared type.</param>
        </member>
        <member name="P:Microsoft.Pex.Framework.PexPreparationMethodAttribute.PreparedType">
            <summary>
            Gets the prepared type
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Coverage.PexCoverageFilterAssembliesAttribute">
            <summary>
            Specifies the coverage domain for a set of assemblies
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Coverage.PexCoverageFilterAssembliesAttribute.#ctor(Microsoft.Pex.Framework.Coverage.PexCoverageDomain,System.String[])">
            <summary>
            Initialies a new instance of the attribute.
            </summary>
            <param name="coverageDomain">the desired coverage domain</param>
            <param name="assemblies">the set of assemblies that belong to this domain</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Coverage.PexCoverageFilterAssembliesAttribute.CreateFilter(Microsoft.Pex.Engine.ComponentModel.IPexDecoratedComponentElement)">
            <summary>
            Creates the filter
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.Creatable.PexCreatableFactoryForDelegatesAttribute">
            <summary>
            A creatable factory that generates delegate that call into PexChoose
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.PexCreatableFactoryForDelegatesAttribute.TryCreateCreatableFactory(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,Microsoft.Pex.Engine.Creatable.IPexCreatableFactory@)">
            <summary>
            Tries to create a creatable for delegate types
            </summary>
            <param name="host"></param>
            <param name="factory"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.Domains.PexBooleanAsZeroOrOneAttribute">
            <summary>
            Attribute that makes sure that Pex uses only zero and one as boolean values
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Domains.PexBooleanAsZeroOrOneAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Domains.PexBooleanAsZeroOrOneAttribute"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Domains.PexBooleanAsZeroOrOneAttribute.TryGetInvariant(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,Microsoft.ExtendedReflection.Metadata.Layout,System.Converter{Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term}@)">
            <summary>
            Tries to get an invariant.
            </summary>
            <param name="host">The host.</param>
            <param name="layout">The layout.</param>
            <param name="invariantBuilder">The invariant builder.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.Domains.PexEnumValuesDefinedAttribute">
            <summary>
            Attribute that makes sure that Pex uses defined values for a particular enum type
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Domains.PexEnumValuesDefinedAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Domains.PexEnumValuesDefinedAttribute"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Domains.PexEnumValuesDefinedAttribute.TryGetInvariant(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,Microsoft.ExtendedReflection.Metadata.Layout,System.Converter{Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term}@)">
            <summary>
            Tries to get an invariant.
            </summary>
            <param name="host">The host.</param>
            <param name="layout">The layout.</param>
            <param name="invariantBuilder">The invariant builder.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.Domains.PexFSharpNonNullableTypesAttribute">
            <summary>
            Attribute that prevents Pex from generating null instance for
            F# types that are not explicitely marked as UseNullAsTrueValue
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Domains.PexFSharpNonNullableTypesAttribute.BeforeExploration(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent)">
            <summary>
            Callback that is executed before the exploration starts.
            </summary>
            <param name="host">The host.</param>
            <returns>some data</returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.Domains.PexNonDefaultDomain">
            <summary>
            A non-nullable domain
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Domains.PexNonDefaultDomain.Instance">
            <summary>
            Domain singleton
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Domains.PexNonDefaultDomain.TryGetInvariant(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,Microsoft.ExtendedReflection.Metadata.Layout,System.Converter{Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term}@)">
            <summary>
            Tries to get an invariant.
            </summary>
            <param name="host">The host.</param>
            <param name="layout">The layout.</param>
            <param name="invariantBuilder">The invariant builder.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.Domains.PexNonNullableTypesFromAssemblyAttribute">
            <summary>
            Attribute that prevents Pex from generating null instance for
            any types from a particular assembly
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Domains.PexNonNullableTypesFromAssemblyAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Domains.PexNonNullableTypesFromAssemblyAttribute"/> class.
            </summary>
            <param name="typeOfAssembly">The type of assembly.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Domains.PexNonNullableTypesFromAssemblyAttribute.BeforeExploration(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent)">
            <summary>
            Callback that is executed before the exploration starts.
            </summary>
            <param name="host">The host.</param>
            <returns>some data</returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.Explorable.PexExplorableFromFactoriesFromAssemblyAttribute">
            <summary>
            Attribute that scans an assembly for
            methods marked by <see cref="T:Microsoft.Pex.Framework.PexFactoryMethodAttribute"/> 
            located in static types.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexExplorableFromFactoriesFromAssemblyAttribute.#ctor(Microsoft.ExtendedReflection.Metadata.AssemblyEx)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Explorable.PexExplorableFromFactoriesFromAssemblyAttribute"/> class.
            </summary>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexExplorableFromFactoriesFromAssemblyAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Explorable.PexExplorableFromFactoriesFromAssemblyAttribute"/> class.
            </summary>
            <param name="typeOfAssembly">The type of assembly.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexExplorableFromFactoriesFromAssemblyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Explorable.PexExplorableFromFactoriesFromAssemblyAttribute"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexExplorableFromFactoriesFromAssemblyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Explorable.PexExplorableFromFactoriesFromAssemblyAttribute"/> class.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexExplorableFromFactoriesFromAssemblyAttribute.Validate(Microsoft.Pex.Engine.Logging.IPexLog,Microsoft.ExtendedReflection.Metadata.ICustomAttributeProviderEx,Microsoft.ExtendedReflection.Metadata.VisibilityContext)">
            <summary>
            Validates the attribute in a particular visibility context.
            </summary>
            <param name="log">The log.</param>
            <param name="target">The target.</param>
            <param name="visibilityContextOfGeneratedTests">The visibility context of generated tests.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexExplorableFromFactoriesFromAssemblyAttribute.GetUncachedExplorables(Microsoft.Pex.Engine.ComponentModel.IPexComponent,Microsoft.ExtendedReflection.Collections.SafeList{Microsoft.Pex.Engine.Explorable.IPexExplorable})">
            <summary>
            Gets a list of explorable methods
            </summary>
            <param name="host"></param>
            <param name="explorables"></param>
        </member>
        <member name="T:Microsoft.Pex.Framework.Explorable.PexInvariant">
            <summary>
            Helper method to create instances of types which have a contract invariant method
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexInvariant.CreateInstance``1">
            <summary>
            Creates an instance of a type with a contract invariant method.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexInvariant.SetField``1(System.Object,System.String,``0)">
            <summary>
            Sets a field of an object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="object">The object.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Explorable.PexInvariant.CheckInvariant(System.Object)">
            <summary>
            Checks the invariant, if any exists.
            </summary>
            <param name="object">The object.</param>
        </member>
        <member name="T:Microsoft.Pex.Framework.Explorable.PexInvariant.Metadata">
            <summary>
            Metadata describing the methods in <see cref="T:Microsoft.Pex.Framework.Explorable.PexInvariant"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Explorable.PexInvariant.Metadata.GenericSetFieldMethod">
            <summary>
            A metadata entity.
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Explorable.PexInvariant.Metadata.GenericCreateInstanceMethod">
            <summary>
            A metadata entity.
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Explorable.PexInvariant.Metadata.CheckInvariantMethod">
            <summary>
            A metadata entity.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.FixIt.PexFixItMethodFilterAttributeBase">
            <summary>
            Abstract base attribute to define fix it method filters
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.FixIt.PexFixItMethodFilterAttributeBase.TryCreateMethodFilter(Microsoft.Pex.Engine.ComponentModel.IPexComponent,Microsoft.Pex.Engine.FixIt.IPexFixItMethodFilter@)">
            <summary>
            Tries to instantiate a new method filter
            </summary>
            <param name="host"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.FixIt.PexFixItMethodFilterAttributeBase.BeforeExecution(Microsoft.Pex.Engine.ComponentModel.IPexComponent)">
            <summary>
            Initializes the filter
            </summary>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.FixIt.PexFixItMethodFilterAttributeBase.AfterExecution(Microsoft.Pex.Engine.ComponentModel.IPexComponent,System.Object)">
            <summary>
            
            </summary>
            <param name="host"></param>
            <param name="data"></param>
        </member>
        <member name="M:Microsoft.Pex.Framework.FixIt.PexFixItMethodFilterAttributeBase.Load(Microsoft.ExtendedReflection.ComponentModel.IContainer)">
            <summary>
            
            </summary>
            <param name="engineContainer"></param>
        </member>
        <member name="T:Microsoft.Pex.Framework.FixIt.PexFixItSkipFixesForTypeAttribute">
            <summary>
            An attribute that specifies a type for which Pex should not generate fixes.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.FixIt.PexFixItSkipFixesForTypeAttribute.#ctor(System.Type)">
            <summary>
            Instantiates a new instance of the attribute.
            </summary>
            <param name="type">A type definition</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.FixIt.PexFixItSkipFixesForTypeAttribute.TryCreateMethodFilter(Microsoft.Pex.Engine.ComponentModel.IPexComponent,Microsoft.Pex.Engine.FixIt.IPexFixItMethodFilter@)">
            <summary>
            Creates the filter
            </summary>
            <param name="host"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.Generated.PexCurrentCultureContext">
            <summary>
            Stores and restores the CurrentCulture and CurrentUICulture of a thread
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.PexCurrentCultureContext.Create">
            <summary>
            Creates the context for the current thread
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.PexCurrentCultureContext.Dispose">
            <summary>
            Revets the current culture and ui culture to its original state
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Framework.Generated.PexCurrentCultureContext.CultureHasChanged">
            <summary>
            Gets a value indicating if any of the thread culture have changed
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Generated.PexDisposeException">
            <summary>
            An exception encapsulated a collection of exceptions
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.PexDisposeException.#ctor(System.Exception[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Generated.PexDisposeException"/> class.
            </summary>
            <param name="innerExceptions">The inner exceptions.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.PexDisposeException.ToString">
            <summary>
            Creates and returns a string representation of the current exception.
            </summary>
            <returns>
            A string representation of the current exception.
            </returns>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*"/>
            </PermissionSet>
        </member>
        <member name="P:Microsoft.Pex.Framework.Generated.PexDisposeException.InnerExceptions">
            <summary>
            Gets the inner exceptions.
            </summary>
            <value>The inner exceptions.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Generated.PexDisposeException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <value></value>
            <returns>The error message that explains the reason for the exception, or an empty string("").</returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.Generated.PexDisposeException.StackTrace">
            <summary>
            Gets the exception stack trace
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Generated.PexDisposableContext">
            <summary>
            A disposable context to store disposable object
            that will dispose all objects safely.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.PexDisposableContext.Create">
            <summary>
            Creates this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.PexDisposableContext.Add(System.Object)">
            <summary>
            Adds the object to the context (may be null). If the object is a mole,
            attaches the mole and stores the context
            </summary>
            <param name="object"></param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.PexDisposableContext.Add(System.IDisposable)">
            <summary>
            Adds the specified disposable (may be null).
            </summary>
            <param name="disposable">The disposable.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.PexDisposableContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, 
            or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Framework.Generated.PexDisposableContext.IsEmpty">
            <summary>
            Gets the number of disposable instances in this context.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Generated.PexDisposableContext.Count">
            <summary>
            Gets the number of instances in the context. There might be aliasing.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Generated.PexDisposableContext.Metadata">
            <summary>
            Metadata of the PexDisposableContext
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Generated.PexDisposableContext.Metadata.PexDisposableContextType">
            <summary>
            PexDisposableContext type
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Generated.PexDisposableContext.Metadata.PexDisposableContextCreate">
            <summary>
            The Create method
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Generated.PexDisposableContext.Metadata.PexDisposableContextDispose">
            <summary>
             The dispose method
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Generated.PexDisposableContext.Metadata.PexDisposableContextAddObjectMethod">
            <summary>
            The Add(object) method
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Generated.PexDisposableContext.Metadata.PexDisposableContextAddIDisposableMethod">
            <summary>
            The Add(IDisposable) method
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.PexDisposableContext.Metadata.TryGetDisposableContextAddMethod(Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.ExtendedReflection.Metadata.Method@)">
            <summary>
            Tries to get the appropriate Add method for a given type
            </summary>
            <param name="type"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.Generated.PexFactories">
            <summary>
            A collection of factory methods for various type of the .Net runtime
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.PexFactories.CreateNameValueCollection(System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>A factory for System.Collections.Specialized.NameValueCollection instances</summary>
            <param name="values">the list of values</param>
            <returns>the generated collection</returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.Generated.PexGeneratedTestsAssemblyAttribute">
            <summary>
            Attribute to specify that the current assembly contains the tests
            from another assembly.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.PexGeneratedTestsAssemblyAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Generated.PexGeneratedTestsAssemblyAttribute"/> class.
            </summary>
            <param name="typeOfAssembly">The type of assembly.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Generated.PexGeneratedTestsAssemblyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Generated.PexGeneratedTestsAssemblyAttribute"/> class.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
        </member>
        <member name="P:Microsoft.Pex.Framework.Generated.PexGeneratedTestsAssemblyAttribute.TargetAssemblyName">
            <summary>
            Gets the name of the target assembly.
            </summary>
            <value>The name of the target assembly.</value>
        </member>
        <member name="T:Microsoft.Pex.Framework.Generated.PexRequiresHostAttribute">
            <summary>
            Marks a test that requires to be run on under the Pex host.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Goals.PexExpectedNullParameterThrowsArgumentNullExceptionAttribute">
            <summary>
            Attributes that specifies that each reference argument
            of the method under test should yield a passing test case
            throwing an ArgumentNullException, who's message contains
            the argument name.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Goals.PexExpectedNullParameterThrowsArgumentNullExceptionAttribute.TryCreateExplorationGoal(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,Microsoft.Pex.Engine.Goals.IPexExplorationGoal@)">
            <summary>
            Tries to create a goal for the parameters
            </summary>
            <param name="host"></param>
            <param name="goal"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.Graphs.PexDynamicCallGraphAttribute">
            <summary>
            A package that generates the dynamic call graph
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Graphs.PexDynamicCallGraphAttribute.BeforeExploration(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent)">
            <summary>
            Prepares building the dynamic call graph
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Graphs.PexDynamicCallGraphAttribute.AfterExploration(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,System.Object)">
            <summary>
            Renders the dynamic call graph
            </summary>
            <param name="host"></param>
            <param name="data"></param>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexAssertReachEventuallyAttribute">
            <summary>
            This attribute is used in conjunction with <see cref="M:Microsoft.Pex.Framework.PexAssert.ReachEventually"/> to
            specify one or more goals that should be executed during exploration.
            </summary>
            <remarks>The attribute identifies methods that contain goals in the form of one or more
            <see cref="M:Microsoft.Pex.Framework.PexAssert.ReachEventually"/> calls. If the method contains multiple goals, each one must
            have a string or integer identifier that is unique within the method. Use the attribute's
            positional parameters to define the identifiers, and pass them to the
            appropriate <see cref="M:Microsoft.Pex.Framework.PexAssert.ReachEventually"/> call.</remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssertReachEventuallyAttribute.#ctor(System.String[])">
            <summary>
            Identifies a method with one or more goals, each goal identified by a string
            identifier.
            </summary>
            <param name="goals">One or more strings, each of which identifies one of the method's goals.</param>
            <seealso cref="M:Microsoft.Pex.Framework.PexAssert.ReachEventually(System.String)"/>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssertReachEventuallyAttribute.#ctor(System.Int32)">
            <summary>
            Identifies a method with one or more goals, which are identified by a series of integers,
            starting with zero and ending with <paramref name="count"/> - 1.
            </summary>
            <param name="count">The number of goals in the method.</param>
            <seealso cref="M:Microsoft.Pex.Framework.PexAssert.ReachEventually(System.Int32)"/>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssertReachEventuallyAttribute.#ctor(System.Int32[])">
            <summary>
            Identifies a method with one or more goals, each identified by a specified integer.
            </summary>
            <param name="goals">One or more integers, each of which identifies a particular goal.</param>
            <seealso cref="M:Microsoft.Pex.Framework.PexAssert.ReachEventually(System.Int32)"/>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssertReachEventuallyAttribute.#ctor">
            <summary>
            Identifies a method with one goal.
            </summary>
            <seealso cref="M:Microsoft.Pex.Framework.PexAssert.ReachEventually"/>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexAssertReachEventuallyAttribute.TryCreateExplorationGoal(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,Microsoft.Pex.Engine.Goals.IPexExplorationGoal@)">
            <summary>
            Installs the exploration goal.
            </summary>
            <param name="host"></param>
            <param name="goal"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.PexAssertReachEventuallyAttribute.StopWhenAllReached">
            <summary>
            A named parameter that specifies whether exploration should stop when all
            the goals have been reached.
            </summary>
            <value>Set this value to <c>true</c> to specify that exploration should stop
            when all goals are reached and <c>false</c> otherwise.</value>
        </member>
        <member name="T:Microsoft.Pex.Framework.Moles.PexUseMolesFromAssemblyAttribute">
            <summary>
            Adds the mole of an assembly into the mole metadata manager
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Moles.PexUseMolesFromAssemblyAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Moles.PexUseMolesFromAssemblyAttribute"/> class.
            </summary>
            <param name="typeOfAssembly">The type of assembly.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Moles.PexUseMolesFromAssemblyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Moles.PexUseMolesFromAssemblyAttribute"/> class.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Moles.PexUseMolesFromAssemblyAttribute.BeforeExecution(Microsoft.Pex.Engine.ComponentModel.IPexComponent)">
            <summary>
            Callback that is executed before the execution  starts.
            </summary>
            <param name="host">The host.</param>
            <returns>some data</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Moles.PexUseMolesFromAssemblyAttribute.AfterExecution(Microsoft.Pex.Engine.ComponentModel.IPexComponent,System.Object)">
            <summary>
            Callback that is executed after the execution ends.
            </summary>
            <param name="host">The host.</param>
            <param name="data">The data returned by <see cref="M:Microsoft.Pex.Framework.Moles.PexUseMolesFromAssemblyAttribute.BeforeExecution(Microsoft.Pex.Engine.ComponentModel.IPexComponent)"/>.</param>
        </member>
        <member name="T:Microsoft.Pex.Framework.Moles.PexUseMolesFromTestAssemblyAttribute">
            <summary>
            Adds the moles from the test assembly into the mole metadata pool
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Moles.PexUseMolesFromTestAssemblyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Moles.PexUseMolesFromTestAssemblyAttribute"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Moles.PexUseMolesFromTestAssemblyAttribute.BeforeExecution(Microsoft.Pex.Engine.ComponentModel.IPexComponent)">
            <summary>
            Callback that is executed before the execution  starts.
            </summary>
            <param name="host">The host.</param>
            <returns>some data</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Moles.PexUseMolesFromTestAssemblyAttribute.AfterExecution(Microsoft.Pex.Engine.ComponentModel.IPexComponent,System.Object)">
            <summary>
            Callback that is executed after the execution ends.
            </summary>
            <param name="host">The host.</param>
            <param name="data">The data returned by <see cref="M:Microsoft.Pex.Framework.Moles.PexUseMolesFromTestAssemblyAttribute.BeforeExecution(Microsoft.Pex.Engine.ComponentModel.IPexComponent)"/>.</param>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexAction">
            <summary>
            Anonymous action
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexAction`1">
            <summary>
            Anonymous action
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexAction`2">
            <summary>
            Anonymous action
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="t1"></param>
            <param name="t2"></param>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexEqualityComparison`1">
            <summary>
            Returns true if left is equal to right
            </summary>
            <typeparam name="T"></typeparam>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.Preparable.PexPreparableAttributeBase">
            <summary>
            Attribute to define how preparation methods should be registered
            before a type is allowed to execute
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Preparable.PexPreparableAttributeBase.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Preparable.PexPreparableAttributeBase"/> class.
            </summary>
            <param name="preparableType">Type of the preparable.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Preparable.PexPreparableAttributeBase.TryCreatePreparableDefinition(Microsoft.Pex.Engine.ComponentModel.IPexComponent,Microsoft.Pex.Engine.Preparable.IPexPreparableDefinition@)">
            <summary>
            Creates the preparable instance
            </summary>
            <param name="host">The host.</param>
            <param name="preparable">The preparable.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Preparable.PexPreparableAttributeBase.BeforeExploration(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent)">
            <summary>
            Callback that is executed before the exploration starts.
            </summary>
            <param name="host">The host.</param>
            <returns>some data</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Preparable.PexPreparableAttributeBase.AfterExploration(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,System.Object)">
            <summary>
            Callback that is executed after the exploration ends.
            </summary>
            <param name="host">The host.</param>
            <param name="data">The data returned by BeforeExploration.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Preparable.PexPreparableAttributeBase.Load(Microsoft.ExtendedReflection.ComponentModel.IContainer)">
            <summary>
            This method provides the opportunity install or substitute services.
            </summary>
            <param name="explorationContainer">The exploration container.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Preparable.PexPreparableAttributeBase.Initialize(Microsoft.Pex.Engine.ComponentModel.IPexExplorationEngine)">
            <summary>
            Initializes the specified exploration package. May interact with services.
            </summary>
            <param name="host">The host.</param>
        </member>
        <member name="P:Microsoft.Pex.Framework.Preparable.PexPreparableAttributeBase.PreparableType">
            <summary>
            Gets the type to be created by exploration.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Preparable.PexPreparableFromFactoriesAttributeBase">
            <summary>
            Attribute that scans an assembly for
            methods marked by <see cref="T:Microsoft.Pex.Framework.PexPreparationMethodAttribute"/> 
            located in static types.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Preparable.PexPreparableFromFactoriesAttributeBase.#ctor">
            <summary>
            Initializes a new instance
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Preparable.PexPreparableFromFactoriesAttributeBase.BeforeExploration(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent)">
            <summary>
            Callback that is executed before the exploration starts.
            </summary>
            <param name="host">The host.</param>
            <returns>some data</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Preparable.PexPreparableFromFactoriesAttributeBase.TryValidateType(Microsoft.Pex.Engine.ComponentModel.IPexComponent,Microsoft.ExtendedReflection.Metadata.VisibilityContext,Microsoft.ExtendedReflection.Metadata.TypeDefinition)">
            <summary>
            Tries to validate the factory type.
            </summary>
            <param name="host"></param>
            <param name="visibility"></param>
            <param name="typeDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Preparable.PexPreparableFromFactoriesAttributeBase.GetUncachedPreparables(Microsoft.Pex.Engine.ComponentModel.IPexComponent,Microsoft.ExtendedReflection.Collections.SafeList{Microsoft.Pex.Engine.Preparable.IPexPreparableDefinition})">
            <summary>
            Gets the list of preparable methods
            </summary>
            <param name="host"></param>
            <param name="preparables"></param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Preparable.PexPreparableFromFactoriesAttributeBase.GetUncachedPreparableMethods(Microsoft.Pex.Engine.ComponentModel.IPexComponent,Microsoft.ExtendedReflection.Collections.SafeList{Microsoft.Pex.Engine.Preparable.IPexPreparableDefinition},Microsoft.ExtendedReflection.Metadata.VisibilityContext,Microsoft.ExtendedReflection.Metadata.TypeDefinition)">
            <summary>
            Gets the list of preparable methods from a type
            </summary>
            <param name="host"></param>
            <param name="preparables"></param>
            <param name="visibility"></param>
            <param name="typeDefinition"></param>
        </member>
        <member name="T:Microsoft.Pex.Framework.Preparable.PexPreparableFromFactoriesFromAssemblyAttribute">
            <summary>
            Attribute that scans an assembly for
            methods marked by <see cref="T:Microsoft.Pex.Framework.PexFactoryMethodAttribute"/> 
            located in static types.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Preparable.PexPreparableFromFactoriesFromAssemblyAttribute.#ctor(Microsoft.ExtendedReflection.Metadata.AssemblyEx)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Preparable.PexPreparableFromFactoriesFromAssemblyAttribute"/> class.
            </summary>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Preparable.PexPreparableFromFactoriesFromAssemblyAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Preparable.PexPreparableFromFactoriesFromAssemblyAttribute"/> class.
            </summary>
            <param name="typeOfAssembly">The type of assembly.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Preparable.PexPreparableFromFactoriesFromAssemblyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Preparable.PexPreparableFromFactoriesFromAssemblyAttribute"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Preparable.PexPreparableFromFactoriesFromAssemblyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Preparable.PexPreparableFromFactoriesFromAssemblyAttribute"/> class.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Preparable.PexPreparableFromFactoriesFromAssemblyAttribute.Validate(Microsoft.Pex.Engine.Logging.IPexLog,Microsoft.ExtendedReflection.Metadata.ICustomAttributeProviderEx,Microsoft.ExtendedReflection.Metadata.VisibilityContext)">
            <summary>
            Validates the attribute in a particular visibility context.
            </summary>
            <param name="log">The log.</param>
            <param name="target">The target.</param>
            <param name="visibilityContextOfGeneratedTests">The visibility context of generated tests.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Preparable.PexPreparableFromFactoriesFromAssemblyAttribute.GetUncachedPreparables(Microsoft.Pex.Engine.ComponentModel.IPexComponent,Microsoft.ExtendedReflection.Collections.SafeList{Microsoft.Pex.Engine.Preparable.IPexPreparableDefinition})">
            <summary>
            Gets a list of explorable methods
            </summary>
            <param name="host"></param>
            <param name="explorables"></param>
        </member>
        <member name="T:Microsoft.Pex.Framework.Moles.PexChooseAsMoleCurrentBehaviorAttribute">
            <summary>
            Packages that sets PexChoose as the fallback behavior
            of stubs
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Moles.PexChooseAsMoleCurrentBehaviorAttribute.TryCreateRuntimeContext(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,Microsoft.Pex.Engine.RuntimeContexts.IPexRuntimeContext@)">
            <summary>
            Tries to create runtime context.
            </summary>
            <param name="host">The host.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.Moles.PexChooseAsMoleCurrentBehaviorAttribute.PexMoleBehavior.Touched">
            <summary>
            Gets a value indicating if the stub behavior was used
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Moles.PexChooseMoleBehavior">
            <summary>
            A <see cref="T:Microsoft.Moles.Framework.Moles.IMoleBehavior"/> implementation
            that calls <see cref="T:Microsoft.Pex.Framework.PexChoose"/> to get new values.
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Moles.PexChooseMoleBehavior.instance">
            <summary>
            The singleton instance
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Moles.PexChooseMoleBehavior.Setup">
            <summary>
            Assign this stub behavior as a default and
            reverts the change in the Dispose method.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.Moles.PexChooseMoleBehavior.Instance">
            <summary>
            Gets the singleton instance 
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Moles.PexAssumeContractEnsuresFailureAtStubSurfaceAttribute">
            <summary>
            Obsolete.
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Moles.PexAssumeContractEnsuresFailureAtBehavedSurfaceAttribute">
            <summary>
            Filters that Contract.Ensures violations from stubs are considered as
            assumptions
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Moles.PexAssumeContractEnsuresFailureAtBehavedSurfaceAttribute.BeforeExploration(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent)">
            <summary>
            Callback that is executed before the exploration starts.
            </summary>
            <param name="host">The host.</param>
            <returns>some data</returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.Moles.PexChooseAsBehavedCurrentBehaviorAttribute">
            <summary>
            Packages that sets PexChoose as the fallback behavior
            of stubs
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Moles.PexChooseAsBehavedCurrentBehaviorAttribute.TryCreateRuntimeContext(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,Microsoft.Pex.Engine.RuntimeContexts.IPexRuntimeContext@)">
            <summary>
            Tries to create runtime context.
            </summary>
            <param name="host">The host.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.Moles.PexChooseAsBehavedCurrentBehaviorAttribute.PexBehavedBehavior.Touched">
            <summary>
            Gets a value indicating if the stub behavior was used
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Moles.PexChooseBehavedBehavior">
            <summary>
            A <see cref="T:Microsoft.Moles.Framework.Behaviors.IBehavior"/> implementation
            that calls <see cref="T:Microsoft.Pex.Framework.PexChoose"/> to get new values.
            </summary>
        </member>
        <member name="F:Microsoft.Pex.Framework.Moles.PexChooseBehavedBehavior.instance">
            <summary>
            The singleton instance
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Moles.PexChooseBehavedBehavior.Setup">
            <summary>
            Assign this stub behavior as a default and
            reverts the change in the Dispose method.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.Moles.PexChooseBehavedBehavior.Instance">
            <summary>
            Gets the singleton instance 
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Moles.PexMoleExplorableGuesserAttribute">
            <summary>
            Guesses explorable for types that require moles.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Moles.PexMoleExplorableGuesserAttribute.CreateExplorableGuessers(Microsoft.Pex.Engine.ComponentModel.IPexComponent)">
            <summary>
            Creates the moles guesser
            </summary>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.Moles.PexMoleExplorableGuesserAttribute.Rank">
            <summary>
            Rank of this guesser
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Moles.PexUseStubsFromAssemblyAttribute">
            <summary>
            This attribute is deprecated.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Moles.PexUseStubsFromAssemblyAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Moles.PexUseStubsFromAssemblyAttribute"/> class.
            </summary>
            <param name="typeOfAssembly">The type of assembly.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Moles.PexUseStubsFromAssemblyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Moles.PexUseStubsFromAssemblyAttribute"/> class.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
        </member>
        <member name="T:Microsoft.Pex.Framework.Moles.PexUseStubsFromTestAssemblyAttribute">
            <summary>
            Attribute that load stub types or behaved types from the test assembly into the 
            type hint pool
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Engine.TestPrioritization.IPexTestPrioritizationManager">
            <summary>
            Prioritizes explorations based on criteria given by IPexExplorationSorter
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestPrioritization.IPexTestPrioritizationManager.GetFixtures(Microsoft.Pex.Engine.PexAssembly)">
            <summary>
            Returns fixtures sorted based on given criteria
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Engine.TestPrioritization.IPexTestPrioritizationManager.GetExplorations(Microsoft.Pex.Engine.PexFixture)">
            <summary>
            Returns explorations within the fixture
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.PexMethodUnderTestAttribute">
            <summary>
            Specifies the intended method under test for the current exploration.
            This attribute is used for exploration of private methods that require Reflection.
            Usually, this information can be mined by reading the method body byte code
            but when private method calls involving reflection are involved, we need this attribute.
            </summary>
            <remarks>
            This attribute requires the test class to be annotated with the 'TypeUnderTest'
            setting.
            </remarks>
        </member>
        <member name="M:Microsoft.Pex.Framework.PexMethodUnderTestAttribute.#ctor(System.String)">
            <summary>
            Specifies a method under test
            </summary>
            <param name="shortNameWithParameters">method short name including parameter types</param>
        </member>
        <member name="P:Microsoft.Pex.Framework.PexMethodUnderTestAttribute.MethodUnderTest">
            <summary>
            Gets the member under test
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Suppression.PexSuppressExplorableEventAttribute">
            <summary>
            Suppresses uninstrumented call for any type in namespace
            and subnamespaces
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Suppression.PexSuppressExplorableEventAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Suppression.PexSuppressExplorableEventAttribute"/> class.
            </summary>
            <param name="typeFullName">Full name of the type.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Suppression.PexSuppressExplorableEventAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Suppression.PexSuppressExplorableEventAttribute"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Suppression.PexSuppressExplorableEventAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Suppression.PexSuppressExplorableEventAttribute"/> class.
            </summary>
            <param name="typeFullNames">The type full names.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Suppression.PexSuppressExplorableEventAttribute.#ctor(System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Suppression.PexSuppressExplorableEventAttribute"/> class.
            </summary>
            <param name="types">The types.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Suppression.PexSuppressExplorableEventAttribute.BeforeExploration(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent)">
            <summary>
            Callback that is executed before the exploration starts.
            </summary>
            <param name="host">The host.</param>
            <returns>some data</returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.Suppression.PexSuppressExplorableEventAttribute.TypeFullNames">
            <summary>
            Gets the type full names.
            </summary>
            <value>The type full names.</value>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.Summarizer.ExecutionMonitor.Initialize">
            <summary>
            Initialize
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Creatable.Summarizer.ConditionBuilder">
            <summary>
            ConditionBuilder
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Framework.Creatable.Summarizer.ConditionBuilder.ParameterToFieldMap">
            <summary>
            ParameterToFieldMap
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Framework.Creatable.Summarizer.ConditionBuilder.Map">
            <summary>
            Map
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Creatable.Summarizer.States.MetaState">
            <summary>
            MetaState
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.Summarizer.States.MetaState.TryMakeStep(Microsoft.Pex.Framework.Creatable.Summarizer.States.MetaState@)">
            <summary>
            TryMakeStep
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.Summarizer.States.MetaState.TryPrepare(Microsoft.ExtendedReflection.ComponentModel.Engine,System.Int32@)">
            <summary>
            TryPrepare
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.Summarizer.States.MetaState.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Framework.Creatable.Summarizer.States.MetaState.IsExhausted">
            <summary>
            IsExhausted
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Creatable.Summarizer.Stepper">
            <summary>
            Stepper
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.Summarizer.Stepper.TrySingleStep(System.Int32,Microsoft.ExtendedReflection.Metadata.Instruction@)">
            <summary>
            TrySingleStep
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.Summarizer.Stepper.TryManySteps(System.Int32,Microsoft.ExtendedReflection.Metadata.Instruction@,Microsoft.Pex.Framework.Creatable.Summarizer.States.MetaState,Microsoft.ExtendedReflection.ComponentModel.Engine,Microsoft.Pex.Framework.Creatable.Summarizer.FieldTracker)">
            <summary>
            TryManySteps
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Creatable.Summarizer.CreatableBySummary">
            <summary>
            CreatableBySummary
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.Summarizer.CreatableBySummary.#ctor(Microsoft.ExtendedReflection.Interpretation.TermManager,Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.ExtendedReflection.Metadata.Method,Microsoft.Pex.Framework.Creatable.Summarizer.Data)">
            <summary>
            CreatableBySummary
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.Summarizer.CreatableBySummary.IsFieldAcyclic(Microsoft.ExtendedReflection.Metadata.Field)">
            <summary>
            Whether a field of this type (or one of its supertypes)
            can only be initialized with references that were created before
            an instance of the given type is created.
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.Summarizer.CreatableBySummary.TryCreateValue(Microsoft.Pex.Engine.Creatable.IPexCreatableCreateValueContext)">
            <summary>
            TryCreateValue
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.Summarizer.CreatableBySummary.TryCreateCode(Microsoft.Pex.Engine.Creatable.IPexCreatableCreateCodeContext)">
            <summary>
            TryCreateCode
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.Summarizer.CreatableBySummary.TryGetInvariant(Microsoft.ExtendedReflection.Interpretation.TermManager,System.Converter{Microsoft.ExtendedReflection.Interpretation.Term,Microsoft.ExtendedReflection.Interpretation.Term}@)">
            <summary>
            TryGetInvariant
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Framework.Creatable.Summarizer.CreatableBySummary.CreatableType">
            <summary>
            CreatableType
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Framework.Creatable.Summarizer.CreatableBySummary.Minimize">
            <summary>
            Whether to minimize the number of objects of this type.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Pex.Framework.Creatable.Summarizer.Summarizer">
            <summary>
            Summarizer
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.Summarizer.Summarizer.TryGetInvariant(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,Microsoft.ExtendedReflection.Metadata.VisibilityContext,Microsoft.ExtendedReflection.Metadata.TypeEx,Microsoft.ExtendedReflection.Metadata.Method,Microsoft.Pex.Framework.Creatable.Summarizer.Data@)">
            <summary>
            TryGetInvariant
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Creatable.Summarizer.Summarizer.CreateNewOuterEngine(Microsoft.ExtendedReflection.Interpretation.TermManager)">
            <summary>
            CreateNewOuterEngine
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.TestGeneration.PexAssertExcludeTypeAttribute">
            <summary>
            Attribute that excludes members from a particular type to be asserted
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.TestGeneration.PexAssertionFilterAttributeBase">
            <summary>
            Base class for attribute creating IPexAttributeFilter instances
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.TestGeneration.PexAssertionFilterAttributeBase.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Pex.Framework.TestGeneration.PexAssertionFilterAttributeBase"/>
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.TestGeneration.PexAssertionFilterAttributeBase.BeforeExploration(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent)">
            <summary>
            Load the filters if any
            </summary>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.TestGeneration.PexAssertionFilterAttributeBase.TryCreateAssertionFilters(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.Pex.Engine.TestGeneration.IPexAssertionFilter}@)">
            <summary>
            Tries to create a set of filters
            </summary>
            <param name="host"></param>
            <param name="assertionFilters"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.TestGeneration.PexAssertionFilterAttributeBase.AfterExploration(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,System.Object)">
            <summary>
            
            </summary>
            <param name="host"></param>
            <param name="data"></param>
        </member>
        <member name="M:Microsoft.Pex.Framework.TestGeneration.PexAssertionFilterAttributeBase.Initialize(Microsoft.Pex.Engine.ComponentModel.IPexExplorationEngine)">
            <summary>
            
            </summary>
            <param name="host"></param>
        </member>
        <member name="M:Microsoft.Pex.Framework.TestGeneration.PexAssertionFilterAttributeBase.Load(Microsoft.ExtendedReflection.ComponentModel.IContainer)">
            <summary>
            
            </summary>
            <param name="explorationContainer"></param>
        </member>
        <member name="M:Microsoft.Pex.Framework.TestGeneration.PexAssertExcludeTypeAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the attribute with a type definition
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.Pex.Framework.TestGeneration.PexAssertExcludeTypeAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the attribute with a type definition
            </summary>
            <param name="type"></param>
            <param name="memberNameFilter">the member name filter</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.TestGeneration.PexAssertExcludeTypeAttribute.TryCreateAssertionFilters(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent,Microsoft.ExtendedReflection.Collections.IIndexable{Microsoft.Pex.Engine.TestGeneration.IPexAssertionFilter}@)">
            <summary>
            Creates the filter
            </summary>
            <param name="host"></param>
            <param name="assertionFilters"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.Using.PexUseTypeHintsAttribute">
            <summary>
            A collection of types to add to the guesser hints
            </summary>
        </member>
        <member name="T:Microsoft.Pex.Framework.Using.PexUseTypeHintsAttributeBase">
            <summary>
            Abstrat base class for stub types providers
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Using.PexUseTypeHintsAttributeBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Using.PexUseTypeHintsAttributeBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Using.PexUseTypeHintsAttributeBase.BeforeExploration(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent)">
            <summary>
            Callback that is executed before the exploration starts.
            </summary>
            <param name="host">The host.</param>
            <returns>some data</returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Using.PexUseTypeHintsAttributeBase.GetTypeDefinitions(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent)">
            <summary>
            Gets the type definitions.
            </summary>
            <param name="host">The host.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Using.PexUseTypeHintsAttribute.#ctor(System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Framework.Using.PexUseTypeHintsAttribute"/> class.
            </summary>
            <param name="types">The types.</param>
        </member>
        <member name="M:Microsoft.Pex.Framework.Using.PexUseTypeHintsAttribute.GetTypeDefinitions(Microsoft.Pex.Engine.ComponentModel.IPexExplorationComponent)">
            <summary>
            Gets the type definitions.
            </summary>
            <param name="host">The host.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Pex.Framework.Validation.PexAllowedContractRequiresFailureAttribute">
            <summary>
            Allows failures of code contracts requires clauses.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexAllowedContractRequiresFailureAttribute.#ctor">
            <summary>
            Allows failures of code contracts requires clauses,
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexAllowedContractRequiresFailureAttribute.IsExceptionTypeValid(Microsoft.ExtendedReflection.Metadata.TypeEx)">
            <summary>
            Determines whether the exception type is allowed.
            </summary>
            <param name="exceptionType">Type of the exception.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexAllowedContractRequiresFailureAttribute.IsSourceValid(System.String)">
            <summary>
            Determines whether the source assembly is allowed.
            </summary>
            <param name="assemblyName">The assembly name</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexAllowedContractRequiresFailureAttribute.IsTargetSiteValid(Microsoft.ExtendedReflection.Metadata.MethodDefinition)">
            <summary>
            Determines whether the target method is allowed.
            </summary>
            <param name="targetSite">The target site.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Pex.Framework.Validation.PexAllowedContractRequiresFailureAttribute.AnalyzeException(System.Exception,System.String@,System.String@)">
            <summary>
            Analyzes the exception.
            </summary>
            <param name="exception">The exception.</param>
            <param name="wikiTopic">The wiki topic.</param>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Pex.Framework.Validation.PexAllowedContractRequiresFailureAttribute.AcceptInnerException">
            <summary>
            Gets or sets a value indicating whether inner exception
            should be inspected.
            </summary>
            <value><c>true</c> if accept inner exception; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Microsoft.Pex.Framework.Validation.PexAllowedContractRequiresFailureAttribute.OnlyAtTypeUnderTestSurface">
            <summary>
            Gets or sets whether 
            this exception validator only applies to exceptions 
            that have been thrown at the surface of the type-under-test.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Framework.Validation.PexAllowedContractRequiresFailureAttribute.MessageFilter">
            <summary>
            Gets or sets a message filter; uses the default naming conventions for filters.
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Framework.Validation.PexAllowedContractRequiresFailureAttribute.Documented">
            <summary>
            Gets or sets a value indicating whether 
            the exception type should be documented
            </summary>
        </member>
        <member name="P:Microsoft.Pex.Framework.Validation.PexAllowedContractRequiresFailureAttribute.Description">
            <summary>
            Describes what this validator does.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Pex.Models.PTextReader">
            <summary>
            Parameterized model that simulates arbitrary text reader
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Models.PTextReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Models.PTextReader"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Models.PTextReader.Initialize">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Pex.Models.PTextReader"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Models.PTextReader.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.IO.TextReader"></see> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Microsoft.Pex.Models.PTextReader.Close">
            <summary>
            Closes the <see cref="T:System.IO.TextReader"></see> and releases any system resources associated with the TextReader.
            </summary>
        </member>
        <member name="M:Microsoft.Pex.Models.PTextReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads a maximum of count characters from the current stream and writes the data to buffer, beginning at index.
            </summary>
            <param name="buffer">When this method returns, this parameter contains the specified character array with the values between index and (index + count -1) replaced by the characters read from the current source.</param>
            <param name="index">The place in buffer at which to begin writing.</param>
            <param name="count">The maximum number of characters to read.</param>
            <returns>
            The number of characters that have been read. The number will be less than or equal to count, depending on whether all input characters have been read.
            </returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index or count is negative. </exception>
            <exception cref="T:System.ArgumentException">The buffer length minus index is less than count. </exception>
            <exception cref="T:System.ArgumentNullException">buffer is null. </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextReader"></see> is closed. </exception>
        </member>
        <member name="M:Microsoft.Pex.Models.PTextReader.Read(System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads a maximum of count characters from the current stream and writes the data to buffer, beginning at index.
            </summary>
            <param name="buffer">When this method returns, contains the specified character array with the values between index and (index + count - 1) replaced by the characters read from the current source.</param>
            <param name="index">The place in buffer at which to begin writing.</param>
            <param name="count">The maximum number of characters to read. If the end of the stream is reached before count of characters is read into buffer, the current method returns.</param>
            <returns>
            The number of characters that have been read. The number will be less than or equal to count, depending on whether the data is available within the stream. This method returns zero if called when no more characters are left to read.
            </returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index or count is negative. </exception>
            <exception cref="T:System.ArgumentException">The buffer length minus index is less than count. </exception>
            <exception cref="T:System.ArgumentNullException">buffer is null. </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextReader"></see> is closed. </exception>
        </member>
        <member name="M:Microsoft.Pex.Models.PTextReader.Read">
            <summary>
            Reads the next character from the input stream and advances the character position by one character.
            </summary>
            <returns>
            The next character from the input stream, or -1 if no more characters are available. The default implementation returns -1.
            </returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextReader"></see> is closed. </exception>        
        </member>
        <member name="M:Microsoft.Pex.Models.PTextReader.Peek">
            <summary>
            Reads the next character without changing the state of the reader or the character source. Returns the next available character without actually reading it from the input stream.
            </summary>
            <returns>
            The next character to be read, or -1 if no more characters are available or the stream does not support seeking.
            </returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextReader"></see> is closed. </exception>
        </member>
        <member name="M:Microsoft.Pex.Models.PTextReader.ReadLine">
            <summary>
            Reads a line of characters from the current stream and returns the data as a string.
            </summary>
            <returns>
            The next line from the input stream, or null if all characters have been read.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The number of characters in the next line is larger than <see cref="F:System.Int32.MaxValue"></see></exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.OutOfMemoryException">There is insufficient memory to allocate a buffer for the returned string. </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextReader"></see> is closed. </exception>
        </member>
        <member name="M:Microsoft.Pex.Models.PTextReader.ReadToEnd">
            <summary>
            Reads all characters from the current position to the end of the TextReader and returns them as one string.
            </summary>
            <returns>
            A string containing all characters from the current position to the end of the TextReader.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The number of characters in the next line is larger than <see cref="F:System.Int32.MaxValue"></see></exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.OutOfMemoryException">There is insufficient memory to allocate a buffer for the returned string. </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextReader"></see> is closed. </exception>
        </member>
        <member name="P:Microsoft.Pex.Models.PTextReader.Touched">
            <summary>
            Gets a value indicating whether this <see cref="T:Microsoft.Pex.Models.PTextReader"/> is touched.
            </summary>
            <value><c>true</c> if touched; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Microsoft.Pex.Models.PTextReader.Disposed">
            <summary>
            Gets a value indicating whether this <see cref="T:Microsoft.Pex.Models.PTextReader"/> is disposed.
            </summary>
            <value><c>true</c> if disposed; otherwise, <c>false</c>.</value>
        </member>
    </members>
</doc>
