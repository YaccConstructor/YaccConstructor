{
open QuickGraph.FSA.GraphBasedFsa
open QuickGraph.FSA.FsaApproximation
}

tokens {
    _ of FSA<char*Position<JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpLiteralExpression>>
}

options {
    translate = true
    module = "Calc.AbstractParser"
    infEpsPath = epsilons
    pos = uint64
}

module Main

binExpr<operand binOp>:
  operand (binOp operand)*
  
[<Start>]
expr: binExpr<term termOp> 
      | ERROR

termOp: PLUS | MINUS

term: binExpr<factor factorOp>
      | ERROR
factorOp: MULT | DIV

factor: binExpr<powExpr powOp>
        | ERROR

powOp: POW

powExpr:   NUMBER 
         | LBRACE expr RBRACE
         | ERROR

